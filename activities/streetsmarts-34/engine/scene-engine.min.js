(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.SceneEngine = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\basejs\\Base.js":[function(require,module,exports){
/*
  Based on Base.js 1.1a (c) 2006-2010, Dean Edwards
  Updated to pass JSHint and converted into a module by Kenneth Powers
  License: http://www.opensource.org/licenses/mit-license.php
*/
/*global define:true module:true*/
/*jshint eqeqeq:true*/
(function (name, global, definition) {
  if (typeof module !== 'undefined') {
    module.exports = definition();
  } else if (typeof define !== 'undefined' && typeof define.amd === 'object') {
    define(definition);
  } else {
    global[name] = definition();
  }
})('Base', this, function () {
  // Base Object
  var Base = function () {};

  // Implementation
  Base.extend = function (_instance, _static) { // subclass
    var extend = Base.prototype.extend;
    // build the prototype
    Base._prototyping = true;
    var proto = new this();
    extend.call(proto, _instance);
    proto.base = function () {
      // call this method from any other method to invoke that method's ancestor
    };
    delete Base._prototyping;
    // create the wrapper for the constructor function
    //var constructor = proto.constructor.valueOf(); //-dean
    var constructor = proto.constructor;
    var klass = proto.constructor = function () {
        if (!Base._prototyping) {
          if (this._constructing || this.constructor === klass) { // instantiation
            this._constructing = true;
            constructor.apply(this, arguments);
            delete this._constructing;
          } else if (arguments[0] !== null) { // casting
            return (arguments[0].extend || extend).call(arguments[0], proto);
          }
        }
      };
    // build the class interface
    klass.ancestor = this;
    klass.extend = this.extend;
    klass.forEach = this.forEach;
    klass.implement = this.implement;
    klass.prototype = proto;
    klass.toString = this.toString;
    klass.valueOf = function (type) {
      return (type === 'object') ? klass : constructor.valueOf();
    };
    extend.call(klass, _static);
    // class initialization
    if (typeof klass.init === 'function') klass.init();
    return klass;
  };

  Base.prototype = {
    extend: function (source, value) {
      if (arguments.length > 1) { // extending with a name/value pair
        var ancestor = this[source];
        if (ancestor && (typeof value === 'function') && // overriding a method?
        // the valueOf() comparison is to avoid circular references
        (!ancestor.valueOf || ancestor.valueOf() !== value.valueOf()) && /\bbase\b/.test(value)) {
          // get the underlying method
          var method = value.valueOf();
          // override
          value = function () {
            var previous = this.base || Base.prototype.base;
            this.base = ancestor;
            var returnValue = method.apply(this, arguments);
            this.base = previous;
            return returnValue;
          };
          // point to the underlying method
          value.valueOf = function (type) {
            return (type === 'object') ? value : method;
          };
          value.toString = Base.toString;
        }
        this[source] = value;
      } else if (source) { // extending with an object literal
        var extend = Base.prototype.extend;
        // if this object has a customized extend method then use it
        if (!Base._prototyping && typeof this !== 'function') {
          extend = this.extend || extend;
        }
        var proto = {
          toSource: null
        };
        // do the "toString" and other methods manually
        var hidden = ['constructor', 'toString', 'valueOf'];
        // if we are prototyping then include the constructor
        for (var i = Base._prototyping ? 0 : 1; i < hidden.length; i++) {
          var h = hidden[i];
          if (source[h] !== proto[h])
            extend.call(this, h, source[h]);
        }
        // copy each of the source object's properties to this object
        for (var key in source) {
          if (!proto[key]) extend.call(this, key, source[key]);
        }
      }
      return this;
    }
  };

  // initialize
  Base = Base.extend({
    constructor: function () {
      this.extend(arguments[0]);
    }
  }, {
    ancestor: Object,
    version: '1.1',
    forEach: function (object, block, context) {
      for (var key in object) {
        if (this.prototype[key] === undefined) {
          block.call(context, object[key], key, object);
        }
      }
    },
    implement: function () {
      for (var i = 0; i < arguments.length; i++) {
        if (typeof arguments[i] === 'function') {
          // if it's a function, call it
          arguments[i](this.prototype);
        } else {
          // add the interface using the extend method
          this.prototype.extend(arguments[i]);
        }
      }
      return this;
    },
    toString: function () {
      return String(this.valueOf());
    }
  });

  // Return Base implementation
  return Base;
});

},{}],"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\inherits\\inherits_browser.js":[function(require,module,exports){
if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    var TempCtor = function () {}
    TempCtor.prototype = superCtor.prototype
    ctor.prototype = new TempCtor()
    ctor.prototype.constructor = ctor
  }
}

},{}],"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\jquery\\dist\\jquery.js":[function(require,module,exports){
/*!
 * jQuery JavaScript Library v2.1.4
 * http://jquery.com/
 *
 * Includes Sizzle.js
 * http://sizzlejs.com/
 *
 * Copyright 2005, 2014 jQuery Foundation, Inc. and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2015-04-28T16:01Z
 */

(function( global, factory ) {

	if ( typeof module === "object" && typeof module.exports === "object" ) {
		// For CommonJS and CommonJS-like environments where a proper `window`
		// is present, execute the factory and get jQuery.
		// For environments that do not have a `window` with a `document`
		// (such as Node.js), expose a factory as module.exports.
		// This accentuates the need for the creation of a real `window`.
		// e.g. var jQuery = require("jquery")(window);
		// See ticket #14549 for more info.
		module.exports = global.document ?
			factory( global, true ) :
			function( w ) {
				if ( !w.document ) {
					throw new Error( "jQuery requires a window with a document" );
				}
				return factory( w );
			};
	} else {
		factory( global );
	}

// Pass this if window is not defined yet
}(typeof window !== "undefined" ? window : this, function( window, noGlobal ) {

// Support: Firefox 18+
// Can't be in strict mode, several libs including ASP.NET trace
// the stack via arguments.caller.callee and Firefox dies if
// you try to trace through "use strict" call chains. (#13335)
//

var arr = [];

var slice = arr.slice;

var concat = arr.concat;

var push = arr.push;

var indexOf = arr.indexOf;

var class2type = {};

var toString = class2type.toString;

var hasOwn = class2type.hasOwnProperty;

var support = {};



var
	// Use the correct document accordingly with window argument (sandbox)
	document = window.document,

	version = "2.1.4",

	// Define a local copy of jQuery
	jQuery = function( selector, context ) {
		// The jQuery object is actually just the init constructor 'enhanced'
		// Need init if jQuery is called (just allow error to be thrown if not included)
		return new jQuery.fn.init( selector, context );
	},

	// Support: Android<4.1
	// Make sure we trim BOM and NBSP
	rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,

	// Matches dashed string for camelizing
	rmsPrefix = /^-ms-/,
	rdashAlpha = /-([\da-z])/gi,

	// Used by jQuery.camelCase as callback to replace()
	fcamelCase = function( all, letter ) {
		return letter.toUpperCase();
	};

jQuery.fn = jQuery.prototype = {
	// The current version of jQuery being used
	jquery: version,

	constructor: jQuery,

	// Start with an empty selector
	selector: "",

	// The default length of a jQuery object is 0
	length: 0,

	toArray: function() {
		return slice.call( this );
	},

	// Get the Nth element in the matched element set OR
	// Get the whole matched element set as a clean array
	get: function( num ) {
		return num != null ?

			// Return just the one element from the set
			( num < 0 ? this[ num + this.length ] : this[ num ] ) :

			// Return all the elements in a clean array
			slice.call( this );
	},

	// Take an array of elements and push it onto the stack
	// (returning the new matched element set)
	pushStack: function( elems ) {

		// Build a new jQuery matched element set
		var ret = jQuery.merge( this.constructor(), elems );

		// Add the old object onto the stack (as a reference)
		ret.prevObject = this;
		ret.context = this.context;

		// Return the newly-formed element set
		return ret;
	},

	// Execute a callback for every element in the matched set.
	// (You can seed the arguments with an array of args, but this is
	// only used internally.)
	each: function( callback, args ) {
		return jQuery.each( this, callback, args );
	},

	map: function( callback ) {
		return this.pushStack( jQuery.map(this, function( elem, i ) {
			return callback.call( elem, i, elem );
		}));
	},

	slice: function() {
		return this.pushStack( slice.apply( this, arguments ) );
	},

	first: function() {
		return this.eq( 0 );
	},

	last: function() {
		return this.eq( -1 );
	},

	eq: function( i ) {
		var len = this.length,
			j = +i + ( i < 0 ? len : 0 );
		return this.pushStack( j >= 0 && j < len ? [ this[j] ] : [] );
	},

	end: function() {
		return this.prevObject || this.constructor(null);
	},

	// For internal use only.
	// Behaves like an Array's method, not like a jQuery method.
	push: push,
	sort: arr.sort,
	splice: arr.splice
};

jQuery.extend = jQuery.fn.extend = function() {
	var options, name, src, copy, copyIsArray, clone,
		target = arguments[0] || {},
		i = 1,
		length = arguments.length,
		deep = false;

	// Handle a deep copy situation
	if ( typeof target === "boolean" ) {
		deep = target;

		// Skip the boolean and the target
		target = arguments[ i ] || {};
		i++;
	}

	// Handle case when target is a string or something (possible in deep copy)
	if ( typeof target !== "object" && !jQuery.isFunction(target) ) {
		target = {};
	}

	// Extend jQuery itself if only one argument is passed
	if ( i === length ) {
		target = this;
		i--;
	}

	for ( ; i < length; i++ ) {
		// Only deal with non-null/undefined values
		if ( (options = arguments[ i ]) != null ) {
			// Extend the base object
			for ( name in options ) {
				src = target[ name ];
				copy = options[ name ];

				// Prevent never-ending loop
				if ( target === copy ) {
					continue;
				}

				// Recurse if we're merging plain objects or arrays
				if ( deep && copy && ( jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)) ) ) {
					if ( copyIsArray ) {
						copyIsArray = false;
						clone = src && jQuery.isArray(src) ? src : [];

					} else {
						clone = src && jQuery.isPlainObject(src) ? src : {};
					}

					// Never move original objects, clone them
					target[ name ] = jQuery.extend( deep, clone, copy );

				// Don't bring in undefined values
				} else if ( copy !== undefined ) {
					target[ name ] = copy;
				}
			}
		}
	}

	// Return the modified object
	return target;
};

jQuery.extend({
	// Unique for each copy of jQuery on the page
	expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),

	// Assume jQuery is ready without the ready module
	isReady: true,

	error: function( msg ) {
		throw new Error( msg );
	},

	noop: function() {},

	isFunction: function( obj ) {
		return jQuery.type(obj) === "function";
	},

	isArray: Array.isArray,

	isWindow: function( obj ) {
		return obj != null && obj === obj.window;
	},

	isNumeric: function( obj ) {
		// parseFloat NaNs numeric-cast false positives (null|true|false|"")
		// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
		// subtraction forces infinities to NaN
		// adding 1 corrects loss of precision from parseFloat (#15100)
		return !jQuery.isArray( obj ) && (obj - parseFloat( obj ) + 1) >= 0;
	},

	isPlainObject: function( obj ) {
		// Not plain objects:
		// - Any object or value whose internal [[Class]] property is not "[object Object]"
		// - DOM nodes
		// - window
		if ( jQuery.type( obj ) !== "object" || obj.nodeType || jQuery.isWindow( obj ) ) {
			return false;
		}

		if ( obj.constructor &&
				!hasOwn.call( obj.constructor.prototype, "isPrototypeOf" ) ) {
			return false;
		}

		// If the function hasn't returned already, we're confident that
		// |obj| is a plain object, created by {} or constructed with new Object
		return true;
	},

	isEmptyObject: function( obj ) {
		var name;
		for ( name in obj ) {
			return false;
		}
		return true;
	},

	type: function( obj ) {
		if ( obj == null ) {
			return obj + "";
		}
		// Support: Android<4.0, iOS<6 (functionish RegExp)
		return typeof obj === "object" || typeof obj === "function" ?
			class2type[ toString.call(obj) ] || "object" :
			typeof obj;
	},

	// Evaluates a script in a global context
	globalEval: function( code ) {
		var script,
			indirect = eval;

		code = jQuery.trim( code );

		if ( code ) {
			// If the code includes a valid, prologue position
			// strict mode pragma, execute code by injecting a
			// script tag into the document.
			if ( code.indexOf("use strict") === 1 ) {
				script = document.createElement("script");
				script.text = code;
				document.head.appendChild( script ).parentNode.removeChild( script );
			} else {
			// Otherwise, avoid the DOM node creation, insertion
			// and removal by using an indirect global eval
				indirect( code );
			}
		}
	},

	// Convert dashed to camelCase; used by the css and data modules
	// Support: IE9-11+
	// Microsoft forgot to hump their vendor prefix (#9572)
	camelCase: function( string ) {
		return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
	},

	nodeName: function( elem, name ) {
		return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
	},

	// args is for internal usage only
	each: function( obj, callback, args ) {
		var value,
			i = 0,
			length = obj.length,
			isArray = isArraylike( obj );

		if ( args ) {
			if ( isArray ) {
				for ( ; i < length; i++ ) {
					value = callback.apply( obj[ i ], args );

					if ( value === false ) {
						break;
					}
				}
			} else {
				for ( i in obj ) {
					value = callback.apply( obj[ i ], args );

					if ( value === false ) {
						break;
					}
				}
			}

		// A special, fast, case for the most common use of each
		} else {
			if ( isArray ) {
				for ( ; i < length; i++ ) {
					value = callback.call( obj[ i ], i, obj[ i ] );

					if ( value === false ) {
						break;
					}
				}
			} else {
				for ( i in obj ) {
					value = callback.call( obj[ i ], i, obj[ i ] );

					if ( value === false ) {
						break;
					}
				}
			}
		}

		return obj;
	},

	// Support: Android<4.1
	trim: function( text ) {
		return text == null ?
			"" :
			( text + "" ).replace( rtrim, "" );
	},

	// results is for internal usage only
	makeArray: function( arr, results ) {
		var ret = results || [];

		if ( arr != null ) {
			if ( isArraylike( Object(arr) ) ) {
				jQuery.merge( ret,
					typeof arr === "string" ?
					[ arr ] : arr
				);
			} else {
				push.call( ret, arr );
			}
		}

		return ret;
	},

	inArray: function( elem, arr, i ) {
		return arr == null ? -1 : indexOf.call( arr, elem, i );
	},

	merge: function( first, second ) {
		var len = +second.length,
			j = 0,
			i = first.length;

		for ( ; j < len; j++ ) {
			first[ i++ ] = second[ j ];
		}

		first.length = i;

		return first;
	},

	grep: function( elems, callback, invert ) {
		var callbackInverse,
			matches = [],
			i = 0,
			length = elems.length,
			callbackExpect = !invert;

		// Go through the array, only saving the items
		// that pass the validator function
		for ( ; i < length; i++ ) {
			callbackInverse = !callback( elems[ i ], i );
			if ( callbackInverse !== callbackExpect ) {
				matches.push( elems[ i ] );
			}
		}

		return matches;
	},

	// arg is for internal usage only
	map: function( elems, callback, arg ) {
		var value,
			i = 0,
			length = elems.length,
			isArray = isArraylike( elems ),
			ret = [];

		// Go through the array, translating each of the items to their new values
		if ( isArray ) {
			for ( ; i < length; i++ ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}

		// Go through every key on the object,
		} else {
			for ( i in elems ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}
		}

		// Flatten any nested arrays
		return concat.apply( [], ret );
	},

	// A global GUID counter for objects
	guid: 1,

	// Bind a function to a context, optionally partially applying any
	// arguments.
	proxy: function( fn, context ) {
		var tmp, args, proxy;

		if ( typeof context === "string" ) {
			tmp = fn[ context ];
			context = fn;
			fn = tmp;
		}

		// Quick check to determine if target is callable, in the spec
		// this throws a TypeError, but we will just return undefined.
		if ( !jQuery.isFunction( fn ) ) {
			return undefined;
		}

		// Simulated bind
		args = slice.call( arguments, 2 );
		proxy = function() {
			return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
		};

		// Set the guid of unique handler to the same of original handler, so it can be removed
		proxy.guid = fn.guid = fn.guid || jQuery.guid++;

		return proxy;
	},

	now: Date.now,

	// jQuery.support is not used in Core but other projects attach their
	// properties to it so it needs to exist.
	support: support
});

// Populate the class2type map
jQuery.each("Boolean Number String Function Array Date RegExp Object Error".split(" "), function(i, name) {
	class2type[ "[object " + name + "]" ] = name.toLowerCase();
});

function isArraylike( obj ) {

	// Support: iOS 8.2 (not reproducible in simulator)
	// `in` check used to prevent JIT error (gh-2145)
	// hasOwn isn't used here due to false negatives
	// regarding Nodelist length in IE
	var length = "length" in obj && obj.length,
		type = jQuery.type( obj );

	if ( type === "function" || jQuery.isWindow( obj ) ) {
		return false;
	}

	if ( obj.nodeType === 1 && length ) {
		return true;
	}

	return type === "array" || length === 0 ||
		typeof length === "number" && length > 0 && ( length - 1 ) in obj;
}
var Sizzle =
/*!
 * Sizzle CSS Selector Engine v2.2.0-pre
 * http://sizzlejs.com/
 *
 * Copyright 2008, 2014 jQuery Foundation, Inc. and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2014-12-16
 */
(function( window ) {

var i,
	support,
	Expr,
	getText,
	isXML,
	tokenize,
	compile,
	select,
	outermostContext,
	sortInput,
	hasDuplicate,

	// Local document vars
	setDocument,
	document,
	docElem,
	documentIsHTML,
	rbuggyQSA,
	rbuggyMatches,
	matches,
	contains,

	// Instance-specific data
	expando = "sizzle" + 1 * new Date(),
	preferredDoc = window.document,
	dirruns = 0,
	done = 0,
	classCache = createCache(),
	tokenCache = createCache(),
	compilerCache = createCache(),
	sortOrder = function( a, b ) {
		if ( a === b ) {
			hasDuplicate = true;
		}
		return 0;
	},

	// General-purpose constants
	MAX_NEGATIVE = 1 << 31,

	// Instance methods
	hasOwn = ({}).hasOwnProperty,
	arr = [],
	pop = arr.pop,
	push_native = arr.push,
	push = arr.push,
	slice = arr.slice,
	// Use a stripped-down indexOf as it's faster than native
	// http://jsperf.com/thor-indexof-vs-for/5
	indexOf = function( list, elem ) {
		var i = 0,
			len = list.length;
		for ( ; i < len; i++ ) {
			if ( list[i] === elem ) {
				return i;
			}
		}
		return -1;
	},

	booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",

	// Regular expressions

	// Whitespace characters http://www.w3.org/TR/css3-selectors/#whitespace
	whitespace = "[\\x20\\t\\r\\n\\f]",
	// http://www.w3.org/TR/css3-syntax/#characters
	characterEncoding = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",

	// Loosely modeled on CSS identifier characters
	// An unquoted value should be a CSS identifier http://www.w3.org/TR/css3-selectors/#attribute-selectors
	// Proper syntax: http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
	identifier = characterEncoding.replace( "w", "w#" ),

	// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
	attributes = "\\[" + whitespace + "*(" + characterEncoding + ")(?:" + whitespace +
		// Operator (capture 2)
		"*([*^$|!~]?=)" + whitespace +
		// "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
		"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace +
		"*\\]",

	pseudos = ":(" + characterEncoding + ")(?:\\((" +
		// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
		// 1. quoted (capture 3; capture 4 or capture 5)
		"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
		// 2. simple (capture 6)
		"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +
		// 3. anything else (capture 2)
		".*" +
		")\\)|)",

	// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
	rwhitespace = new RegExp( whitespace + "+", "g" ),
	rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),

	rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
	rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*" ),

	rattributeQuotes = new RegExp( "=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g" ),

	rpseudo = new RegExp( pseudos ),
	ridentifier = new RegExp( "^" + identifier + "$" ),

	matchExpr = {
		"ID": new RegExp( "^#(" + characterEncoding + ")" ),
		"CLASS": new RegExp( "^\\.(" + characterEncoding + ")" ),
		"TAG": new RegExp( "^(" + characterEncoding.replace( "w", "w*" ) + ")" ),
		"ATTR": new RegExp( "^" + attributes ),
		"PSEUDO": new RegExp( "^" + pseudos ),
		"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
			"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
			"*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
		"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),
		// For use in libraries implementing .is()
		// We use this for POS matching in `select`
		"needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
			whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
	},

	rinputs = /^(?:input|select|textarea|button)$/i,
	rheader = /^h\d$/i,

	rnative = /^[^{]+\{\s*\[native \w/,

	// Easily-parseable/retrievable ID or TAG or CLASS selectors
	rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

	rsibling = /[+~]/,
	rescape = /'|\\/g,

	// CSS escapes http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
	runescape = new RegExp( "\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig" ),
	funescape = function( _, escaped, escapedWhitespace ) {
		var high = "0x" + escaped - 0x10000;
		// NaN means non-codepoint
		// Support: Firefox<24
		// Workaround erroneous numeric interpretation of +"0x"
		return high !== high || escapedWhitespace ?
			escaped :
			high < 0 ?
				// BMP codepoint
				String.fromCharCode( high + 0x10000 ) :
				// Supplemental Plane codepoint (surrogate pair)
				String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
	},

	// Used for iframes
	// See setDocument()
	// Removing the function wrapper causes a "Permission Denied"
	// error in IE
	unloadHandler = function() {
		setDocument();
	};

// Optimize for push.apply( _, NodeList )
try {
	push.apply(
		(arr = slice.call( preferredDoc.childNodes )),
		preferredDoc.childNodes
	);
	// Support: Android<4.0
	// Detect silently failing push.apply
	arr[ preferredDoc.childNodes.length ].nodeType;
} catch ( e ) {
	push = { apply: arr.length ?

		// Leverage slice if possible
		function( target, els ) {
			push_native.apply( target, slice.call(els) );
		} :

		// Support: IE<9
		// Otherwise append directly
		function( target, els ) {
			var j = target.length,
				i = 0;
			// Can't trust NodeList.length
			while ( (target[j++] = els[i++]) ) {}
			target.length = j - 1;
		}
	};
}

function Sizzle( selector, context, results, seed ) {
	var match, elem, m, nodeType,
		// QSA vars
		i, groups, old, nid, newContext, newSelector;

	if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {
		setDocument( context );
	}

	context = context || document;
	results = results || [];
	nodeType = context.nodeType;

	if ( typeof selector !== "string" || !selector ||
		nodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {

		return results;
	}

	if ( !seed && documentIsHTML ) {

		// Try to shortcut find operations when possible (e.g., not under DocumentFragment)
		if ( nodeType !== 11 && (match = rquickExpr.exec( selector )) ) {
			// Speed-up: Sizzle("#ID")
			if ( (m = match[1]) ) {
				if ( nodeType === 9 ) {
					elem = context.getElementById( m );
					// Check parentNode to catch when Blackberry 4.6 returns
					// nodes that are no longer in the document (jQuery #6963)
					if ( elem && elem.parentNode ) {
						// Handle the case where IE, Opera, and Webkit return items
						// by name instead of ID
						if ( elem.id === m ) {
							results.push( elem );
							return results;
						}
					} else {
						return results;
					}
				} else {
					// Context is not a document
					if ( context.ownerDocument && (elem = context.ownerDocument.getElementById( m )) &&
						contains( context, elem ) && elem.id === m ) {
						results.push( elem );
						return results;
					}
				}

			// Speed-up: Sizzle("TAG")
			} else if ( match[2] ) {
				push.apply( results, context.getElementsByTagName( selector ) );
				return results;

			// Speed-up: Sizzle(".CLASS")
			} else if ( (m = match[3]) && support.getElementsByClassName ) {
				push.apply( results, context.getElementsByClassName( m ) );
				return results;
			}
		}

		// QSA path
		if ( support.qsa && (!rbuggyQSA || !rbuggyQSA.test( selector )) ) {
			nid = old = expando;
			newContext = context;
			newSelector = nodeType !== 1 && selector;

			// qSA works strangely on Element-rooted queries
			// We can work around this by specifying an extra ID on the root
			// and working up from there (Thanks to Andrew Dupont for the technique)
			// IE 8 doesn't work on object elements
			if ( nodeType === 1 && context.nodeName.toLowerCase() !== "object" ) {
				groups = tokenize( selector );

				if ( (old = context.getAttribute("id")) ) {
					nid = old.replace( rescape, "\\$&" );
				} else {
					context.setAttribute( "id", nid );
				}
				nid = "[id='" + nid + "'] ";

				i = groups.length;
				while ( i-- ) {
					groups[i] = nid + toSelector( groups[i] );
				}
				newContext = rsibling.test( selector ) && testContext( context.parentNode ) || context;
				newSelector = groups.join(",");
			}

			if ( newSelector ) {
				try {
					push.apply( results,
						newContext.querySelectorAll( newSelector )
					);
					return results;
				} catch(qsaError) {
				} finally {
					if ( !old ) {
						context.removeAttribute("id");
					}
				}
			}
		}
	}

	// All others
	return select( selector.replace( rtrim, "$1" ), context, results, seed );
}

/**
 * Create key-value caches of limited size
 * @returns {Function(string, Object)} Returns the Object data after storing it on itself with
 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
 *	deleting the oldest entry
 */
function createCache() {
	var keys = [];

	function cache( key, value ) {
		// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
		if ( keys.push( key + " " ) > Expr.cacheLength ) {
			// Only keep the most recent entries
			delete cache[ keys.shift() ];
		}
		return (cache[ key + " " ] = value);
	}
	return cache;
}

/**
 * Mark a function for special use by Sizzle
 * @param {Function} fn The function to mark
 */
function markFunction( fn ) {
	fn[ expando ] = true;
	return fn;
}

/**
 * Support testing using an element
 * @param {Function} fn Passed the created div and expects a boolean result
 */
function assert( fn ) {
	var div = document.createElement("div");

	try {
		return !!fn( div );
	} catch (e) {
		return false;
	} finally {
		// Remove from its parent by default
		if ( div.parentNode ) {
			div.parentNode.removeChild( div );
		}
		// release memory in IE
		div = null;
	}
}

/**
 * Adds the same handler for all of the specified attrs
 * @param {String} attrs Pipe-separated list of attributes
 * @param {Function} handler The method that will be applied
 */
function addHandle( attrs, handler ) {
	var arr = attrs.split("|"),
		i = attrs.length;

	while ( i-- ) {
		Expr.attrHandle[ arr[i] ] = handler;
	}
}

/**
 * Checks document order of two siblings
 * @param {Element} a
 * @param {Element} b
 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
 */
function siblingCheck( a, b ) {
	var cur = b && a,
		diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
			( ~b.sourceIndex || MAX_NEGATIVE ) -
			( ~a.sourceIndex || MAX_NEGATIVE );

	// Use IE sourceIndex if available on both nodes
	if ( diff ) {
		return diff;
	}

	// Check if b follows a
	if ( cur ) {
		while ( (cur = cur.nextSibling) ) {
			if ( cur === b ) {
				return -1;
			}
		}
	}

	return a ? 1 : -1;
}

/**
 * Returns a function to use in pseudos for input types
 * @param {String} type
 */
function createInputPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return name === "input" && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for buttons
 * @param {String} type
 */
function createButtonPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return (name === "input" || name === "button") && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for positionals
 * @param {Function} fn
 */
function createPositionalPseudo( fn ) {
	return markFunction(function( argument ) {
		argument = +argument;
		return markFunction(function( seed, matches ) {
			var j,
				matchIndexes = fn( [], seed.length, argument ),
				i = matchIndexes.length;

			// Match elements found at the specified indexes
			while ( i-- ) {
				if ( seed[ (j = matchIndexes[i]) ] ) {
					seed[j] = !(matches[j] = seed[j]);
				}
			}
		});
	});
}

/**
 * Checks a node for validity as a Sizzle context
 * @param {Element|Object=} context
 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
 */
function testContext( context ) {
	return context && typeof context.getElementsByTagName !== "undefined" && context;
}

// Expose support vars for convenience
support = Sizzle.support = {};

/**
 * Detects XML nodes
 * @param {Element|Object} elem An element or a document
 * @returns {Boolean} True iff elem is a non-HTML XML node
 */
isXML = Sizzle.isXML = function( elem ) {
	// documentElement is verified for cases where it doesn't yet exist
	// (such as loading iframes in IE - #4833)
	var documentElement = elem && (elem.ownerDocument || elem).documentElement;
	return documentElement ? documentElement.nodeName !== "HTML" : false;
};

/**
 * Sets document-related variables once based on the current document
 * @param {Element|Object} [doc] An element or document object to use to set the document
 * @returns {Object} Returns the current document
 */
setDocument = Sizzle.setDocument = function( node ) {
	var hasCompare, parent,
		doc = node ? node.ownerDocument || node : preferredDoc;

	// If no document and documentElement is available, return
	if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {
		return document;
	}

	// Set our document
	document = doc;
	docElem = doc.documentElement;
	parent = doc.defaultView;

	// Support: IE>8
	// If iframe document is assigned to "document" variable and if iframe has been reloaded,
	// IE will throw "permission denied" error when accessing "document" variable, see jQuery #13936
	// IE6-8 do not support the defaultView property so parent will be undefined
	if ( parent && parent !== parent.top ) {
		// IE11 does not have attachEvent, so all must suffer
		if ( parent.addEventListener ) {
			parent.addEventListener( "unload", unloadHandler, false );
		} else if ( parent.attachEvent ) {
			parent.attachEvent( "onunload", unloadHandler );
		}
	}

	/* Support tests
	---------------------------------------------------------------------- */
	documentIsHTML = !isXML( doc );

	/* Attributes
	---------------------------------------------------------------------- */

	// Support: IE<8
	// Verify that getAttribute really returns attributes and not properties
	// (excepting IE8 booleans)
	support.attributes = assert(function( div ) {
		div.className = "i";
		return !div.getAttribute("className");
	});

	/* getElement(s)By*
	---------------------------------------------------------------------- */

	// Check if getElementsByTagName("*") returns only elements
	support.getElementsByTagName = assert(function( div ) {
		div.appendChild( doc.createComment("") );
		return !div.getElementsByTagName("*").length;
	});

	// Support: IE<9
	support.getElementsByClassName = rnative.test( doc.getElementsByClassName );

	// Support: IE<10
	// Check if getElementById returns elements by name
	// The broken getElementById methods don't pick up programatically-set names,
	// so use a roundabout getElementsByName test
	support.getById = assert(function( div ) {
		docElem.appendChild( div ).id = expando;
		return !doc.getElementsByName || !doc.getElementsByName( expando ).length;
	});

	// ID find and filter
	if ( support.getById ) {
		Expr.find["ID"] = function( id, context ) {
			if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
				var m = context.getElementById( id );
				// Check parentNode to catch when Blackberry 4.6 returns
				// nodes that are no longer in the document #6963
				return m && m.parentNode ? [ m ] : [];
			}
		};
		Expr.filter["ID"] = function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				return elem.getAttribute("id") === attrId;
			};
		};
	} else {
		// Support: IE6/7
		// getElementById is not reliable as a find shortcut
		delete Expr.find["ID"];

		Expr.filter["ID"] =  function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				var node = typeof elem.getAttributeNode !== "undefined" && elem.getAttributeNode("id");
				return node && node.value === attrId;
			};
		};
	}

	// Tag
	Expr.find["TAG"] = support.getElementsByTagName ?
		function( tag, context ) {
			if ( typeof context.getElementsByTagName !== "undefined" ) {
				return context.getElementsByTagName( tag );

			// DocumentFragment nodes don't have gEBTN
			} else if ( support.qsa ) {
				return context.querySelectorAll( tag );
			}
		} :

		function( tag, context ) {
			var elem,
				tmp = [],
				i = 0,
				// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
				results = context.getElementsByTagName( tag );

			// Filter out possible comments
			if ( tag === "*" ) {
				while ( (elem = results[i++]) ) {
					if ( elem.nodeType === 1 ) {
						tmp.push( elem );
					}
				}

				return tmp;
			}
			return results;
		};

	// Class
	Expr.find["CLASS"] = support.getElementsByClassName && function( className, context ) {
		if ( documentIsHTML ) {
			return context.getElementsByClassName( className );
		}
	};

	/* QSA/matchesSelector
	---------------------------------------------------------------------- */

	// QSA and matchesSelector support

	// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
	rbuggyMatches = [];

	// qSa(:focus) reports false when true (Chrome 21)
	// We allow this because of a bug in IE8/9 that throws an error
	// whenever `document.activeElement` is accessed on an iframe
	// So, we allow :focus to pass through QSA all the time to avoid the IE error
	// See http://bugs.jquery.com/ticket/13378
	rbuggyQSA = [];

	if ( (support.qsa = rnative.test( doc.querySelectorAll )) ) {
		// Build QSA regex
		// Regex strategy adopted from Diego Perini
		assert(function( div ) {
			// Select is set to empty string on purpose
			// This is to test IE's treatment of not explicitly
			// setting a boolean content attribute,
			// since its presence should be enough
			// http://bugs.jquery.com/ticket/12359
			docElem.appendChild( div ).innerHTML = "<a id='" + expando + "'></a>" +
				"<select id='" + expando + "-\f]' msallowcapture=''>" +
				"<option selected=''></option></select>";

			// Support: IE8, Opera 11-12.16
			// Nothing should be selected when empty strings follow ^= or $= or *=
			// The test attribute must be unknown in Opera but "safe" for WinRT
			// http://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
			if ( div.querySelectorAll("[msallowcapture^='']").length ) {
				rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
			}

			// Support: IE8
			// Boolean attributes and "value" are not treated correctly
			if ( !div.querySelectorAll("[selected]").length ) {
				rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
			}

			// Support: Chrome<29, Android<4.2+, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.7+
			if ( !div.querySelectorAll( "[id~=" + expando + "-]" ).length ) {
				rbuggyQSA.push("~=");
			}

			// Webkit/Opera - :checked should return selected option elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			// IE8 throws error here and will not see later tests
			if ( !div.querySelectorAll(":checked").length ) {
				rbuggyQSA.push(":checked");
			}

			// Support: Safari 8+, iOS 8+
			// https://bugs.webkit.org/show_bug.cgi?id=136851
			// In-page `selector#id sibing-combinator selector` fails
			if ( !div.querySelectorAll( "a#" + expando + "+*" ).length ) {
				rbuggyQSA.push(".#.+[+~]");
			}
		});

		assert(function( div ) {
			// Support: Windows 8 Native Apps
			// The type and name attributes are restricted during .innerHTML assignment
			var input = doc.createElement("input");
			input.setAttribute( "type", "hidden" );
			div.appendChild( input ).setAttribute( "name", "D" );

			// Support: IE8
			// Enforce case-sensitivity of name attribute
			if ( div.querySelectorAll("[name=d]").length ) {
				rbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );
			}

			// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
			// IE8 throws error here and will not see later tests
			if ( !div.querySelectorAll(":enabled").length ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Opera 10-11 does not throw on post-comma invalid pseudos
			div.querySelectorAll("*,:x");
			rbuggyQSA.push(",.*:");
		});
	}

	if ( (support.matchesSelector = rnative.test( (matches = docElem.matches ||
		docElem.webkitMatchesSelector ||
		docElem.mozMatchesSelector ||
		docElem.oMatchesSelector ||
		docElem.msMatchesSelector) )) ) {

		assert(function( div ) {
			// Check to see if it's possible to do matchesSelector
			// on a disconnected node (IE 9)
			support.disconnectedMatch = matches.call( div, "div" );

			// This should fail with an exception
			// Gecko does not error, returns false instead
			matches.call( div, "[s!='']:x" );
			rbuggyMatches.push( "!=", pseudos );
		});
	}

	rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join("|") );
	rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join("|") );

	/* Contains
	---------------------------------------------------------------------- */
	hasCompare = rnative.test( docElem.compareDocumentPosition );

	// Element contains another
	// Purposefully does not implement inclusive descendent
	// As in, an element does not contain itself
	contains = hasCompare || rnative.test( docElem.contains ) ?
		function( a, b ) {
			var adown = a.nodeType === 9 ? a.documentElement : a,
				bup = b && b.parentNode;
			return a === bup || !!( bup && bup.nodeType === 1 && (
				adown.contains ?
					adown.contains( bup ) :
					a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
			));
		} :
		function( a, b ) {
			if ( b ) {
				while ( (b = b.parentNode) ) {
					if ( b === a ) {
						return true;
					}
				}
			}
			return false;
		};

	/* Sorting
	---------------------------------------------------------------------- */

	// Document order sorting
	sortOrder = hasCompare ?
	function( a, b ) {

		// Flag for duplicate removal
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		// Sort on method existence if only one input has compareDocumentPosition
		var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
		if ( compare ) {
			return compare;
		}

		// Calculate position if both inputs belong to the same document
		compare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?
			a.compareDocumentPosition( b ) :

			// Otherwise we know they are disconnected
			1;

		// Disconnected nodes
		if ( compare & 1 ||
			(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {

			// Choose the first element that is related to our preferred document
			if ( a === doc || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {
				return -1;
			}
			if ( b === doc || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {
				return 1;
			}

			// Maintain original order
			return sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;
		}

		return compare & 4 ? -1 : 1;
	} :
	function( a, b ) {
		// Exit early if the nodes are identical
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		var cur,
			i = 0,
			aup = a.parentNode,
			bup = b.parentNode,
			ap = [ a ],
			bp = [ b ];

		// Parentless nodes are either documents or disconnected
		if ( !aup || !bup ) {
			return a === doc ? -1 :
				b === doc ? 1 :
				aup ? -1 :
				bup ? 1 :
				sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;

		// If the nodes are siblings, we can do a quick check
		} else if ( aup === bup ) {
			return siblingCheck( a, b );
		}

		// Otherwise we need full lists of their ancestors for comparison
		cur = a;
		while ( (cur = cur.parentNode) ) {
			ap.unshift( cur );
		}
		cur = b;
		while ( (cur = cur.parentNode) ) {
			bp.unshift( cur );
		}

		// Walk down the tree looking for a discrepancy
		while ( ap[i] === bp[i] ) {
			i++;
		}

		return i ?
			// Do a sibling check if the nodes have a common ancestor
			siblingCheck( ap[i], bp[i] ) :

			// Otherwise nodes in our document sort first
			ap[i] === preferredDoc ? -1 :
			bp[i] === preferredDoc ? 1 :
			0;
	};

	return doc;
};

Sizzle.matches = function( expr, elements ) {
	return Sizzle( expr, null, null, elements );
};

Sizzle.matchesSelector = function( elem, expr ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	// Make sure that attribute selectors are quoted
	expr = expr.replace( rattributeQuotes, "='$1']" );

	if ( support.matchesSelector && documentIsHTML &&
		( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
		( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {

		try {
			var ret = matches.call( elem, expr );

			// IE 9's matchesSelector returns false on disconnected nodes
			if ( ret || support.disconnectedMatch ||
					// As well, disconnected nodes are said to be in a document
					// fragment in IE 9
					elem.document && elem.document.nodeType !== 11 ) {
				return ret;
			}
		} catch (e) {}
	}

	return Sizzle( expr, document, null, [ elem ] ).length > 0;
};

Sizzle.contains = function( context, elem ) {
	// Set document vars if needed
	if ( ( context.ownerDocument || context ) !== document ) {
		setDocument( context );
	}
	return contains( context, elem );
};

Sizzle.attr = function( elem, name ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	var fn = Expr.attrHandle[ name.toLowerCase() ],
		// Don't get fooled by Object.prototype properties (jQuery #13807)
		val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
			fn( elem, name, !documentIsHTML ) :
			undefined;

	return val !== undefined ?
		val :
		support.attributes || !documentIsHTML ?
			elem.getAttribute( name ) :
			(val = elem.getAttributeNode(name)) && val.specified ?
				val.value :
				null;
};

Sizzle.error = function( msg ) {
	throw new Error( "Syntax error, unrecognized expression: " + msg );
};

/**
 * Document sorting and removing duplicates
 * @param {ArrayLike} results
 */
Sizzle.uniqueSort = function( results ) {
	var elem,
		duplicates = [],
		j = 0,
		i = 0;

	// Unless we *know* we can detect duplicates, assume their presence
	hasDuplicate = !support.detectDuplicates;
	sortInput = !support.sortStable && results.slice( 0 );
	results.sort( sortOrder );

	if ( hasDuplicate ) {
		while ( (elem = results[i++]) ) {
			if ( elem === results[ i ] ) {
				j = duplicates.push( i );
			}
		}
		while ( j-- ) {
			results.splice( duplicates[ j ], 1 );
		}
	}

	// Clear input after sorting to release objects
	// See https://github.com/jquery/sizzle/pull/225
	sortInput = null;

	return results;
};

/**
 * Utility function for retrieving the text value of an array of DOM nodes
 * @param {Array|Element} elem
 */
getText = Sizzle.getText = function( elem ) {
	var node,
		ret = "",
		i = 0,
		nodeType = elem.nodeType;

	if ( !nodeType ) {
		// If no nodeType, this is expected to be an array
		while ( (node = elem[i++]) ) {
			// Do not traverse comment nodes
			ret += getText( node );
		}
	} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
		// Use textContent for elements
		// innerText usage removed for consistency of new lines (jQuery #11153)
		if ( typeof elem.textContent === "string" ) {
			return elem.textContent;
		} else {
			// Traverse its children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				ret += getText( elem );
			}
		}
	} else if ( nodeType === 3 || nodeType === 4 ) {
		return elem.nodeValue;
	}
	// Do not include comment or processing instruction nodes

	return ret;
};

Expr = Sizzle.selectors = {

	// Can be adjusted by the user
	cacheLength: 50,

	createPseudo: markFunction,

	match: matchExpr,

	attrHandle: {},

	find: {},

	relative: {
		">": { dir: "parentNode", first: true },
		" ": { dir: "parentNode" },
		"+": { dir: "previousSibling", first: true },
		"~": { dir: "previousSibling" }
	},

	preFilter: {
		"ATTR": function( match ) {
			match[1] = match[1].replace( runescape, funescape );

			// Move the given value to match[3] whether quoted or unquoted
			match[3] = ( match[3] || match[4] || match[5] || "" ).replace( runescape, funescape );

			if ( match[2] === "~=" ) {
				match[3] = " " + match[3] + " ";
			}

			return match.slice( 0, 4 );
		},

		"CHILD": function( match ) {
			/* matches from matchExpr["CHILD"]
				1 type (only|nth|...)
				2 what (child|of-type)
				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
				4 xn-component of xn+y argument ([+-]?\d*n|)
				5 sign of xn-component
				6 x of xn-component
				7 sign of y-component
				8 y of y-component
			*/
			match[1] = match[1].toLowerCase();

			if ( match[1].slice( 0, 3 ) === "nth" ) {
				// nth-* requires argument
				if ( !match[3] ) {
					Sizzle.error( match[0] );
				}

				// numeric x and y parameters for Expr.filter.CHILD
				// remember that false/true cast respectively to 0/1
				match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );
				match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );

			// other types prohibit arguments
			} else if ( match[3] ) {
				Sizzle.error( match[0] );
			}

			return match;
		},

		"PSEUDO": function( match ) {
			var excess,
				unquoted = !match[6] && match[2];

			if ( matchExpr["CHILD"].test( match[0] ) ) {
				return null;
			}

			// Accept quoted arguments as-is
			if ( match[3] ) {
				match[2] = match[4] || match[5] || "";

			// Strip excess characters from unquoted arguments
			} else if ( unquoted && rpseudo.test( unquoted ) &&
				// Get excess from tokenize (recursively)
				(excess = tokenize( unquoted, true )) &&
				// advance to the next closing parenthesis
				(excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {

				// excess is a negative index
				match[0] = match[0].slice( 0, excess );
				match[2] = unquoted.slice( 0, excess );
			}

			// Return only captures needed by the pseudo filter method (type and argument)
			return match.slice( 0, 3 );
		}
	},

	filter: {

		"TAG": function( nodeNameSelector ) {
			var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
			return nodeNameSelector === "*" ?
				function() { return true; } :
				function( elem ) {
					return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
				};
		},

		"CLASS": function( className ) {
			var pattern = classCache[ className + " " ];

			return pattern ||
				(pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&
				classCache( className, function( elem ) {
					return pattern.test( typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "" );
				});
		},

		"ATTR": function( name, operator, check ) {
			return function( elem ) {
				var result = Sizzle.attr( elem, name );

				if ( result == null ) {
					return operator === "!=";
				}
				if ( !operator ) {
					return true;
				}

				result += "";

				return operator === "=" ? result === check :
					operator === "!=" ? result !== check :
					operator === "^=" ? check && result.indexOf( check ) === 0 :
					operator === "*=" ? check && result.indexOf( check ) > -1 :
					operator === "$=" ? check && result.slice( -check.length ) === check :
					operator === "~=" ? ( " " + result.replace( rwhitespace, " " ) + " " ).indexOf( check ) > -1 :
					operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
					false;
			};
		},

		"CHILD": function( type, what, argument, first, last ) {
			var simple = type.slice( 0, 3 ) !== "nth",
				forward = type.slice( -4 ) !== "last",
				ofType = what === "of-type";

			return first === 1 && last === 0 ?

				// Shortcut for :nth-*(n)
				function( elem ) {
					return !!elem.parentNode;
				} :

				function( elem, context, xml ) {
					var cache, outerCache, node, diff, nodeIndex, start,
						dir = simple !== forward ? "nextSibling" : "previousSibling",
						parent = elem.parentNode,
						name = ofType && elem.nodeName.toLowerCase(),
						useCache = !xml && !ofType;

					if ( parent ) {

						// :(first|last|only)-(child|of-type)
						if ( simple ) {
							while ( dir ) {
								node = elem;
								while ( (node = node[ dir ]) ) {
									if ( ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1 ) {
										return false;
									}
								}
								// Reverse direction for :only-* (if we haven't yet done so)
								start = dir = type === "only" && !start && "nextSibling";
							}
							return true;
						}

						start = [ forward ? parent.firstChild : parent.lastChild ];

						// non-xml :nth-child(...) stores cache data on `parent`
						if ( forward && useCache ) {
							// Seek `elem` from a previously-cached index
							outerCache = parent[ expando ] || (parent[ expando ] = {});
							cache = outerCache[ type ] || [];
							nodeIndex = cache[0] === dirruns && cache[1];
							diff = cache[0] === dirruns && cache[2];
							node = nodeIndex && parent.childNodes[ nodeIndex ];

							while ( (node = ++nodeIndex && node && node[ dir ] ||

								// Fallback to seeking `elem` from the start
								(diff = nodeIndex = 0) || start.pop()) ) {

								// When found, cache indexes on `parent` and break
								if ( node.nodeType === 1 && ++diff && node === elem ) {
									outerCache[ type ] = [ dirruns, nodeIndex, diff ];
									break;
								}
							}

						// Use previously-cached element index if available
						} else if ( useCache && (cache = (elem[ expando ] || (elem[ expando ] = {}))[ type ]) && cache[0] === dirruns ) {
							diff = cache[1];

						// xml :nth-child(...) or :nth-last-child(...) or :nth(-last)?-of-type(...)
						} else {
							// Use the same loop as above to seek `elem` from the start
							while ( (node = ++nodeIndex && node && node[ dir ] ||
								(diff = nodeIndex = 0) || start.pop()) ) {

								if ( ( ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1 ) && ++diff ) {
									// Cache the index of each encountered element
									if ( useCache ) {
										(node[ expando ] || (node[ expando ] = {}))[ type ] = [ dirruns, diff ];
									}

									if ( node === elem ) {
										break;
									}
								}
							}
						}

						// Incorporate the offset, then check against cycle size
						diff -= last;
						return diff === first || ( diff % first === 0 && diff / first >= 0 );
					}
				};
		},

		"PSEUDO": function( pseudo, argument ) {
			// pseudo-class names are case-insensitive
			// http://www.w3.org/TR/selectors/#pseudo-classes
			// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
			// Remember that setFilters inherits from pseudos
			var args,
				fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
					Sizzle.error( "unsupported pseudo: " + pseudo );

			// The user may use createPseudo to indicate that
			// arguments are needed to create the filter function
			// just as Sizzle does
			if ( fn[ expando ] ) {
				return fn( argument );
			}

			// But maintain support for old signatures
			if ( fn.length > 1 ) {
				args = [ pseudo, pseudo, "", argument ];
				return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
					markFunction(function( seed, matches ) {
						var idx,
							matched = fn( seed, argument ),
							i = matched.length;
						while ( i-- ) {
							idx = indexOf( seed, matched[i] );
							seed[ idx ] = !( matches[ idx ] = matched[i] );
						}
					}) :
					function( elem ) {
						return fn( elem, 0, args );
					};
			}

			return fn;
		}
	},

	pseudos: {
		// Potentially complex pseudos
		"not": markFunction(function( selector ) {
			// Trim the selector passed to compile
			// to avoid treating leading and trailing
			// spaces as combinators
			var input = [],
				results = [],
				matcher = compile( selector.replace( rtrim, "$1" ) );

			return matcher[ expando ] ?
				markFunction(function( seed, matches, context, xml ) {
					var elem,
						unmatched = matcher( seed, null, xml, [] ),
						i = seed.length;

					// Match elements unmatched by `matcher`
					while ( i-- ) {
						if ( (elem = unmatched[i]) ) {
							seed[i] = !(matches[i] = elem);
						}
					}
				}) :
				function( elem, context, xml ) {
					input[0] = elem;
					matcher( input, null, xml, results );
					// Don't keep the element (issue #299)
					input[0] = null;
					return !results.pop();
				};
		}),

		"has": markFunction(function( selector ) {
			return function( elem ) {
				return Sizzle( selector, elem ).length > 0;
			};
		}),

		"contains": markFunction(function( text ) {
			text = text.replace( runescape, funescape );
			return function( elem ) {
				return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;
			};
		}),

		// "Whether an element is represented by a :lang() selector
		// is based solely on the element's language value
		// being equal to the identifier C,
		// or beginning with the identifier C immediately followed by "-".
		// The matching of C against the element's language value is performed case-insensitively.
		// The identifier C does not have to be a valid language name."
		// http://www.w3.org/TR/selectors/#lang-pseudo
		"lang": markFunction( function( lang ) {
			// lang value must be a valid identifier
			if ( !ridentifier.test(lang || "") ) {
				Sizzle.error( "unsupported lang: " + lang );
			}
			lang = lang.replace( runescape, funescape ).toLowerCase();
			return function( elem ) {
				var elemLang;
				do {
					if ( (elemLang = documentIsHTML ?
						elem.lang :
						elem.getAttribute("xml:lang") || elem.getAttribute("lang")) ) {

						elemLang = elemLang.toLowerCase();
						return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
					}
				} while ( (elem = elem.parentNode) && elem.nodeType === 1 );
				return false;
			};
		}),

		// Miscellaneous
		"target": function( elem ) {
			var hash = window.location && window.location.hash;
			return hash && hash.slice( 1 ) === elem.id;
		},

		"root": function( elem ) {
			return elem === docElem;
		},

		"focus": function( elem ) {
			return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
		},

		// Boolean properties
		"enabled": function( elem ) {
			return elem.disabled === false;
		},

		"disabled": function( elem ) {
			return elem.disabled === true;
		},

		"checked": function( elem ) {
			// In CSS3, :checked should return both checked and selected elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			var nodeName = elem.nodeName.toLowerCase();
			return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
		},

		"selected": function( elem ) {
			// Accessing this property makes selected-by-default
			// options in Safari work properly
			if ( elem.parentNode ) {
				elem.parentNode.selectedIndex;
			}

			return elem.selected === true;
		},

		// Contents
		"empty": function( elem ) {
			// http://www.w3.org/TR/selectors/#empty-pseudo
			// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
			//   but not by others (comment: 8; processing instruction: 7; etc.)
			// nodeType < 6 works because attributes (2) do not appear as children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				if ( elem.nodeType < 6 ) {
					return false;
				}
			}
			return true;
		},

		"parent": function( elem ) {
			return !Expr.pseudos["empty"]( elem );
		},

		// Element/input types
		"header": function( elem ) {
			return rheader.test( elem.nodeName );
		},

		"input": function( elem ) {
			return rinputs.test( elem.nodeName );
		},

		"button": function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === "button" || name === "button";
		},

		"text": function( elem ) {
			var attr;
			return elem.nodeName.toLowerCase() === "input" &&
				elem.type === "text" &&

				// Support: IE<8
				// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
				( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text" );
		},

		// Position-in-collection
		"first": createPositionalPseudo(function() {
			return [ 0 ];
		}),

		"last": createPositionalPseudo(function( matchIndexes, length ) {
			return [ length - 1 ];
		}),

		"eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
			return [ argument < 0 ? argument + length : argument ];
		}),

		"even": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 0;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"odd": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 1;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; --i >= 0; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; ++i < length; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		})
	}
};

Expr.pseudos["nth"] = Expr.pseudos["eq"];

// Add button/input type pseudos
for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
	Expr.pseudos[ i ] = createInputPseudo( i );
}
for ( i in { submit: true, reset: true } ) {
	Expr.pseudos[ i ] = createButtonPseudo( i );
}

// Easy API for creating new setFilters
function setFilters() {}
setFilters.prototype = Expr.filters = Expr.pseudos;
Expr.setFilters = new setFilters();

tokenize = Sizzle.tokenize = function( selector, parseOnly ) {
	var matched, match, tokens, type,
		soFar, groups, preFilters,
		cached = tokenCache[ selector + " " ];

	if ( cached ) {
		return parseOnly ? 0 : cached.slice( 0 );
	}

	soFar = selector;
	groups = [];
	preFilters = Expr.preFilter;

	while ( soFar ) {

		// Comma and first run
		if ( !matched || (match = rcomma.exec( soFar )) ) {
			if ( match ) {
				// Don't consume trailing commas as valid
				soFar = soFar.slice( match[0].length ) || soFar;
			}
			groups.push( (tokens = []) );
		}

		matched = false;

		// Combinators
		if ( (match = rcombinators.exec( soFar )) ) {
			matched = match.shift();
			tokens.push({
				value: matched,
				// Cast descendant combinators to space
				type: match[0].replace( rtrim, " " )
			});
			soFar = soFar.slice( matched.length );
		}

		// Filters
		for ( type in Expr.filter ) {
			if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
				(match = preFilters[ type ]( match ))) ) {
				matched = match.shift();
				tokens.push({
					value: matched,
					type: type,
					matches: match
				});
				soFar = soFar.slice( matched.length );
			}
		}

		if ( !matched ) {
			break;
		}
	}

	// Return the length of the invalid excess
	// if we're just parsing
	// Otherwise, throw an error or return tokens
	return parseOnly ?
		soFar.length :
		soFar ?
			Sizzle.error( selector ) :
			// Cache the tokens
			tokenCache( selector, groups ).slice( 0 );
};

function toSelector( tokens ) {
	var i = 0,
		len = tokens.length,
		selector = "";
	for ( ; i < len; i++ ) {
		selector += tokens[i].value;
	}
	return selector;
}

function addCombinator( matcher, combinator, base ) {
	var dir = combinator.dir,
		checkNonElements = base && dir === "parentNode",
		doneName = done++;

	return combinator.first ?
		// Check against closest ancestor/preceding element
		function( elem, context, xml ) {
			while ( (elem = elem[ dir ]) ) {
				if ( elem.nodeType === 1 || checkNonElements ) {
					return matcher( elem, context, xml );
				}
			}
		} :

		// Check against all ancestor/preceding elements
		function( elem, context, xml ) {
			var oldCache, outerCache,
				newCache = [ dirruns, doneName ];

			// We can't set arbitrary data on XML nodes, so they don't benefit from dir caching
			if ( xml ) {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						if ( matcher( elem, context, xml ) ) {
							return true;
						}
					}
				}
			} else {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						outerCache = elem[ expando ] || (elem[ expando ] = {});
						if ( (oldCache = outerCache[ dir ]) &&
							oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {

							// Assign to newCache so results back-propagate to previous elements
							return (newCache[ 2 ] = oldCache[ 2 ]);
						} else {
							// Reuse newcache so results back-propagate to previous elements
							outerCache[ dir ] = newCache;

							// A match means we're done; a fail means we have to keep checking
							if ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {
								return true;
							}
						}
					}
				}
			}
		};
}

function elementMatcher( matchers ) {
	return matchers.length > 1 ?
		function( elem, context, xml ) {
			var i = matchers.length;
			while ( i-- ) {
				if ( !matchers[i]( elem, context, xml ) ) {
					return false;
				}
			}
			return true;
		} :
		matchers[0];
}

function multipleContexts( selector, contexts, results ) {
	var i = 0,
		len = contexts.length;
	for ( ; i < len; i++ ) {
		Sizzle( selector, contexts[i], results );
	}
	return results;
}

function condense( unmatched, map, filter, context, xml ) {
	var elem,
		newUnmatched = [],
		i = 0,
		len = unmatched.length,
		mapped = map != null;

	for ( ; i < len; i++ ) {
		if ( (elem = unmatched[i]) ) {
			if ( !filter || filter( elem, context, xml ) ) {
				newUnmatched.push( elem );
				if ( mapped ) {
					map.push( i );
				}
			}
		}
	}

	return newUnmatched;
}

function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
	if ( postFilter && !postFilter[ expando ] ) {
		postFilter = setMatcher( postFilter );
	}
	if ( postFinder && !postFinder[ expando ] ) {
		postFinder = setMatcher( postFinder, postSelector );
	}
	return markFunction(function( seed, results, context, xml ) {
		var temp, i, elem,
			preMap = [],
			postMap = [],
			preexisting = results.length,

			// Get initial elements from seed or context
			elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),

			// Prefilter to get matcher input, preserving a map for seed-results synchronization
			matcherIn = preFilter && ( seed || !selector ) ?
				condense( elems, preMap, preFilter, context, xml ) :
				elems,

			matcherOut = matcher ?
				// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
				postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

					// ...intermediate processing is necessary
					[] :

					// ...otherwise use results directly
					results :
				matcherIn;

		// Find primary matches
		if ( matcher ) {
			matcher( matcherIn, matcherOut, context, xml );
		}

		// Apply postFilter
		if ( postFilter ) {
			temp = condense( matcherOut, postMap );
			postFilter( temp, [], context, xml );

			// Un-match failing elements by moving them back to matcherIn
			i = temp.length;
			while ( i-- ) {
				if ( (elem = temp[i]) ) {
					matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
				}
			}
		}

		if ( seed ) {
			if ( postFinder || preFilter ) {
				if ( postFinder ) {
					// Get the final matcherOut by condensing this intermediate into postFinder contexts
					temp = [];
					i = matcherOut.length;
					while ( i-- ) {
						if ( (elem = matcherOut[i]) ) {
							// Restore matcherIn since elem is not yet a final match
							temp.push( (matcherIn[i] = elem) );
						}
					}
					postFinder( null, (matcherOut = []), temp, xml );
				}

				// Move matched elements from seed to results to keep them synchronized
				i = matcherOut.length;
				while ( i-- ) {
					if ( (elem = matcherOut[i]) &&
						(temp = postFinder ? indexOf( seed, elem ) : preMap[i]) > -1 ) {

						seed[temp] = !(results[temp] = elem);
					}
				}
			}

		// Add elements to results, through postFinder if defined
		} else {
			matcherOut = condense(
				matcherOut === results ?
					matcherOut.splice( preexisting, matcherOut.length ) :
					matcherOut
			);
			if ( postFinder ) {
				postFinder( null, results, matcherOut, xml );
			} else {
				push.apply( results, matcherOut );
			}
		}
	});
}

function matcherFromTokens( tokens ) {
	var checkContext, matcher, j,
		len = tokens.length,
		leadingRelative = Expr.relative[ tokens[0].type ],
		implicitRelative = leadingRelative || Expr.relative[" "],
		i = leadingRelative ? 1 : 0,

		// The foundational matcher ensures that elements are reachable from top-level context(s)
		matchContext = addCombinator( function( elem ) {
			return elem === checkContext;
		}, implicitRelative, true ),
		matchAnyContext = addCombinator( function( elem ) {
			return indexOf( checkContext, elem ) > -1;
		}, implicitRelative, true ),
		matchers = [ function( elem, context, xml ) {
			var ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
				(checkContext = context).nodeType ?
					matchContext( elem, context, xml ) :
					matchAnyContext( elem, context, xml ) );
			// Avoid hanging onto element (issue #299)
			checkContext = null;
			return ret;
		} ];

	for ( ; i < len; i++ ) {
		if ( (matcher = Expr.relative[ tokens[i].type ]) ) {
			matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];
		} else {
			matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );

			// Return special upon seeing a positional matcher
			if ( matcher[ expando ] ) {
				// Find the next relative operator (if any) for proper handling
				j = ++i;
				for ( ; j < len; j++ ) {
					if ( Expr.relative[ tokens[j].type ] ) {
						break;
					}
				}
				return setMatcher(
					i > 1 && elementMatcher( matchers ),
					i > 1 && toSelector(
						// If the preceding token was a descendant combinator, insert an implicit any-element `*`
						tokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === " " ? "*" : "" })
					).replace( rtrim, "$1" ),
					matcher,
					i < j && matcherFromTokens( tokens.slice( i, j ) ),
					j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),
					j < len && toSelector( tokens )
				);
			}
			matchers.push( matcher );
		}
	}

	return elementMatcher( matchers );
}

function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
	var bySet = setMatchers.length > 0,
		byElement = elementMatchers.length > 0,
		superMatcher = function( seed, context, xml, results, outermost ) {
			var elem, j, matcher,
				matchedCount = 0,
				i = "0",
				unmatched = seed && [],
				setMatched = [],
				contextBackup = outermostContext,
				// We must always have either seed elements or outermost context
				elems = seed || byElement && Expr.find["TAG"]( "*", outermost ),
				// Use integer dirruns iff this is the outermost matcher
				dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),
				len = elems.length;

			if ( outermost ) {
				outermostContext = context !== document && context;
			}

			// Add elements passing elementMatchers directly to results
			// Keep `i` a string if there are no elements so `matchedCount` will be "00" below
			// Support: IE<9, Safari
			// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
			for ( ; i !== len && (elem = elems[i]) != null; i++ ) {
				if ( byElement && elem ) {
					j = 0;
					while ( (matcher = elementMatchers[j++]) ) {
						if ( matcher( elem, context, xml ) ) {
							results.push( elem );
							break;
						}
					}
					if ( outermost ) {
						dirruns = dirrunsUnique;
					}
				}

				// Track unmatched elements for set filters
				if ( bySet ) {
					// They will have gone through all possible matchers
					if ( (elem = !matcher && elem) ) {
						matchedCount--;
					}

					// Lengthen the array for every element, matched or not
					if ( seed ) {
						unmatched.push( elem );
					}
				}
			}

			// Apply set filters to unmatched elements
			matchedCount += i;
			if ( bySet && i !== matchedCount ) {
				j = 0;
				while ( (matcher = setMatchers[j++]) ) {
					matcher( unmatched, setMatched, context, xml );
				}

				if ( seed ) {
					// Reintegrate element matches to eliminate the need for sorting
					if ( matchedCount > 0 ) {
						while ( i-- ) {
							if ( !(unmatched[i] || setMatched[i]) ) {
								setMatched[i] = pop.call( results );
							}
						}
					}

					// Discard index placeholder values to get only actual matches
					setMatched = condense( setMatched );
				}

				// Add matches to results
				push.apply( results, setMatched );

				// Seedless set matches succeeding multiple successful matchers stipulate sorting
				if ( outermost && !seed && setMatched.length > 0 &&
					( matchedCount + setMatchers.length ) > 1 ) {

					Sizzle.uniqueSort( results );
				}
			}

			// Override manipulation of globals by nested matchers
			if ( outermost ) {
				dirruns = dirrunsUnique;
				outermostContext = contextBackup;
			}

			return unmatched;
		};

	return bySet ?
		markFunction( superMatcher ) :
		superMatcher;
}

compile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {
	var i,
		setMatchers = [],
		elementMatchers = [],
		cached = compilerCache[ selector + " " ];

	if ( !cached ) {
		// Generate a function of recursive functions that can be used to check each element
		if ( !match ) {
			match = tokenize( selector );
		}
		i = match.length;
		while ( i-- ) {
			cached = matcherFromTokens( match[i] );
			if ( cached[ expando ] ) {
				setMatchers.push( cached );
			} else {
				elementMatchers.push( cached );
			}
		}

		// Cache the compiled function
		cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );

		// Save selector and tokenization
		cached.selector = selector;
	}
	return cached;
};

/**
 * A low-level selection function that works with Sizzle's compiled
 *  selector functions
 * @param {String|Function} selector A selector or a pre-compiled
 *  selector function built with Sizzle.compile
 * @param {Element} context
 * @param {Array} [results]
 * @param {Array} [seed] A set of elements to match against
 */
select = Sizzle.select = function( selector, context, results, seed ) {
	var i, tokens, token, type, find,
		compiled = typeof selector === "function" && selector,
		match = !seed && tokenize( (selector = compiled.selector || selector) );

	results = results || [];

	// Try to minimize operations if there is no seed and only one group
	if ( match.length === 1 ) {

		// Take a shortcut and set the context if the root selector is an ID
		tokens = match[0] = match[0].slice( 0 );
		if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&
				support.getById && context.nodeType === 9 && documentIsHTML &&
				Expr.relative[ tokens[1].type ] ) {

			context = ( Expr.find["ID"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];
			if ( !context ) {
				return results;

			// Precompiled matchers will still verify ancestry, so step up a level
			} else if ( compiled ) {
				context = context.parentNode;
			}

			selector = selector.slice( tokens.shift().value.length );
		}

		// Fetch a seed set for right-to-left matching
		i = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;
		while ( i-- ) {
			token = tokens[i];

			// Abort if we hit a combinator
			if ( Expr.relative[ (type = token.type) ] ) {
				break;
			}
			if ( (find = Expr.find[ type ]) ) {
				// Search, expanding context for leading sibling combinators
				if ( (seed = find(
					token.matches[0].replace( runescape, funescape ),
					rsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context
				)) ) {

					// If seed is empty or no tokens remain, we can return early
					tokens.splice( i, 1 );
					selector = seed.length && toSelector( tokens );
					if ( !selector ) {
						push.apply( results, seed );
						return results;
					}

					break;
				}
			}
		}
	}

	// Compile and execute a filtering function if one is not provided
	// Provide `match` to avoid retokenization if we modified the selector above
	( compiled || compile( selector, match ) )(
		seed,
		context,
		!documentIsHTML,
		results,
		rsibling.test( selector ) && testContext( context.parentNode ) || context
	);
	return results;
};

// One-time assignments

// Sort stability
support.sortStable = expando.split("").sort( sortOrder ).join("") === expando;

// Support: Chrome 14-35+
// Always assume duplicates if they aren't passed to the comparison function
support.detectDuplicates = !!hasDuplicate;

// Initialize against the default document
setDocument();

// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
// Detached nodes confoundingly follow *each other*
support.sortDetached = assert(function( div1 ) {
	// Should return 1, but returns 4 (following)
	return div1.compareDocumentPosition( document.createElement("div") ) & 1;
});

// Support: IE<8
// Prevent attribute/property "interpolation"
// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
if ( !assert(function( div ) {
	div.innerHTML = "<a href='#'></a>";
	return div.firstChild.getAttribute("href") === "#" ;
}) ) {
	addHandle( "type|href|height|width", function( elem, name, isXML ) {
		if ( !isXML ) {
			return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
		}
	});
}

// Support: IE<9
// Use defaultValue in place of getAttribute("value")
if ( !support.attributes || !assert(function( div ) {
	div.innerHTML = "<input/>";
	div.firstChild.setAttribute( "value", "" );
	return div.firstChild.getAttribute( "value" ) === "";
}) ) {
	addHandle( "value", function( elem, name, isXML ) {
		if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
			return elem.defaultValue;
		}
	});
}

// Support: IE<9
// Use getAttributeNode to fetch booleans when getAttribute lies
if ( !assert(function( div ) {
	return div.getAttribute("disabled") == null;
}) ) {
	addHandle( booleans, function( elem, name, isXML ) {
		var val;
		if ( !isXML ) {
			return elem[ name ] === true ? name.toLowerCase() :
					(val = elem.getAttributeNode( name )) && val.specified ?
					val.value :
				null;
		}
	});
}

return Sizzle;

})( window );



jQuery.find = Sizzle;
jQuery.expr = Sizzle.selectors;
jQuery.expr[":"] = jQuery.expr.pseudos;
jQuery.unique = Sizzle.uniqueSort;
jQuery.text = Sizzle.getText;
jQuery.isXMLDoc = Sizzle.isXML;
jQuery.contains = Sizzle.contains;



var rneedsContext = jQuery.expr.match.needsContext;

var rsingleTag = (/^<(\w+)\s*\/?>(?:<\/\1>|)$/);



var risSimple = /^.[^:#\[\.,]*$/;

// Implement the identical functionality for filter and not
function winnow( elements, qualifier, not ) {
	if ( jQuery.isFunction( qualifier ) ) {
		return jQuery.grep( elements, function( elem, i ) {
			/* jshint -W018 */
			return !!qualifier.call( elem, i, elem ) !== not;
		});

	}

	if ( qualifier.nodeType ) {
		return jQuery.grep( elements, function( elem ) {
			return ( elem === qualifier ) !== not;
		});

	}

	if ( typeof qualifier === "string" ) {
		if ( risSimple.test( qualifier ) ) {
			return jQuery.filter( qualifier, elements, not );
		}

		qualifier = jQuery.filter( qualifier, elements );
	}

	return jQuery.grep( elements, function( elem ) {
		return ( indexOf.call( qualifier, elem ) >= 0 ) !== not;
	});
}

jQuery.filter = function( expr, elems, not ) {
	var elem = elems[ 0 ];

	if ( not ) {
		expr = ":not(" + expr + ")";
	}

	return elems.length === 1 && elem.nodeType === 1 ?
		jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [] :
		jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
			return elem.nodeType === 1;
		}));
};

jQuery.fn.extend({
	find: function( selector ) {
		var i,
			len = this.length,
			ret = [],
			self = this;

		if ( typeof selector !== "string" ) {
			return this.pushStack( jQuery( selector ).filter(function() {
				for ( i = 0; i < len; i++ ) {
					if ( jQuery.contains( self[ i ], this ) ) {
						return true;
					}
				}
			}) );
		}

		for ( i = 0; i < len; i++ ) {
			jQuery.find( selector, self[ i ], ret );
		}

		// Needed because $( selector, context ) becomes $( context ).find( selector )
		ret = this.pushStack( len > 1 ? jQuery.unique( ret ) : ret );
		ret.selector = this.selector ? this.selector + " " + selector : selector;
		return ret;
	},
	filter: function( selector ) {
		return this.pushStack( winnow(this, selector || [], false) );
	},
	not: function( selector ) {
		return this.pushStack( winnow(this, selector || [], true) );
	},
	is: function( selector ) {
		return !!winnow(
			this,

			// If this is a positional/relative selector, check membership in the returned set
			// so $("p:first").is("p:last") won't return true for a doc with two "p".
			typeof selector === "string" && rneedsContext.test( selector ) ?
				jQuery( selector ) :
				selector || [],
			false
		).length;
	}
});


// Initialize a jQuery object


// A central reference to the root jQuery(document)
var rootjQuery,

	// A simple way to check for HTML strings
	// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
	// Strict HTML recognition (#11290: must start with <)
	rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,

	init = jQuery.fn.init = function( selector, context ) {
		var match, elem;

		// HANDLE: $(""), $(null), $(undefined), $(false)
		if ( !selector ) {
			return this;
		}

		// Handle HTML strings
		if ( typeof selector === "string" ) {
			if ( selector[0] === "<" && selector[ selector.length - 1 ] === ">" && selector.length >= 3 ) {
				// Assume that strings that start and end with <> are HTML and skip the regex check
				match = [ null, selector, null ];

			} else {
				match = rquickExpr.exec( selector );
			}

			// Match html or make sure no context is specified for #id
			if ( match && (match[1] || !context) ) {

				// HANDLE: $(html) -> $(array)
				if ( match[1] ) {
					context = context instanceof jQuery ? context[0] : context;

					// Option to run scripts is true for back-compat
					// Intentionally let the error be thrown if parseHTML is not present
					jQuery.merge( this, jQuery.parseHTML(
						match[1],
						context && context.nodeType ? context.ownerDocument || context : document,
						true
					) );

					// HANDLE: $(html, props)
					if ( rsingleTag.test( match[1] ) && jQuery.isPlainObject( context ) ) {
						for ( match in context ) {
							// Properties of context are called as methods if possible
							if ( jQuery.isFunction( this[ match ] ) ) {
								this[ match ]( context[ match ] );

							// ...and otherwise set as attributes
							} else {
								this.attr( match, context[ match ] );
							}
						}
					}

					return this;

				// HANDLE: $(#id)
				} else {
					elem = document.getElementById( match[2] );

					// Support: Blackberry 4.6
					// gEBID returns nodes no longer in the document (#6963)
					if ( elem && elem.parentNode ) {
						// Inject the element directly into the jQuery object
						this.length = 1;
						this[0] = elem;
					}

					this.context = document;
					this.selector = selector;
					return this;
				}

			// HANDLE: $(expr, $(...))
			} else if ( !context || context.jquery ) {
				return ( context || rootjQuery ).find( selector );

			// HANDLE: $(expr, context)
			// (which is just equivalent to: $(context).find(expr)
			} else {
				return this.constructor( context ).find( selector );
			}

		// HANDLE: $(DOMElement)
		} else if ( selector.nodeType ) {
			this.context = this[0] = selector;
			this.length = 1;
			return this;

		// HANDLE: $(function)
		// Shortcut for document ready
		} else if ( jQuery.isFunction( selector ) ) {
			return typeof rootjQuery.ready !== "undefined" ?
				rootjQuery.ready( selector ) :
				// Execute immediately if ready is not present
				selector( jQuery );
		}

		if ( selector.selector !== undefined ) {
			this.selector = selector.selector;
			this.context = selector.context;
		}

		return jQuery.makeArray( selector, this );
	};

// Give the init function the jQuery prototype for later instantiation
init.prototype = jQuery.fn;

// Initialize central reference
rootjQuery = jQuery( document );


var rparentsprev = /^(?:parents|prev(?:Until|All))/,
	// Methods guaranteed to produce a unique set when starting from a unique set
	guaranteedUnique = {
		children: true,
		contents: true,
		next: true,
		prev: true
	};

jQuery.extend({
	dir: function( elem, dir, until ) {
		var matched = [],
			truncate = until !== undefined;

		while ( (elem = elem[ dir ]) && elem.nodeType !== 9 ) {
			if ( elem.nodeType === 1 ) {
				if ( truncate && jQuery( elem ).is( until ) ) {
					break;
				}
				matched.push( elem );
			}
		}
		return matched;
	},

	sibling: function( n, elem ) {
		var matched = [];

		for ( ; n; n = n.nextSibling ) {
			if ( n.nodeType === 1 && n !== elem ) {
				matched.push( n );
			}
		}

		return matched;
	}
});

jQuery.fn.extend({
	has: function( target ) {
		var targets = jQuery( target, this ),
			l = targets.length;

		return this.filter(function() {
			var i = 0;
			for ( ; i < l; i++ ) {
				if ( jQuery.contains( this, targets[i] ) ) {
					return true;
				}
			}
		});
	},

	closest: function( selectors, context ) {
		var cur,
			i = 0,
			l = this.length,
			matched = [],
			pos = rneedsContext.test( selectors ) || typeof selectors !== "string" ?
				jQuery( selectors, context || this.context ) :
				0;

		for ( ; i < l; i++ ) {
			for ( cur = this[i]; cur && cur !== context; cur = cur.parentNode ) {
				// Always skip document fragments
				if ( cur.nodeType < 11 && (pos ?
					pos.index(cur) > -1 :

					// Don't pass non-elements to Sizzle
					cur.nodeType === 1 &&
						jQuery.find.matchesSelector(cur, selectors)) ) {

					matched.push( cur );
					break;
				}
			}
		}

		return this.pushStack( matched.length > 1 ? jQuery.unique( matched ) : matched );
	},

	// Determine the position of an element within the set
	index: function( elem ) {

		// No argument, return index in parent
		if ( !elem ) {
			return ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;
		}

		// Index in selector
		if ( typeof elem === "string" ) {
			return indexOf.call( jQuery( elem ), this[ 0 ] );
		}

		// Locate the position of the desired element
		return indexOf.call( this,

			// If it receives a jQuery object, the first element is used
			elem.jquery ? elem[ 0 ] : elem
		);
	},

	add: function( selector, context ) {
		return this.pushStack(
			jQuery.unique(
				jQuery.merge( this.get(), jQuery( selector, context ) )
			)
		);
	},

	addBack: function( selector ) {
		return this.add( selector == null ?
			this.prevObject : this.prevObject.filter(selector)
		);
	}
});

function sibling( cur, dir ) {
	while ( (cur = cur[dir]) && cur.nodeType !== 1 ) {}
	return cur;
}

jQuery.each({
	parent: function( elem ) {
		var parent = elem.parentNode;
		return parent && parent.nodeType !== 11 ? parent : null;
	},
	parents: function( elem ) {
		return jQuery.dir( elem, "parentNode" );
	},
	parentsUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "parentNode", until );
	},
	next: function( elem ) {
		return sibling( elem, "nextSibling" );
	},
	prev: function( elem ) {
		return sibling( elem, "previousSibling" );
	},
	nextAll: function( elem ) {
		return jQuery.dir( elem, "nextSibling" );
	},
	prevAll: function( elem ) {
		return jQuery.dir( elem, "previousSibling" );
	},
	nextUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "nextSibling", until );
	},
	prevUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "previousSibling", until );
	},
	siblings: function( elem ) {
		return jQuery.sibling( ( elem.parentNode || {} ).firstChild, elem );
	},
	children: function( elem ) {
		return jQuery.sibling( elem.firstChild );
	},
	contents: function( elem ) {
		return elem.contentDocument || jQuery.merge( [], elem.childNodes );
	}
}, function( name, fn ) {
	jQuery.fn[ name ] = function( until, selector ) {
		var matched = jQuery.map( this, fn, until );

		if ( name.slice( -5 ) !== "Until" ) {
			selector = until;
		}

		if ( selector && typeof selector === "string" ) {
			matched = jQuery.filter( selector, matched );
		}

		if ( this.length > 1 ) {
			// Remove duplicates
			if ( !guaranteedUnique[ name ] ) {
				jQuery.unique( matched );
			}

			// Reverse order for parents* and prev-derivatives
			if ( rparentsprev.test( name ) ) {
				matched.reverse();
			}
		}

		return this.pushStack( matched );
	};
});
var rnotwhite = (/\S+/g);



// String to Object options format cache
var optionsCache = {};

// Convert String-formatted options into Object-formatted ones and store in cache
function createOptions( options ) {
	var object = optionsCache[ options ] = {};
	jQuery.each( options.match( rnotwhite ) || [], function( _, flag ) {
		object[ flag ] = true;
	});
	return object;
}

/*
 * Create a callback list using the following parameters:
 *
 *	options: an optional list of space-separated options that will change how
 *			the callback list behaves or a more traditional option object
 *
 * By default a callback list will act like an event callback list and can be
 * "fired" multiple times.
 *
 * Possible options:
 *
 *	once:			will ensure the callback list can only be fired once (like a Deferred)
 *
 *	memory:			will keep track of previous values and will call any callback added
 *					after the list has been fired right away with the latest "memorized"
 *					values (like a Deferred)
 *
 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
 *
 *	stopOnFalse:	interrupt callings when a callback returns false
 *
 */
jQuery.Callbacks = function( options ) {

	// Convert options from String-formatted to Object-formatted if needed
	// (we check in cache first)
	options = typeof options === "string" ?
		( optionsCache[ options ] || createOptions( options ) ) :
		jQuery.extend( {}, options );

	var // Last fire value (for non-forgettable lists)
		memory,
		// Flag to know if list was already fired
		fired,
		// Flag to know if list is currently firing
		firing,
		// First callback to fire (used internally by add and fireWith)
		firingStart,
		// End of the loop when firing
		firingLength,
		// Index of currently firing callback (modified by remove if needed)
		firingIndex,
		// Actual callback list
		list = [],
		// Stack of fire calls for repeatable lists
		stack = !options.once && [],
		// Fire callbacks
		fire = function( data ) {
			memory = options.memory && data;
			fired = true;
			firingIndex = firingStart || 0;
			firingStart = 0;
			firingLength = list.length;
			firing = true;
			for ( ; list && firingIndex < firingLength; firingIndex++ ) {
				if ( list[ firingIndex ].apply( data[ 0 ], data[ 1 ] ) === false && options.stopOnFalse ) {
					memory = false; // To prevent further calls using add
					break;
				}
			}
			firing = false;
			if ( list ) {
				if ( stack ) {
					if ( stack.length ) {
						fire( stack.shift() );
					}
				} else if ( memory ) {
					list = [];
				} else {
					self.disable();
				}
			}
		},
		// Actual Callbacks object
		self = {
			// Add a callback or a collection of callbacks to the list
			add: function() {
				if ( list ) {
					// First, we save the current length
					var start = list.length;
					(function add( args ) {
						jQuery.each( args, function( _, arg ) {
							var type = jQuery.type( arg );
							if ( type === "function" ) {
								if ( !options.unique || !self.has( arg ) ) {
									list.push( arg );
								}
							} else if ( arg && arg.length && type !== "string" ) {
								// Inspect recursively
								add( arg );
							}
						});
					})( arguments );
					// Do we need to add the callbacks to the
					// current firing batch?
					if ( firing ) {
						firingLength = list.length;
					// With memory, if we're not firing then
					// we should call right away
					} else if ( memory ) {
						firingStart = start;
						fire( memory );
					}
				}
				return this;
			},
			// Remove a callback from the list
			remove: function() {
				if ( list ) {
					jQuery.each( arguments, function( _, arg ) {
						var index;
						while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
							list.splice( index, 1 );
							// Handle firing indexes
							if ( firing ) {
								if ( index <= firingLength ) {
									firingLength--;
								}
								if ( index <= firingIndex ) {
									firingIndex--;
								}
							}
						}
					});
				}
				return this;
			},
			// Check if a given callback is in the list.
			// If no argument is given, return whether or not list has callbacks attached.
			has: function( fn ) {
				return fn ? jQuery.inArray( fn, list ) > -1 : !!( list && list.length );
			},
			// Remove all callbacks from the list
			empty: function() {
				list = [];
				firingLength = 0;
				return this;
			},
			// Have the list do nothing anymore
			disable: function() {
				list = stack = memory = undefined;
				return this;
			},
			// Is it disabled?
			disabled: function() {
				return !list;
			},
			// Lock the list in its current state
			lock: function() {
				stack = undefined;
				if ( !memory ) {
					self.disable();
				}
				return this;
			},
			// Is it locked?
			locked: function() {
				return !stack;
			},
			// Call all callbacks with the given context and arguments
			fireWith: function( context, args ) {
				if ( list && ( !fired || stack ) ) {
					args = args || [];
					args = [ context, args.slice ? args.slice() : args ];
					if ( firing ) {
						stack.push( args );
					} else {
						fire( args );
					}
				}
				return this;
			},
			// Call all the callbacks with the given arguments
			fire: function() {
				self.fireWith( this, arguments );
				return this;
			},
			// To know if the callbacks have already been called at least once
			fired: function() {
				return !!fired;
			}
		};

	return self;
};


jQuery.extend({

	Deferred: function( func ) {
		var tuples = [
				// action, add listener, listener list, final state
				[ "resolve", "done", jQuery.Callbacks("once memory"), "resolved" ],
				[ "reject", "fail", jQuery.Callbacks("once memory"), "rejected" ],
				[ "notify", "progress", jQuery.Callbacks("memory") ]
			],
			state = "pending",
			promise = {
				state: function() {
					return state;
				},
				always: function() {
					deferred.done( arguments ).fail( arguments );
					return this;
				},
				then: function( /* fnDone, fnFail, fnProgress */ ) {
					var fns = arguments;
					return jQuery.Deferred(function( newDefer ) {
						jQuery.each( tuples, function( i, tuple ) {
							var fn = jQuery.isFunction( fns[ i ] ) && fns[ i ];
							// deferred[ done | fail | progress ] for forwarding actions to newDefer
							deferred[ tuple[1] ](function() {
								var returned = fn && fn.apply( this, arguments );
								if ( returned && jQuery.isFunction( returned.promise ) ) {
									returned.promise()
										.done( newDefer.resolve )
										.fail( newDefer.reject )
										.progress( newDefer.notify );
								} else {
									newDefer[ tuple[ 0 ] + "With" ]( this === promise ? newDefer.promise() : this, fn ? [ returned ] : arguments );
								}
							});
						});
						fns = null;
					}).promise();
				},
				// Get a promise for this deferred
				// If obj is provided, the promise aspect is added to the object
				promise: function( obj ) {
					return obj != null ? jQuery.extend( obj, promise ) : promise;
				}
			},
			deferred = {};

		// Keep pipe for back-compat
		promise.pipe = promise.then;

		// Add list-specific methods
		jQuery.each( tuples, function( i, tuple ) {
			var list = tuple[ 2 ],
				stateString = tuple[ 3 ];

			// promise[ done | fail | progress ] = list.add
			promise[ tuple[1] ] = list.add;

			// Handle state
			if ( stateString ) {
				list.add(function() {
					// state = [ resolved | rejected ]
					state = stateString;

				// [ reject_list | resolve_list ].disable; progress_list.lock
				}, tuples[ i ^ 1 ][ 2 ].disable, tuples[ 2 ][ 2 ].lock );
			}

			// deferred[ resolve | reject | notify ]
			deferred[ tuple[0] ] = function() {
				deferred[ tuple[0] + "With" ]( this === deferred ? promise : this, arguments );
				return this;
			};
			deferred[ tuple[0] + "With" ] = list.fireWith;
		});

		// Make the deferred a promise
		promise.promise( deferred );

		// Call given func if any
		if ( func ) {
			func.call( deferred, deferred );
		}

		// All done!
		return deferred;
	},

	// Deferred helper
	when: function( subordinate /* , ..., subordinateN */ ) {
		var i = 0,
			resolveValues = slice.call( arguments ),
			length = resolveValues.length,

			// the count of uncompleted subordinates
			remaining = length !== 1 || ( subordinate && jQuery.isFunction( subordinate.promise ) ) ? length : 0,

			// the master Deferred. If resolveValues consist of only a single Deferred, just use that.
			deferred = remaining === 1 ? subordinate : jQuery.Deferred(),

			// Update function for both resolve and progress values
			updateFunc = function( i, contexts, values ) {
				return function( value ) {
					contexts[ i ] = this;
					values[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;
					if ( values === progressValues ) {
						deferred.notifyWith( contexts, values );
					} else if ( !( --remaining ) ) {
						deferred.resolveWith( contexts, values );
					}
				};
			},

			progressValues, progressContexts, resolveContexts;

		// Add listeners to Deferred subordinates; treat others as resolved
		if ( length > 1 ) {
			progressValues = new Array( length );
			progressContexts = new Array( length );
			resolveContexts = new Array( length );
			for ( ; i < length; i++ ) {
				if ( resolveValues[ i ] && jQuery.isFunction( resolveValues[ i ].promise ) ) {
					resolveValues[ i ].promise()
						.done( updateFunc( i, resolveContexts, resolveValues ) )
						.fail( deferred.reject )
						.progress( updateFunc( i, progressContexts, progressValues ) );
				} else {
					--remaining;
				}
			}
		}

		// If we're not waiting on anything, resolve the master
		if ( !remaining ) {
			deferred.resolveWith( resolveContexts, resolveValues );
		}

		return deferred.promise();
	}
});


// The deferred used on DOM ready
var readyList;

jQuery.fn.ready = function( fn ) {
	// Add the callback
	jQuery.ready.promise().done( fn );

	return this;
};

jQuery.extend({
	// Is the DOM ready to be used? Set to true once it occurs.
	isReady: false,

	// A counter to track how many items to wait for before
	// the ready event fires. See #6781
	readyWait: 1,

	// Hold (or release) the ready event
	holdReady: function( hold ) {
		if ( hold ) {
			jQuery.readyWait++;
		} else {
			jQuery.ready( true );
		}
	},

	// Handle when the DOM is ready
	ready: function( wait ) {

		// Abort if there are pending holds or we're already ready
		if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
			return;
		}

		// Remember that the DOM is ready
		jQuery.isReady = true;

		// If a normal DOM Ready event fired, decrement, and wait if need be
		if ( wait !== true && --jQuery.readyWait > 0 ) {
			return;
		}

		// If there are functions bound, to execute
		readyList.resolveWith( document, [ jQuery ] );

		// Trigger any bound ready events
		if ( jQuery.fn.triggerHandler ) {
			jQuery( document ).triggerHandler( "ready" );
			jQuery( document ).off( "ready" );
		}
	}
});

/**
 * The ready event handler and self cleanup method
 */
function completed() {
	document.removeEventListener( "DOMContentLoaded", completed, false );
	window.removeEventListener( "load", completed, false );
	jQuery.ready();
}

jQuery.ready.promise = function( obj ) {
	if ( !readyList ) {

		readyList = jQuery.Deferred();

		// Catch cases where $(document).ready() is called after the browser event has already occurred.
		// We once tried to use readyState "interactive" here, but it caused issues like the one
		// discovered by ChrisS here: http://bugs.jquery.com/ticket/12282#comment:15
		if ( document.readyState === "complete" ) {
			// Handle it asynchronously to allow scripts the opportunity to delay ready
			setTimeout( jQuery.ready );

		} else {

			// Use the handy event callback
			document.addEventListener( "DOMContentLoaded", completed, false );

			// A fallback to window.onload, that will always work
			window.addEventListener( "load", completed, false );
		}
	}
	return readyList.promise( obj );
};

// Kick off the DOM ready check even if the user does not
jQuery.ready.promise();




// Multifunctional method to get and set values of a collection
// The value/s can optionally be executed if it's a function
var access = jQuery.access = function( elems, fn, key, value, chainable, emptyGet, raw ) {
	var i = 0,
		len = elems.length,
		bulk = key == null;

	// Sets many values
	if ( jQuery.type( key ) === "object" ) {
		chainable = true;
		for ( i in key ) {
			jQuery.access( elems, fn, i, key[i], true, emptyGet, raw );
		}

	// Sets one value
	} else if ( value !== undefined ) {
		chainable = true;

		if ( !jQuery.isFunction( value ) ) {
			raw = true;
		}

		if ( bulk ) {
			// Bulk operations run against the entire set
			if ( raw ) {
				fn.call( elems, value );
				fn = null;

			// ...except when executing function values
			} else {
				bulk = fn;
				fn = function( elem, key, value ) {
					return bulk.call( jQuery( elem ), value );
				};
			}
		}

		if ( fn ) {
			for ( ; i < len; i++ ) {
				fn( elems[i], key, raw ? value : value.call( elems[i], i, fn( elems[i], key ) ) );
			}
		}
	}

	return chainable ?
		elems :

		// Gets
		bulk ?
			fn.call( elems ) :
			len ? fn( elems[0], key ) : emptyGet;
};


/**
 * Determines whether an object can have data
 */
jQuery.acceptData = function( owner ) {
	// Accepts only:
	//  - Node
	//    - Node.ELEMENT_NODE
	//    - Node.DOCUMENT_NODE
	//  - Object
	//    - Any
	/* jshint -W018 */
	return owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );
};


function Data() {
	// Support: Android<4,
	// Old WebKit does not have Object.preventExtensions/freeze method,
	// return new empty object instead with no [[set]] accessor
	Object.defineProperty( this.cache = {}, 0, {
		get: function() {
			return {};
		}
	});

	this.expando = jQuery.expando + Data.uid++;
}

Data.uid = 1;
Data.accepts = jQuery.acceptData;

Data.prototype = {
	key: function( owner ) {
		// We can accept data for non-element nodes in modern browsers,
		// but we should not, see #8335.
		// Always return the key for a frozen object.
		if ( !Data.accepts( owner ) ) {
			return 0;
		}

		var descriptor = {},
			// Check if the owner object already has a cache key
			unlock = owner[ this.expando ];

		// If not, create one
		if ( !unlock ) {
			unlock = Data.uid++;

			// Secure it in a non-enumerable, non-writable property
			try {
				descriptor[ this.expando ] = { value: unlock };
				Object.defineProperties( owner, descriptor );

			// Support: Android<4
			// Fallback to a less secure definition
			} catch ( e ) {
				descriptor[ this.expando ] = unlock;
				jQuery.extend( owner, descriptor );
			}
		}

		// Ensure the cache object
		if ( !this.cache[ unlock ] ) {
			this.cache[ unlock ] = {};
		}

		return unlock;
	},
	set: function( owner, data, value ) {
		var prop,
			// There may be an unlock assigned to this node,
			// if there is no entry for this "owner", create one inline
			// and set the unlock as though an owner entry had always existed
			unlock = this.key( owner ),
			cache = this.cache[ unlock ];

		// Handle: [ owner, key, value ] args
		if ( typeof data === "string" ) {
			cache[ data ] = value;

		// Handle: [ owner, { properties } ] args
		} else {
			// Fresh assignments by object are shallow copied
			if ( jQuery.isEmptyObject( cache ) ) {
				jQuery.extend( this.cache[ unlock ], data );
			// Otherwise, copy the properties one-by-one to the cache object
			} else {
				for ( prop in data ) {
					cache[ prop ] = data[ prop ];
				}
			}
		}
		return cache;
	},
	get: function( owner, key ) {
		// Either a valid cache is found, or will be created.
		// New caches will be created and the unlock returned,
		// allowing direct access to the newly created
		// empty data object. A valid owner object must be provided.
		var cache = this.cache[ this.key( owner ) ];

		return key === undefined ?
			cache : cache[ key ];
	},
	access: function( owner, key, value ) {
		var stored;
		// In cases where either:
		//
		//   1. No key was specified
		//   2. A string key was specified, but no value provided
		//
		// Take the "read" path and allow the get method to determine
		// which value to return, respectively either:
		//
		//   1. The entire cache object
		//   2. The data stored at the key
		//
		if ( key === undefined ||
				((key && typeof key === "string") && value === undefined) ) {

			stored = this.get( owner, key );

			return stored !== undefined ?
				stored : this.get( owner, jQuery.camelCase(key) );
		}

		// [*]When the key is not a string, or both a key and value
		// are specified, set or extend (existing objects) with either:
		//
		//   1. An object of properties
		//   2. A key and value
		//
		this.set( owner, key, value );

		// Since the "set" path can have two possible entry points
		// return the expected data based on which path was taken[*]
		return value !== undefined ? value : key;
	},
	remove: function( owner, key ) {
		var i, name, camel,
			unlock = this.key( owner ),
			cache = this.cache[ unlock ];

		if ( key === undefined ) {
			this.cache[ unlock ] = {};

		} else {
			// Support array or space separated string of keys
			if ( jQuery.isArray( key ) ) {
				// If "name" is an array of keys...
				// When data is initially created, via ("key", "val") signature,
				// keys will be converted to camelCase.
				// Since there is no way to tell _how_ a key was added, remove
				// both plain key and camelCase key. #12786
				// This will only penalize the array argument path.
				name = key.concat( key.map( jQuery.camelCase ) );
			} else {
				camel = jQuery.camelCase( key );
				// Try the string as a key before any manipulation
				if ( key in cache ) {
					name = [ key, camel ];
				} else {
					// If a key with the spaces exists, use it.
					// Otherwise, create an array by matching non-whitespace
					name = camel;
					name = name in cache ?
						[ name ] : ( name.match( rnotwhite ) || [] );
				}
			}

			i = name.length;
			while ( i-- ) {
				delete cache[ name[ i ] ];
			}
		}
	},
	hasData: function( owner ) {
		return !jQuery.isEmptyObject(
			this.cache[ owner[ this.expando ] ] || {}
		);
	},
	discard: function( owner ) {
		if ( owner[ this.expando ] ) {
			delete this.cache[ owner[ this.expando ] ];
		}
	}
};
var data_priv = new Data();

var data_user = new Data();



//	Implementation Summary
//
//	1. Enforce API surface and semantic compatibility with 1.9.x branch
//	2. Improve the module's maintainability by reducing the storage
//		paths to a single mechanism.
//	3. Use the same single mechanism to support "private" and "user" data.
//	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
//	5. Avoid exposing implementation details on user objects (eg. expando properties)
//	6. Provide a clear path for implementation upgrade to WeakMap in 2014

var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
	rmultiDash = /([A-Z])/g;

function dataAttr( elem, key, data ) {
	var name;

	// If nothing was found internally, try to fetch any
	// data from the HTML5 data-* attribute
	if ( data === undefined && elem.nodeType === 1 ) {
		name = "data-" + key.replace( rmultiDash, "-$1" ).toLowerCase();
		data = elem.getAttribute( name );

		if ( typeof data === "string" ) {
			try {
				data = data === "true" ? true :
					data === "false" ? false :
					data === "null" ? null :
					// Only convert to a number if it doesn't change the string
					+data + "" === data ? +data :
					rbrace.test( data ) ? jQuery.parseJSON( data ) :
					data;
			} catch( e ) {}

			// Make sure we set the data so it isn't changed later
			data_user.set( elem, key, data );
		} else {
			data = undefined;
		}
	}
	return data;
}

jQuery.extend({
	hasData: function( elem ) {
		return data_user.hasData( elem ) || data_priv.hasData( elem );
	},

	data: function( elem, name, data ) {
		return data_user.access( elem, name, data );
	},

	removeData: function( elem, name ) {
		data_user.remove( elem, name );
	},

	// TODO: Now that all calls to _data and _removeData have been replaced
	// with direct calls to data_priv methods, these can be deprecated.
	_data: function( elem, name, data ) {
		return data_priv.access( elem, name, data );
	},

	_removeData: function( elem, name ) {
		data_priv.remove( elem, name );
	}
});

jQuery.fn.extend({
	data: function( key, value ) {
		var i, name, data,
			elem = this[ 0 ],
			attrs = elem && elem.attributes;

		// Gets all values
		if ( key === undefined ) {
			if ( this.length ) {
				data = data_user.get( elem );

				if ( elem.nodeType === 1 && !data_priv.get( elem, "hasDataAttrs" ) ) {
					i = attrs.length;
					while ( i-- ) {

						// Support: IE11+
						// The attrs elements can be null (#14894)
						if ( attrs[ i ] ) {
							name = attrs[ i ].name;
							if ( name.indexOf( "data-" ) === 0 ) {
								name = jQuery.camelCase( name.slice(5) );
								dataAttr( elem, name, data[ name ] );
							}
						}
					}
					data_priv.set( elem, "hasDataAttrs", true );
				}
			}

			return data;
		}

		// Sets multiple values
		if ( typeof key === "object" ) {
			return this.each(function() {
				data_user.set( this, key );
			});
		}

		return access( this, function( value ) {
			var data,
				camelKey = jQuery.camelCase( key );

			// The calling jQuery object (element matches) is not empty
			// (and therefore has an element appears at this[ 0 ]) and the
			// `value` parameter was not undefined. An empty jQuery object
			// will result in `undefined` for elem = this[ 0 ] which will
			// throw an exception if an attempt to read a data cache is made.
			if ( elem && value === undefined ) {
				// Attempt to get data from the cache
				// with the key as-is
				data = data_user.get( elem, key );
				if ( data !== undefined ) {
					return data;
				}

				// Attempt to get data from the cache
				// with the key camelized
				data = data_user.get( elem, camelKey );
				if ( data !== undefined ) {
					return data;
				}

				// Attempt to "discover" the data in
				// HTML5 custom data-* attrs
				data = dataAttr( elem, camelKey, undefined );
				if ( data !== undefined ) {
					return data;
				}

				// We tried really hard, but the data doesn't exist.
				return;
			}

			// Set the data...
			this.each(function() {
				// First, attempt to store a copy or reference of any
				// data that might've been store with a camelCased key.
				var data = data_user.get( this, camelKey );

				// For HTML5 data-* attribute interop, we have to
				// store property names with dashes in a camelCase form.
				// This might not apply to all properties...*
				data_user.set( this, camelKey, value );

				// *... In the case of properties that might _actually_
				// have dashes, we need to also store a copy of that
				// unchanged property.
				if ( key.indexOf("-") !== -1 && data !== undefined ) {
					data_user.set( this, key, value );
				}
			});
		}, null, value, arguments.length > 1, null, true );
	},

	removeData: function( key ) {
		return this.each(function() {
			data_user.remove( this, key );
		});
	}
});


jQuery.extend({
	queue: function( elem, type, data ) {
		var queue;

		if ( elem ) {
			type = ( type || "fx" ) + "queue";
			queue = data_priv.get( elem, type );

			// Speed up dequeue by getting out quickly if this is just a lookup
			if ( data ) {
				if ( !queue || jQuery.isArray( data ) ) {
					queue = data_priv.access( elem, type, jQuery.makeArray(data) );
				} else {
					queue.push( data );
				}
			}
			return queue || [];
		}
	},

	dequeue: function( elem, type ) {
		type = type || "fx";

		var queue = jQuery.queue( elem, type ),
			startLength = queue.length,
			fn = queue.shift(),
			hooks = jQuery._queueHooks( elem, type ),
			next = function() {
				jQuery.dequeue( elem, type );
			};

		// If the fx queue is dequeued, always remove the progress sentinel
		if ( fn === "inprogress" ) {
			fn = queue.shift();
			startLength--;
		}

		if ( fn ) {

			// Add a progress sentinel to prevent the fx queue from being
			// automatically dequeued
			if ( type === "fx" ) {
				queue.unshift( "inprogress" );
			}

			// Clear up the last queue stop function
			delete hooks.stop;
			fn.call( elem, next, hooks );
		}

		if ( !startLength && hooks ) {
			hooks.empty.fire();
		}
	},

	// Not public - generate a queueHooks object, or return the current one
	_queueHooks: function( elem, type ) {
		var key = type + "queueHooks";
		return data_priv.get( elem, key ) || data_priv.access( elem, key, {
			empty: jQuery.Callbacks("once memory").add(function() {
				data_priv.remove( elem, [ type + "queue", key ] );
			})
		});
	}
});

jQuery.fn.extend({
	queue: function( type, data ) {
		var setter = 2;

		if ( typeof type !== "string" ) {
			data = type;
			type = "fx";
			setter--;
		}

		if ( arguments.length < setter ) {
			return jQuery.queue( this[0], type );
		}

		return data === undefined ?
			this :
			this.each(function() {
				var queue = jQuery.queue( this, type, data );

				// Ensure a hooks for this queue
				jQuery._queueHooks( this, type );

				if ( type === "fx" && queue[0] !== "inprogress" ) {
					jQuery.dequeue( this, type );
				}
			});
	},
	dequeue: function( type ) {
		return this.each(function() {
			jQuery.dequeue( this, type );
		});
	},
	clearQueue: function( type ) {
		return this.queue( type || "fx", [] );
	},
	// Get a promise resolved when queues of a certain type
	// are emptied (fx is the type by default)
	promise: function( type, obj ) {
		var tmp,
			count = 1,
			defer = jQuery.Deferred(),
			elements = this,
			i = this.length,
			resolve = function() {
				if ( !( --count ) ) {
					defer.resolveWith( elements, [ elements ] );
				}
			};

		if ( typeof type !== "string" ) {
			obj = type;
			type = undefined;
		}
		type = type || "fx";

		while ( i-- ) {
			tmp = data_priv.get( elements[ i ], type + "queueHooks" );
			if ( tmp && tmp.empty ) {
				count++;
				tmp.empty.add( resolve );
			}
		}
		resolve();
		return defer.promise( obj );
	}
});
var pnum = (/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/).source;

var cssExpand = [ "Top", "Right", "Bottom", "Left" ];

var isHidden = function( elem, el ) {
		// isHidden might be called from jQuery#filter function;
		// in that case, element will be second argument
		elem = el || elem;
		return jQuery.css( elem, "display" ) === "none" || !jQuery.contains( elem.ownerDocument, elem );
	};

var rcheckableType = (/^(?:checkbox|radio)$/i);



(function() {
	var fragment = document.createDocumentFragment(),
		div = fragment.appendChild( document.createElement( "div" ) ),
		input = document.createElement( "input" );

	// Support: Safari<=5.1
	// Check state lost if the name is set (#11217)
	// Support: Windows Web Apps (WWA)
	// `name` and `type` must use .setAttribute for WWA (#14901)
	input.setAttribute( "type", "radio" );
	input.setAttribute( "checked", "checked" );
	input.setAttribute( "name", "t" );

	div.appendChild( input );

	// Support: Safari<=5.1, Android<4.2
	// Older WebKit doesn't clone checked state correctly in fragments
	support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;

	// Support: IE<=11+
	// Make sure textarea (and checkbox) defaultValue is properly cloned
	div.innerHTML = "<textarea>x</textarea>";
	support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;
})();
var strundefined = typeof undefined;



support.focusinBubbles = "onfocusin" in window;


var
	rkeyEvent = /^key/,
	rmouseEvent = /^(?:mouse|pointer|contextmenu)|click/,
	rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
	rtypenamespace = /^([^.]*)(?:\.(.+)|)$/;

function returnTrue() {
	return true;
}

function returnFalse() {
	return false;
}

function safeActiveElement() {
	try {
		return document.activeElement;
	} catch ( err ) { }
}

/*
 * Helper functions for managing events -- not part of the public interface.
 * Props to Dean Edwards' addEvent library for many of the ideas.
 */
jQuery.event = {

	global: {},

	add: function( elem, types, handler, data, selector ) {

		var handleObjIn, eventHandle, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = data_priv.get( elem );

		// Don't attach events to noData or text/comment nodes (but allow plain objects)
		if ( !elemData ) {
			return;
		}

		// Caller can pass in an object of custom data in lieu of the handler
		if ( handler.handler ) {
			handleObjIn = handler;
			handler = handleObjIn.handler;
			selector = handleObjIn.selector;
		}

		// Make sure that the handler has a unique ID, used to find/remove it later
		if ( !handler.guid ) {
			handler.guid = jQuery.guid++;
		}

		// Init the element's event structure and main handler, if this is the first
		if ( !(events = elemData.events) ) {
			events = elemData.events = {};
		}
		if ( !(eventHandle = elemData.handle) ) {
			eventHandle = elemData.handle = function( e ) {
				// Discard the second event of a jQuery.event.trigger() and
				// when an event is called after a page has unloaded
				return typeof jQuery !== strundefined && jQuery.event.triggered !== e.type ?
					jQuery.event.dispatch.apply( elem, arguments ) : undefined;
			};
		}

		// Handle multiple events separated by a space
		types = ( types || "" ).match( rnotwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[t] ) || [];
			type = origType = tmp[1];
			namespaces = ( tmp[2] || "" ).split( "." ).sort();

			// There *must* be a type, no attaching namespace-only handlers
			if ( !type ) {
				continue;
			}

			// If event changes its type, use the special event handlers for the changed type
			special = jQuery.event.special[ type ] || {};

			// If selector defined, determine special event api type, otherwise given type
			type = ( selector ? special.delegateType : special.bindType ) || type;

			// Update special based on newly reset type
			special = jQuery.event.special[ type ] || {};

			// handleObj is passed to all event handlers
			handleObj = jQuery.extend({
				type: type,
				origType: origType,
				data: data,
				handler: handler,
				guid: handler.guid,
				selector: selector,
				needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
				namespace: namespaces.join(".")
			}, handleObjIn );

			// Init the event handler queue if we're the first
			if ( !(handlers = events[ type ]) ) {
				handlers = events[ type ] = [];
				handlers.delegateCount = 0;

				// Only use addEventListener if the special events handler returns false
				if ( !special.setup || special.setup.call( elem, data, namespaces, eventHandle ) === false ) {
					if ( elem.addEventListener ) {
						elem.addEventListener( type, eventHandle, false );
					}
				}
			}

			if ( special.add ) {
				special.add.call( elem, handleObj );

				if ( !handleObj.handler.guid ) {
					handleObj.handler.guid = handler.guid;
				}
			}

			// Add to the element's handler list, delegates in front
			if ( selector ) {
				handlers.splice( handlers.delegateCount++, 0, handleObj );
			} else {
				handlers.push( handleObj );
			}

			// Keep track of which events have ever been used, for event optimization
			jQuery.event.global[ type ] = true;
		}

	},

	// Detach an event or set of events from an element
	remove: function( elem, types, handler, selector, mappedTypes ) {

		var j, origCount, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = data_priv.hasData( elem ) && data_priv.get( elem );

		if ( !elemData || !(events = elemData.events) ) {
			return;
		}

		// Once for each type.namespace in types; type may be omitted
		types = ( types || "" ).match( rnotwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[t] ) || [];
			type = origType = tmp[1];
			namespaces = ( tmp[2] || "" ).split( "." ).sort();

			// Unbind all events (on this namespace, if provided) for the element
			if ( !type ) {
				for ( type in events ) {
					jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
				}
				continue;
			}

			special = jQuery.event.special[ type ] || {};
			type = ( selector ? special.delegateType : special.bindType ) || type;
			handlers = events[ type ] || [];
			tmp = tmp[2] && new RegExp( "(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)" );

			// Remove matching events
			origCount = j = handlers.length;
			while ( j-- ) {
				handleObj = handlers[ j ];

				if ( ( mappedTypes || origType === handleObj.origType ) &&
					( !handler || handler.guid === handleObj.guid ) &&
					( !tmp || tmp.test( handleObj.namespace ) ) &&
					( !selector || selector === handleObj.selector || selector === "**" && handleObj.selector ) ) {
					handlers.splice( j, 1 );

					if ( handleObj.selector ) {
						handlers.delegateCount--;
					}
					if ( special.remove ) {
						special.remove.call( elem, handleObj );
					}
				}
			}

			// Remove generic event handler if we removed something and no more handlers exist
			// (avoids potential for endless recursion during removal of special event handlers)
			if ( origCount && !handlers.length ) {
				if ( !special.teardown || special.teardown.call( elem, namespaces, elemData.handle ) === false ) {
					jQuery.removeEvent( elem, type, elemData.handle );
				}

				delete events[ type ];
			}
		}

		// Remove the expando if it's no longer used
		if ( jQuery.isEmptyObject( events ) ) {
			delete elemData.handle;
			data_priv.remove( elem, "events" );
		}
	},

	trigger: function( event, data, elem, onlyHandlers ) {

		var i, cur, tmp, bubbleType, ontype, handle, special,
			eventPath = [ elem || document ],
			type = hasOwn.call( event, "type" ) ? event.type : event,
			namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split(".") : [];

		cur = tmp = elem = elem || document;

		// Don't do events on text and comment nodes
		if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
			return;
		}

		// focus/blur morphs to focusin/out; ensure we're not firing them right now
		if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
			return;
		}

		if ( type.indexOf(".") >= 0 ) {
			// Namespaced trigger; create a regexp to match event type in handle()
			namespaces = type.split(".");
			type = namespaces.shift();
			namespaces.sort();
		}
		ontype = type.indexOf(":") < 0 && "on" + type;

		// Caller can pass in a jQuery.Event object, Object, or just an event type string
		event = event[ jQuery.expando ] ?
			event :
			new jQuery.Event( type, typeof event === "object" && event );

		// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
		event.isTrigger = onlyHandlers ? 2 : 3;
		event.namespace = namespaces.join(".");
		event.namespace_re = event.namespace ?
			new RegExp( "(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)" ) :
			null;

		// Clean up the event in case it is being reused
		event.result = undefined;
		if ( !event.target ) {
			event.target = elem;
		}

		// Clone any incoming data and prepend the event, creating the handler arg list
		data = data == null ?
			[ event ] :
			jQuery.makeArray( data, [ event ] );

		// Allow special events to draw outside the lines
		special = jQuery.event.special[ type ] || {};
		if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
			return;
		}

		// Determine event propagation path in advance, per W3C events spec (#9951)
		// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
		if ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {

			bubbleType = special.delegateType || type;
			if ( !rfocusMorph.test( bubbleType + type ) ) {
				cur = cur.parentNode;
			}
			for ( ; cur; cur = cur.parentNode ) {
				eventPath.push( cur );
				tmp = cur;
			}

			// Only add window if we got to document (e.g., not plain obj or detached DOM)
			if ( tmp === (elem.ownerDocument || document) ) {
				eventPath.push( tmp.defaultView || tmp.parentWindow || window );
			}
		}

		// Fire handlers on the event path
		i = 0;
		while ( (cur = eventPath[i++]) && !event.isPropagationStopped() ) {

			event.type = i > 1 ?
				bubbleType :
				special.bindType || type;

			// jQuery handler
			handle = ( data_priv.get( cur, "events" ) || {} )[ event.type ] && data_priv.get( cur, "handle" );
			if ( handle ) {
				handle.apply( cur, data );
			}

			// Native handler
			handle = ontype && cur[ ontype ];
			if ( handle && handle.apply && jQuery.acceptData( cur ) ) {
				event.result = handle.apply( cur, data );
				if ( event.result === false ) {
					event.preventDefault();
				}
			}
		}
		event.type = type;

		// If nobody prevented the default action, do it now
		if ( !onlyHandlers && !event.isDefaultPrevented() ) {

			if ( (!special._default || special._default.apply( eventPath.pop(), data ) === false) &&
				jQuery.acceptData( elem ) ) {

				// Call a native DOM method on the target with the same name name as the event.
				// Don't do default actions on window, that's where global variables be (#6170)
				if ( ontype && jQuery.isFunction( elem[ type ] ) && !jQuery.isWindow( elem ) ) {

					// Don't re-trigger an onFOO event when we call its FOO() method
					tmp = elem[ ontype ];

					if ( tmp ) {
						elem[ ontype ] = null;
					}

					// Prevent re-triggering of the same event, since we already bubbled it above
					jQuery.event.triggered = type;
					elem[ type ]();
					jQuery.event.triggered = undefined;

					if ( tmp ) {
						elem[ ontype ] = tmp;
					}
				}
			}
		}

		return event.result;
	},

	dispatch: function( event ) {

		// Make a writable jQuery.Event from the native event object
		event = jQuery.event.fix( event );

		var i, j, ret, matched, handleObj,
			handlerQueue = [],
			args = slice.call( arguments ),
			handlers = ( data_priv.get( this, "events" ) || {} )[ event.type ] || [],
			special = jQuery.event.special[ event.type ] || {};

		// Use the fix-ed jQuery.Event rather than the (read-only) native event
		args[0] = event;
		event.delegateTarget = this;

		// Call the preDispatch hook for the mapped type, and let it bail if desired
		if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
			return;
		}

		// Determine handlers
		handlerQueue = jQuery.event.handlers.call( this, event, handlers );

		// Run delegates first; they may want to stop propagation beneath us
		i = 0;
		while ( (matched = handlerQueue[ i++ ]) && !event.isPropagationStopped() ) {
			event.currentTarget = matched.elem;

			j = 0;
			while ( (handleObj = matched.handlers[ j++ ]) && !event.isImmediatePropagationStopped() ) {

				// Triggered event must either 1) have no namespace, or 2) have namespace(s)
				// a subset or equal to those in the bound event (both can have no namespace).
				if ( !event.namespace_re || event.namespace_re.test( handleObj.namespace ) ) {

					event.handleObj = handleObj;
					event.data = handleObj.data;

					ret = ( (jQuery.event.special[ handleObj.origType ] || {}).handle || handleObj.handler )
							.apply( matched.elem, args );

					if ( ret !== undefined ) {
						if ( (event.result = ret) === false ) {
							event.preventDefault();
							event.stopPropagation();
						}
					}
				}
			}
		}

		// Call the postDispatch hook for the mapped type
		if ( special.postDispatch ) {
			special.postDispatch.call( this, event );
		}

		return event.result;
	},

	handlers: function( event, handlers ) {
		var i, matches, sel, handleObj,
			handlerQueue = [],
			delegateCount = handlers.delegateCount,
			cur = event.target;

		// Find delegate handlers
		// Black-hole SVG <use> instance trees (#13180)
		// Avoid non-left-click bubbling in Firefox (#3861)
		if ( delegateCount && cur.nodeType && (!event.button || event.type !== "click") ) {

			for ( ; cur !== this; cur = cur.parentNode || this ) {

				// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
				if ( cur.disabled !== true || event.type !== "click" ) {
					matches = [];
					for ( i = 0; i < delegateCount; i++ ) {
						handleObj = handlers[ i ];

						// Don't conflict with Object.prototype properties (#13203)
						sel = handleObj.selector + " ";

						if ( matches[ sel ] === undefined ) {
							matches[ sel ] = handleObj.needsContext ?
								jQuery( sel, this ).index( cur ) >= 0 :
								jQuery.find( sel, this, null, [ cur ] ).length;
						}
						if ( matches[ sel ] ) {
							matches.push( handleObj );
						}
					}
					if ( matches.length ) {
						handlerQueue.push({ elem: cur, handlers: matches });
					}
				}
			}
		}

		// Add the remaining (directly-bound) handlers
		if ( delegateCount < handlers.length ) {
			handlerQueue.push({ elem: this, handlers: handlers.slice( delegateCount ) });
		}

		return handlerQueue;
	},

	// Includes some event props shared by KeyEvent and MouseEvent
	props: "altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),

	fixHooks: {},

	keyHooks: {
		props: "char charCode key keyCode".split(" "),
		filter: function( event, original ) {

			// Add which for key events
			if ( event.which == null ) {
				event.which = original.charCode != null ? original.charCode : original.keyCode;
			}

			return event;
		}
	},

	mouseHooks: {
		props: "button buttons clientX clientY offsetX offsetY pageX pageY screenX screenY toElement".split(" "),
		filter: function( event, original ) {
			var eventDoc, doc, body,
				button = original.button;

			// Calculate pageX/Y if missing and clientX/Y available
			if ( event.pageX == null && original.clientX != null ) {
				eventDoc = event.target.ownerDocument || document;
				doc = eventDoc.documentElement;
				body = eventDoc.body;

				event.pageX = original.clientX + ( doc && doc.scrollLeft || body && body.scrollLeft || 0 ) - ( doc && doc.clientLeft || body && body.clientLeft || 0 );
				event.pageY = original.clientY + ( doc && doc.scrollTop  || body && body.scrollTop  || 0 ) - ( doc && doc.clientTop  || body && body.clientTop  || 0 );
			}

			// Add which for click: 1 === left; 2 === middle; 3 === right
			// Note: button is not normalized, so don't use it
			if ( !event.which && button !== undefined ) {
				event.which = ( button & 1 ? 1 : ( button & 2 ? 3 : ( button & 4 ? 2 : 0 ) ) );
			}

			return event;
		}
	},

	fix: function( event ) {
		if ( event[ jQuery.expando ] ) {
			return event;
		}

		// Create a writable copy of the event object and normalize some properties
		var i, prop, copy,
			type = event.type,
			originalEvent = event,
			fixHook = this.fixHooks[ type ];

		if ( !fixHook ) {
			this.fixHooks[ type ] = fixHook =
				rmouseEvent.test( type ) ? this.mouseHooks :
				rkeyEvent.test( type ) ? this.keyHooks :
				{};
		}
		copy = fixHook.props ? this.props.concat( fixHook.props ) : this.props;

		event = new jQuery.Event( originalEvent );

		i = copy.length;
		while ( i-- ) {
			prop = copy[ i ];
			event[ prop ] = originalEvent[ prop ];
		}

		// Support: Cordova 2.5 (WebKit) (#13255)
		// All events should have a target; Cordova deviceready doesn't
		if ( !event.target ) {
			event.target = document;
		}

		// Support: Safari 6.0+, Chrome<28
		// Target should not be a text node (#504, #13143)
		if ( event.target.nodeType === 3 ) {
			event.target = event.target.parentNode;
		}

		return fixHook.filter ? fixHook.filter( event, originalEvent ) : event;
	},

	special: {
		load: {
			// Prevent triggered image.load events from bubbling to window.load
			noBubble: true
		},
		focus: {
			// Fire native event if possible so blur/focus sequence is correct
			trigger: function() {
				if ( this !== safeActiveElement() && this.focus ) {
					this.focus();
					return false;
				}
			},
			delegateType: "focusin"
		},
		blur: {
			trigger: function() {
				if ( this === safeActiveElement() && this.blur ) {
					this.blur();
					return false;
				}
			},
			delegateType: "focusout"
		},
		click: {
			// For checkbox, fire native event so checked state will be right
			trigger: function() {
				if ( this.type === "checkbox" && this.click && jQuery.nodeName( this, "input" ) ) {
					this.click();
					return false;
				}
			},

			// For cross-browser consistency, don't fire native .click() on links
			_default: function( event ) {
				return jQuery.nodeName( event.target, "a" );
			}
		},

		beforeunload: {
			postDispatch: function( event ) {

				// Support: Firefox 20+
				// Firefox doesn't alert if the returnValue field is not set.
				if ( event.result !== undefined && event.originalEvent ) {
					event.originalEvent.returnValue = event.result;
				}
			}
		}
	},

	simulate: function( type, elem, event, bubble ) {
		// Piggyback on a donor event to simulate a different one.
		// Fake originalEvent to avoid donor's stopPropagation, but if the
		// simulated event prevents default then we do the same on the donor.
		var e = jQuery.extend(
			new jQuery.Event(),
			event,
			{
				type: type,
				isSimulated: true,
				originalEvent: {}
			}
		);
		if ( bubble ) {
			jQuery.event.trigger( e, null, elem );
		} else {
			jQuery.event.dispatch.call( elem, e );
		}
		if ( e.isDefaultPrevented() ) {
			event.preventDefault();
		}
	}
};

jQuery.removeEvent = function( elem, type, handle ) {
	if ( elem.removeEventListener ) {
		elem.removeEventListener( type, handle, false );
	}
};

jQuery.Event = function( src, props ) {
	// Allow instantiation without the 'new' keyword
	if ( !(this instanceof jQuery.Event) ) {
		return new jQuery.Event( src, props );
	}

	// Event object
	if ( src && src.type ) {
		this.originalEvent = src;
		this.type = src.type;

		// Events bubbling up the document may have been marked as prevented
		// by a handler lower down the tree; reflect the correct value.
		this.isDefaultPrevented = src.defaultPrevented ||
				src.defaultPrevented === undefined &&
				// Support: Android<4.0
				src.returnValue === false ?
			returnTrue :
			returnFalse;

	// Event type
	} else {
		this.type = src;
	}

	// Put explicitly provided properties onto the event object
	if ( props ) {
		jQuery.extend( this, props );
	}

	// Create a timestamp if incoming event doesn't have one
	this.timeStamp = src && src.timeStamp || jQuery.now();

	// Mark it as fixed
	this[ jQuery.expando ] = true;
};

// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
// http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
jQuery.Event.prototype = {
	isDefaultPrevented: returnFalse,
	isPropagationStopped: returnFalse,
	isImmediatePropagationStopped: returnFalse,

	preventDefault: function() {
		var e = this.originalEvent;

		this.isDefaultPrevented = returnTrue;

		if ( e && e.preventDefault ) {
			e.preventDefault();
		}
	},
	stopPropagation: function() {
		var e = this.originalEvent;

		this.isPropagationStopped = returnTrue;

		if ( e && e.stopPropagation ) {
			e.stopPropagation();
		}
	},
	stopImmediatePropagation: function() {
		var e = this.originalEvent;

		this.isImmediatePropagationStopped = returnTrue;

		if ( e && e.stopImmediatePropagation ) {
			e.stopImmediatePropagation();
		}

		this.stopPropagation();
	}
};

// Create mouseenter/leave events using mouseover/out and event-time checks
// Support: Chrome 15+
jQuery.each({
	mouseenter: "mouseover",
	mouseleave: "mouseout",
	pointerenter: "pointerover",
	pointerleave: "pointerout"
}, function( orig, fix ) {
	jQuery.event.special[ orig ] = {
		delegateType: fix,
		bindType: fix,

		handle: function( event ) {
			var ret,
				target = this,
				related = event.relatedTarget,
				handleObj = event.handleObj;

			// For mousenter/leave call the handler if related is outside the target.
			// NB: No relatedTarget if the mouse left/entered the browser window
			if ( !related || (related !== target && !jQuery.contains( target, related )) ) {
				event.type = handleObj.origType;
				ret = handleObj.handler.apply( this, arguments );
				event.type = fix;
			}
			return ret;
		}
	};
});

// Support: Firefox, Chrome, Safari
// Create "bubbling" focus and blur events
if ( !support.focusinBubbles ) {
	jQuery.each({ focus: "focusin", blur: "focusout" }, function( orig, fix ) {

		// Attach a single capturing handler on the document while someone wants focusin/focusout
		var handler = function( event ) {
				jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ), true );
			};

		jQuery.event.special[ fix ] = {
			setup: function() {
				var doc = this.ownerDocument || this,
					attaches = data_priv.access( doc, fix );

				if ( !attaches ) {
					doc.addEventListener( orig, handler, true );
				}
				data_priv.access( doc, fix, ( attaches || 0 ) + 1 );
			},
			teardown: function() {
				var doc = this.ownerDocument || this,
					attaches = data_priv.access( doc, fix ) - 1;

				if ( !attaches ) {
					doc.removeEventListener( orig, handler, true );
					data_priv.remove( doc, fix );

				} else {
					data_priv.access( doc, fix, attaches );
				}
			}
		};
	});
}

jQuery.fn.extend({

	on: function( types, selector, data, fn, /*INTERNAL*/ one ) {
		var origFn, type;

		// Types can be a map of types/handlers
		if ( typeof types === "object" ) {
			// ( types-Object, selector, data )
			if ( typeof selector !== "string" ) {
				// ( types-Object, data )
				data = data || selector;
				selector = undefined;
			}
			for ( type in types ) {
				this.on( type, selector, data, types[ type ], one );
			}
			return this;
		}

		if ( data == null && fn == null ) {
			// ( types, fn )
			fn = selector;
			data = selector = undefined;
		} else if ( fn == null ) {
			if ( typeof selector === "string" ) {
				// ( types, selector, fn )
				fn = data;
				data = undefined;
			} else {
				// ( types, data, fn )
				fn = data;
				data = selector;
				selector = undefined;
			}
		}
		if ( fn === false ) {
			fn = returnFalse;
		} else if ( !fn ) {
			return this;
		}

		if ( one === 1 ) {
			origFn = fn;
			fn = function( event ) {
				// Can use an empty set, since event contains the info
				jQuery().off( event );
				return origFn.apply( this, arguments );
			};
			// Use same guid so caller can remove using origFn
			fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
		}
		return this.each( function() {
			jQuery.event.add( this, types, fn, data, selector );
		});
	},
	one: function( types, selector, data, fn ) {
		return this.on( types, selector, data, fn, 1 );
	},
	off: function( types, selector, fn ) {
		var handleObj, type;
		if ( types && types.preventDefault && types.handleObj ) {
			// ( event )  dispatched jQuery.Event
			handleObj = types.handleObj;
			jQuery( types.delegateTarget ).off(
				handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType,
				handleObj.selector,
				handleObj.handler
			);
			return this;
		}
		if ( typeof types === "object" ) {
			// ( types-object [, selector] )
			for ( type in types ) {
				this.off( type, selector, types[ type ] );
			}
			return this;
		}
		if ( selector === false || typeof selector === "function" ) {
			// ( types [, fn] )
			fn = selector;
			selector = undefined;
		}
		if ( fn === false ) {
			fn = returnFalse;
		}
		return this.each(function() {
			jQuery.event.remove( this, types, fn, selector );
		});
	},

	trigger: function( type, data ) {
		return this.each(function() {
			jQuery.event.trigger( type, data, this );
		});
	},
	triggerHandler: function( type, data ) {
		var elem = this[0];
		if ( elem ) {
			return jQuery.event.trigger( type, data, elem, true );
		}
	}
});


var
	rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,
	rtagName = /<([\w:]+)/,
	rhtml = /<|&#?\w+;/,
	rnoInnerhtml = /<(?:script|style|link)/i,
	// checked="checked" or checked
	rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
	rscriptType = /^$|\/(?:java|ecma)script/i,
	rscriptTypeMasked = /^true\/(.*)/,
	rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,

	// We have to close these tags to support XHTML (#13200)
	wrapMap = {

		// Support: IE9
		option: [ 1, "<select multiple='multiple'>", "</select>" ],

		thead: [ 1, "<table>", "</table>" ],
		col: [ 2, "<table><colgroup>", "</colgroup></table>" ],
		tr: [ 2, "<table><tbody>", "</tbody></table>" ],
		td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

		_default: [ 0, "", "" ]
	};

// Support: IE9
wrapMap.optgroup = wrapMap.option;

wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
wrapMap.th = wrapMap.td;

// Support: 1.x compatibility
// Manipulating tables requires a tbody
function manipulationTarget( elem, content ) {
	return jQuery.nodeName( elem, "table" ) &&
		jQuery.nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ?

		elem.getElementsByTagName("tbody")[0] ||
			elem.appendChild( elem.ownerDocument.createElement("tbody") ) :
		elem;
}

// Replace/restore the type attribute of script elements for safe DOM manipulation
function disableScript( elem ) {
	elem.type = (elem.getAttribute("type") !== null) + "/" + elem.type;
	return elem;
}
function restoreScript( elem ) {
	var match = rscriptTypeMasked.exec( elem.type );

	if ( match ) {
		elem.type = match[ 1 ];
	} else {
		elem.removeAttribute("type");
	}

	return elem;
}

// Mark scripts as having already been evaluated
function setGlobalEval( elems, refElements ) {
	var i = 0,
		l = elems.length;

	for ( ; i < l; i++ ) {
		data_priv.set(
			elems[ i ], "globalEval", !refElements || data_priv.get( refElements[ i ], "globalEval" )
		);
	}
}

function cloneCopyEvent( src, dest ) {
	var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;

	if ( dest.nodeType !== 1 ) {
		return;
	}

	// 1. Copy private data: events, handlers, etc.
	if ( data_priv.hasData( src ) ) {
		pdataOld = data_priv.access( src );
		pdataCur = data_priv.set( dest, pdataOld );
		events = pdataOld.events;

		if ( events ) {
			delete pdataCur.handle;
			pdataCur.events = {};

			for ( type in events ) {
				for ( i = 0, l = events[ type ].length; i < l; i++ ) {
					jQuery.event.add( dest, type, events[ type ][ i ] );
				}
			}
		}
	}

	// 2. Copy user data
	if ( data_user.hasData( src ) ) {
		udataOld = data_user.access( src );
		udataCur = jQuery.extend( {}, udataOld );

		data_user.set( dest, udataCur );
	}
}

function getAll( context, tag ) {
	var ret = context.getElementsByTagName ? context.getElementsByTagName( tag || "*" ) :
			context.querySelectorAll ? context.querySelectorAll( tag || "*" ) :
			[];

	return tag === undefined || tag && jQuery.nodeName( context, tag ) ?
		jQuery.merge( [ context ], ret ) :
		ret;
}

// Fix IE bugs, see support tests
function fixInput( src, dest ) {
	var nodeName = dest.nodeName.toLowerCase();

	// Fails to persist the checked state of a cloned checkbox or radio button.
	if ( nodeName === "input" && rcheckableType.test( src.type ) ) {
		dest.checked = src.checked;

	// Fails to return the selected option to the default selected state when cloning options
	} else if ( nodeName === "input" || nodeName === "textarea" ) {
		dest.defaultValue = src.defaultValue;
	}
}

jQuery.extend({
	clone: function( elem, dataAndEvents, deepDataAndEvents ) {
		var i, l, srcElements, destElements,
			clone = elem.cloneNode( true ),
			inPage = jQuery.contains( elem.ownerDocument, elem );

		// Fix IE cloning issues
		if ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&
				!jQuery.isXMLDoc( elem ) ) {

			// We eschew Sizzle here for performance reasons: http://jsperf.com/getall-vs-sizzle/2
			destElements = getAll( clone );
			srcElements = getAll( elem );

			for ( i = 0, l = srcElements.length; i < l; i++ ) {
				fixInput( srcElements[ i ], destElements[ i ] );
			}
		}

		// Copy the events from the original to the clone
		if ( dataAndEvents ) {
			if ( deepDataAndEvents ) {
				srcElements = srcElements || getAll( elem );
				destElements = destElements || getAll( clone );

				for ( i = 0, l = srcElements.length; i < l; i++ ) {
					cloneCopyEvent( srcElements[ i ], destElements[ i ] );
				}
			} else {
				cloneCopyEvent( elem, clone );
			}
		}

		// Preserve script evaluation history
		destElements = getAll( clone, "script" );
		if ( destElements.length > 0 ) {
			setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
		}

		// Return the cloned set
		return clone;
	},

	buildFragment: function( elems, context, scripts, selection ) {
		var elem, tmp, tag, wrap, contains, j,
			fragment = context.createDocumentFragment(),
			nodes = [],
			i = 0,
			l = elems.length;

		for ( ; i < l; i++ ) {
			elem = elems[ i ];

			if ( elem || elem === 0 ) {

				// Add nodes directly
				if ( jQuery.type( elem ) === "object" ) {
					// Support: QtWebKit, PhantomJS
					// push.apply(_, arraylike) throws on ancient WebKit
					jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );

				// Convert non-html into a text node
				} else if ( !rhtml.test( elem ) ) {
					nodes.push( context.createTextNode( elem ) );

				// Convert html into DOM nodes
				} else {
					tmp = tmp || fragment.appendChild( context.createElement("div") );

					// Deserialize a standard representation
					tag = ( rtagName.exec( elem ) || [ "", "" ] )[ 1 ].toLowerCase();
					wrap = wrapMap[ tag ] || wrapMap._default;
					tmp.innerHTML = wrap[ 1 ] + elem.replace( rxhtmlTag, "<$1></$2>" ) + wrap[ 2 ];

					// Descend through wrappers to the right content
					j = wrap[ 0 ];
					while ( j-- ) {
						tmp = tmp.lastChild;
					}

					// Support: QtWebKit, PhantomJS
					// push.apply(_, arraylike) throws on ancient WebKit
					jQuery.merge( nodes, tmp.childNodes );

					// Remember the top-level container
					tmp = fragment.firstChild;

					// Ensure the created nodes are orphaned (#12392)
					tmp.textContent = "";
				}
			}
		}

		// Remove wrapper from fragment
		fragment.textContent = "";

		i = 0;
		while ( (elem = nodes[ i++ ]) ) {

			// #4087 - If origin and destination elements are the same, and this is
			// that element, do not do anything
			if ( selection && jQuery.inArray( elem, selection ) !== -1 ) {
				continue;
			}

			contains = jQuery.contains( elem.ownerDocument, elem );

			// Append to fragment
			tmp = getAll( fragment.appendChild( elem ), "script" );

			// Preserve script evaluation history
			if ( contains ) {
				setGlobalEval( tmp );
			}

			// Capture executables
			if ( scripts ) {
				j = 0;
				while ( (elem = tmp[ j++ ]) ) {
					if ( rscriptType.test( elem.type || "" ) ) {
						scripts.push( elem );
					}
				}
			}
		}

		return fragment;
	},

	cleanData: function( elems ) {
		var data, elem, type, key,
			special = jQuery.event.special,
			i = 0;

		for ( ; (elem = elems[ i ]) !== undefined; i++ ) {
			if ( jQuery.acceptData( elem ) ) {
				key = elem[ data_priv.expando ];

				if ( key && (data = data_priv.cache[ key ]) ) {
					if ( data.events ) {
						for ( type in data.events ) {
							if ( special[ type ] ) {
								jQuery.event.remove( elem, type );

							// This is a shortcut to avoid jQuery.event.remove's overhead
							} else {
								jQuery.removeEvent( elem, type, data.handle );
							}
						}
					}
					if ( data_priv.cache[ key ] ) {
						// Discard any remaining `private` data
						delete data_priv.cache[ key ];
					}
				}
			}
			// Discard any remaining `user` data
			delete data_user.cache[ elem[ data_user.expando ] ];
		}
	}
});

jQuery.fn.extend({
	text: function( value ) {
		return access( this, function( value ) {
			return value === undefined ?
				jQuery.text( this ) :
				this.empty().each(function() {
					if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
						this.textContent = value;
					}
				});
		}, null, value, arguments.length );
	},

	append: function() {
		return this.domManip( arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.appendChild( elem );
			}
		});
	},

	prepend: function() {
		return this.domManip( arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.insertBefore( elem, target.firstChild );
			}
		});
	},

	before: function() {
		return this.domManip( arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this );
			}
		});
	},

	after: function() {
		return this.domManip( arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this.nextSibling );
			}
		});
	},

	remove: function( selector, keepData /* Internal Use Only */ ) {
		var elem,
			elems = selector ? jQuery.filter( selector, this ) : this,
			i = 0;

		for ( ; (elem = elems[i]) != null; i++ ) {
			if ( !keepData && elem.nodeType === 1 ) {
				jQuery.cleanData( getAll( elem ) );
			}

			if ( elem.parentNode ) {
				if ( keepData && jQuery.contains( elem.ownerDocument, elem ) ) {
					setGlobalEval( getAll( elem, "script" ) );
				}
				elem.parentNode.removeChild( elem );
			}
		}

		return this;
	},

	empty: function() {
		var elem,
			i = 0;

		for ( ; (elem = this[i]) != null; i++ ) {
			if ( elem.nodeType === 1 ) {

				// Prevent memory leaks
				jQuery.cleanData( getAll( elem, false ) );

				// Remove any remaining nodes
				elem.textContent = "";
			}
		}

		return this;
	},

	clone: function( dataAndEvents, deepDataAndEvents ) {
		dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
		deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

		return this.map(function() {
			return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
		});
	},

	html: function( value ) {
		return access( this, function( value ) {
			var elem = this[ 0 ] || {},
				i = 0,
				l = this.length;

			if ( value === undefined && elem.nodeType === 1 ) {
				return elem.innerHTML;
			}

			// See if we can take a shortcut and just use innerHTML
			if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
				!wrapMap[ ( rtagName.exec( value ) || [ "", "" ] )[ 1 ].toLowerCase() ] ) {

				value = value.replace( rxhtmlTag, "<$1></$2>" );

				try {
					for ( ; i < l; i++ ) {
						elem = this[ i ] || {};

						// Remove element nodes and prevent memory leaks
						if ( elem.nodeType === 1 ) {
							jQuery.cleanData( getAll( elem, false ) );
							elem.innerHTML = value;
						}
					}

					elem = 0;

				// If using innerHTML throws an exception, use the fallback method
				} catch( e ) {}
			}

			if ( elem ) {
				this.empty().append( value );
			}
		}, null, value, arguments.length );
	},

	replaceWith: function() {
		var arg = arguments[ 0 ];

		// Make the changes, replacing each context element with the new content
		this.domManip( arguments, function( elem ) {
			arg = this.parentNode;

			jQuery.cleanData( getAll( this ) );

			if ( arg ) {
				arg.replaceChild( elem, this );
			}
		});

		// Force removal if there was no new content (e.g., from empty arguments)
		return arg && (arg.length || arg.nodeType) ? this : this.remove();
	},

	detach: function( selector ) {
		return this.remove( selector, true );
	},

	domManip: function( args, callback ) {

		// Flatten any nested arrays
		args = concat.apply( [], args );

		var fragment, first, scripts, hasScripts, node, doc,
			i = 0,
			l = this.length,
			set = this,
			iNoClone = l - 1,
			value = args[ 0 ],
			isFunction = jQuery.isFunction( value );

		// We can't cloneNode fragments that contain checked, in WebKit
		if ( isFunction ||
				( l > 1 && typeof value === "string" &&
					!support.checkClone && rchecked.test( value ) ) ) {
			return this.each(function( index ) {
				var self = set.eq( index );
				if ( isFunction ) {
					args[ 0 ] = value.call( this, index, self.html() );
				}
				self.domManip( args, callback );
			});
		}

		if ( l ) {
			fragment = jQuery.buildFragment( args, this[ 0 ].ownerDocument, false, this );
			first = fragment.firstChild;

			if ( fragment.childNodes.length === 1 ) {
				fragment = first;
			}

			if ( first ) {
				scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
				hasScripts = scripts.length;

				// Use the original fragment for the last item instead of the first because it can end up
				// being emptied incorrectly in certain situations (#8070).
				for ( ; i < l; i++ ) {
					node = fragment;

					if ( i !== iNoClone ) {
						node = jQuery.clone( node, true, true );

						// Keep references to cloned scripts for later restoration
						if ( hasScripts ) {
							// Support: QtWebKit
							// jQuery.merge because push.apply(_, arraylike) throws
							jQuery.merge( scripts, getAll( node, "script" ) );
						}
					}

					callback.call( this[ i ], node, i );
				}

				if ( hasScripts ) {
					doc = scripts[ scripts.length - 1 ].ownerDocument;

					// Reenable scripts
					jQuery.map( scripts, restoreScript );

					// Evaluate executable scripts on first document insertion
					for ( i = 0; i < hasScripts; i++ ) {
						node = scripts[ i ];
						if ( rscriptType.test( node.type || "" ) &&
							!data_priv.access( node, "globalEval" ) && jQuery.contains( doc, node ) ) {

							if ( node.src ) {
								// Optional AJAX dependency, but won't run scripts if not present
								if ( jQuery._evalUrl ) {
									jQuery._evalUrl( node.src );
								}
							} else {
								jQuery.globalEval( node.textContent.replace( rcleanScript, "" ) );
							}
						}
					}
				}
			}
		}

		return this;
	}
});

jQuery.each({
	appendTo: "append",
	prependTo: "prepend",
	insertBefore: "before",
	insertAfter: "after",
	replaceAll: "replaceWith"
}, function( name, original ) {
	jQuery.fn[ name ] = function( selector ) {
		var elems,
			ret = [],
			insert = jQuery( selector ),
			last = insert.length - 1,
			i = 0;

		for ( ; i <= last; i++ ) {
			elems = i === last ? this : this.clone( true );
			jQuery( insert[ i ] )[ original ]( elems );

			// Support: QtWebKit
			// .get() because push.apply(_, arraylike) throws
			push.apply( ret, elems.get() );
		}

		return this.pushStack( ret );
	};
});


var iframe,
	elemdisplay = {};

/**
 * Retrieve the actual display of a element
 * @param {String} name nodeName of the element
 * @param {Object} doc Document object
 */
// Called only from within defaultDisplay
function actualDisplay( name, doc ) {
	var style,
		elem = jQuery( doc.createElement( name ) ).appendTo( doc.body ),

		// getDefaultComputedStyle might be reliably used only on attached element
		display = window.getDefaultComputedStyle && ( style = window.getDefaultComputedStyle( elem[ 0 ] ) ) ?

			// Use of this method is a temporary fix (more like optimization) until something better comes along,
			// since it was removed from specification and supported only in FF
			style.display : jQuery.css( elem[ 0 ], "display" );

	// We don't have any data stored on the element,
	// so use "detach" method as fast way to get rid of the element
	elem.detach();

	return display;
}

/**
 * Try to determine the default display value of an element
 * @param {String} nodeName
 */
function defaultDisplay( nodeName ) {
	var doc = document,
		display = elemdisplay[ nodeName ];

	if ( !display ) {
		display = actualDisplay( nodeName, doc );

		// If the simple way fails, read from inside an iframe
		if ( display === "none" || !display ) {

			// Use the already-created iframe if possible
			iframe = (iframe || jQuery( "<iframe frameborder='0' width='0' height='0'/>" )).appendTo( doc.documentElement );

			// Always write a new HTML skeleton so Webkit and Firefox don't choke on reuse
			doc = iframe[ 0 ].contentDocument;

			// Support: IE
			doc.write();
			doc.close();

			display = actualDisplay( nodeName, doc );
			iframe.detach();
		}

		// Store the correct default display
		elemdisplay[ nodeName ] = display;
	}

	return display;
}
var rmargin = (/^margin/);

var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );

var getStyles = function( elem ) {
		// Support: IE<=11+, Firefox<=30+ (#15098, #14150)
		// IE throws on elements created in popups
		// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
		if ( elem.ownerDocument.defaultView.opener ) {
			return elem.ownerDocument.defaultView.getComputedStyle( elem, null );
		}

		return window.getComputedStyle( elem, null );
	};



function curCSS( elem, name, computed ) {
	var width, minWidth, maxWidth, ret,
		style = elem.style;

	computed = computed || getStyles( elem );

	// Support: IE9
	// getPropertyValue is only needed for .css('filter') (#12537)
	if ( computed ) {
		ret = computed.getPropertyValue( name ) || computed[ name ];
	}

	if ( computed ) {

		if ( ret === "" && !jQuery.contains( elem.ownerDocument, elem ) ) {
			ret = jQuery.style( elem, name );
		}

		// Support: iOS < 6
		// A tribute to the "awesome hack by Dean Edwards"
		// iOS < 6 (at least) returns percentage for a larger set of values, but width seems to be reliably pixels
		// this is against the CSSOM draft spec: http://dev.w3.org/csswg/cssom/#resolved-values
		if ( rnumnonpx.test( ret ) && rmargin.test( name ) ) {

			// Remember the original values
			width = style.width;
			minWidth = style.minWidth;
			maxWidth = style.maxWidth;

			// Put in the new values to get a computed value out
			style.minWidth = style.maxWidth = style.width = ret;
			ret = computed.width;

			// Revert the changed values
			style.width = width;
			style.minWidth = minWidth;
			style.maxWidth = maxWidth;
		}
	}

	return ret !== undefined ?
		// Support: IE
		// IE returns zIndex value as an integer.
		ret + "" :
		ret;
}


function addGetHookIf( conditionFn, hookFn ) {
	// Define the hook, we'll check on the first run if it's really needed.
	return {
		get: function() {
			if ( conditionFn() ) {
				// Hook not needed (or it's not possible to use it due
				// to missing dependency), remove it.
				delete this.get;
				return;
			}

			// Hook needed; redefine it so that the support test is not executed again.
			return (this.get = hookFn).apply( this, arguments );
		}
	};
}


(function() {
	var pixelPositionVal, boxSizingReliableVal,
		docElem = document.documentElement,
		container = document.createElement( "div" ),
		div = document.createElement( "div" );

	if ( !div.style ) {
		return;
	}

	// Support: IE9-11+
	// Style of cloned element affects source element cloned (#8908)
	div.style.backgroundClip = "content-box";
	div.cloneNode( true ).style.backgroundClip = "";
	support.clearCloneStyle = div.style.backgroundClip === "content-box";

	container.style.cssText = "border:0;width:0;height:0;top:0;left:-9999px;margin-top:1px;" +
		"position:absolute";
	container.appendChild( div );

	// Executing both pixelPosition & boxSizingReliable tests require only one layout
	// so they're executed at the same time to save the second computation.
	function computePixelPositionAndBoxSizingReliable() {
		div.style.cssText =
			// Support: Firefox<29, Android 2.3
			// Vendor-prefix box-sizing
			"-webkit-box-sizing:border-box;-moz-box-sizing:border-box;" +
			"box-sizing:border-box;display:block;margin-top:1%;top:1%;" +
			"border:1px;padding:1px;width:4px;position:absolute";
		div.innerHTML = "";
		docElem.appendChild( container );

		var divStyle = window.getComputedStyle( div, null );
		pixelPositionVal = divStyle.top !== "1%";
		boxSizingReliableVal = divStyle.width === "4px";

		docElem.removeChild( container );
	}

	// Support: node.js jsdom
	// Don't assume that getComputedStyle is a property of the global object
	if ( window.getComputedStyle ) {
		jQuery.extend( support, {
			pixelPosition: function() {

				// This test is executed only once but we still do memoizing
				// since we can use the boxSizingReliable pre-computing.
				// No need to check if the test was already performed, though.
				computePixelPositionAndBoxSizingReliable();
				return pixelPositionVal;
			},
			boxSizingReliable: function() {
				if ( boxSizingReliableVal == null ) {
					computePixelPositionAndBoxSizingReliable();
				}
				return boxSizingReliableVal;
			},
			reliableMarginRight: function() {

				// Support: Android 2.3
				// Check if div with explicit width and no margin-right incorrectly
				// gets computed margin-right based on width of container. (#3333)
				// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
				// This support function is only executed once so no memoizing is needed.
				var ret,
					marginDiv = div.appendChild( document.createElement( "div" ) );

				// Reset CSS: box-sizing; display; margin; border; padding
				marginDiv.style.cssText = div.style.cssText =
					// Support: Firefox<29, Android 2.3
					// Vendor-prefix box-sizing
					"-webkit-box-sizing:content-box;-moz-box-sizing:content-box;" +
					"box-sizing:content-box;display:block;margin:0;border:0;padding:0";
				marginDiv.style.marginRight = marginDiv.style.width = "0";
				div.style.width = "1px";
				docElem.appendChild( container );

				ret = !parseFloat( window.getComputedStyle( marginDiv, null ).marginRight );

				docElem.removeChild( container );
				div.removeChild( marginDiv );

				return ret;
			}
		});
	}
})();


// A method for quickly swapping in/out CSS properties to get correct calculations.
jQuery.swap = function( elem, options, callback, args ) {
	var ret, name,
		old = {};

	// Remember the old values, and insert the new ones
	for ( name in options ) {
		old[ name ] = elem.style[ name ];
		elem.style[ name ] = options[ name ];
	}

	ret = callback.apply( elem, args || [] );

	// Revert the old values
	for ( name in options ) {
		elem.style[ name ] = old[ name ];
	}

	return ret;
};


var
	// Swappable if display is none or starts with table except "table", "table-cell", or "table-caption"
	// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
	rdisplayswap = /^(none|table(?!-c[ea]).+)/,
	rnumsplit = new RegExp( "^(" + pnum + ")(.*)$", "i" ),
	rrelNum = new RegExp( "^([+-])=(" + pnum + ")", "i" ),

	cssShow = { position: "absolute", visibility: "hidden", display: "block" },
	cssNormalTransform = {
		letterSpacing: "0",
		fontWeight: "400"
	},

	cssPrefixes = [ "Webkit", "O", "Moz", "ms" ];

// Return a css property mapped to a potentially vendor prefixed property
function vendorPropName( style, name ) {

	// Shortcut for names that are not vendor prefixed
	if ( name in style ) {
		return name;
	}

	// Check for vendor prefixed names
	var capName = name[0].toUpperCase() + name.slice(1),
		origName = name,
		i = cssPrefixes.length;

	while ( i-- ) {
		name = cssPrefixes[ i ] + capName;
		if ( name in style ) {
			return name;
		}
	}

	return origName;
}

function setPositiveNumber( elem, value, subtract ) {
	var matches = rnumsplit.exec( value );
	return matches ?
		// Guard against undefined "subtract", e.g., when used as in cssHooks
		Math.max( 0, matches[ 1 ] - ( subtract || 0 ) ) + ( matches[ 2 ] || "px" ) :
		value;
}

function augmentWidthOrHeight( elem, name, extra, isBorderBox, styles ) {
	var i = extra === ( isBorderBox ? "border" : "content" ) ?
		// If we already have the right measurement, avoid augmentation
		4 :
		// Otherwise initialize for horizontal or vertical properties
		name === "width" ? 1 : 0,

		val = 0;

	for ( ; i < 4; i += 2 ) {
		// Both box models exclude margin, so add it if we want it
		if ( extra === "margin" ) {
			val += jQuery.css( elem, extra + cssExpand[ i ], true, styles );
		}

		if ( isBorderBox ) {
			// border-box includes padding, so remove it if we want content
			if ( extra === "content" ) {
				val -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
			}

			// At this point, extra isn't border nor margin, so remove border
			if ( extra !== "margin" ) {
				val -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		} else {
			// At this point, extra isn't content, so add padding
			val += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );

			// At this point, extra isn't content nor padding, so add border
			if ( extra !== "padding" ) {
				val += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		}
	}

	return val;
}

function getWidthOrHeight( elem, name, extra ) {

	// Start with offset property, which is equivalent to the border-box value
	var valueIsBorderBox = true,
		val = name === "width" ? elem.offsetWidth : elem.offsetHeight,
		styles = getStyles( elem ),
		isBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box";

	// Some non-html elements return undefined for offsetWidth, so check for null/undefined
	// svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285
	// MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668
	if ( val <= 0 || val == null ) {
		// Fall back to computed then uncomputed css if necessary
		val = curCSS( elem, name, styles );
		if ( val < 0 || val == null ) {
			val = elem.style[ name ];
		}

		// Computed unit is not pixels. Stop here and return.
		if ( rnumnonpx.test(val) ) {
			return val;
		}

		// Check for style in case a browser which returns unreliable values
		// for getComputedStyle silently falls back to the reliable elem.style
		valueIsBorderBox = isBorderBox &&
			( support.boxSizingReliable() || val === elem.style[ name ] );

		// Normalize "", auto, and prepare for extra
		val = parseFloat( val ) || 0;
	}

	// Use the active box-sizing model to add/subtract irrelevant styles
	return ( val +
		augmentWidthOrHeight(
			elem,
			name,
			extra || ( isBorderBox ? "border" : "content" ),
			valueIsBorderBox,
			styles
		)
	) + "px";
}

function showHide( elements, show ) {
	var display, elem, hidden,
		values = [],
		index = 0,
		length = elements.length;

	for ( ; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}

		values[ index ] = data_priv.get( elem, "olddisplay" );
		display = elem.style.display;
		if ( show ) {
			// Reset the inline display of this element to learn if it is
			// being hidden by cascaded rules or not
			if ( !values[ index ] && display === "none" ) {
				elem.style.display = "";
			}

			// Set elements which have been overridden with display: none
			// in a stylesheet to whatever the default browser style is
			// for such an element
			if ( elem.style.display === "" && isHidden( elem ) ) {
				values[ index ] = data_priv.access( elem, "olddisplay", defaultDisplay(elem.nodeName) );
			}
		} else {
			hidden = isHidden( elem );

			if ( display !== "none" || !hidden ) {
				data_priv.set( elem, "olddisplay", hidden ? display : jQuery.css( elem, "display" ) );
			}
		}
	}

	// Set the display of most of the elements in a second loop
	// to avoid the constant reflow
	for ( index = 0; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}
		if ( !show || elem.style.display === "none" || elem.style.display === "" ) {
			elem.style.display = show ? values[ index ] || "" : "none";
		}
	}

	return elements;
}

jQuery.extend({

	// Add in style property hooks for overriding the default
	// behavior of getting and setting a style property
	cssHooks: {
		opacity: {
			get: function( elem, computed ) {
				if ( computed ) {

					// We should always get a number back from opacity
					var ret = curCSS( elem, "opacity" );
					return ret === "" ? "1" : ret;
				}
			}
		}
	},

	// Don't automatically add "px" to these possibly-unitless properties
	cssNumber: {
		"columnCount": true,
		"fillOpacity": true,
		"flexGrow": true,
		"flexShrink": true,
		"fontWeight": true,
		"lineHeight": true,
		"opacity": true,
		"order": true,
		"orphans": true,
		"widows": true,
		"zIndex": true,
		"zoom": true
	},

	// Add in properties whose names you wish to fix before
	// setting or getting the value
	cssProps: {
		"float": "cssFloat"
	},

	// Get and set the style property on a DOM Node
	style: function( elem, name, value, extra ) {

		// Don't set styles on text and comment nodes
		if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
			return;
		}

		// Make sure that we're working with the right name
		var ret, type, hooks,
			origName = jQuery.camelCase( name ),
			style = elem.style;

		name = jQuery.cssProps[ origName ] || ( jQuery.cssProps[ origName ] = vendorPropName( style, origName ) );

		// Gets hook for the prefixed version, then unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// Check if we're setting a value
		if ( value !== undefined ) {
			type = typeof value;

			// Convert "+=" or "-=" to relative numbers (#7345)
			if ( type === "string" && (ret = rrelNum.exec( value )) ) {
				value = ( ret[1] + 1 ) * ret[2] + parseFloat( jQuery.css( elem, name ) );
				// Fixes bug #9237
				type = "number";
			}

			// Make sure that null and NaN values aren't set (#7116)
			if ( value == null || value !== value ) {
				return;
			}

			// If a number, add 'px' to the (except for certain CSS properties)
			if ( type === "number" && !jQuery.cssNumber[ origName ] ) {
				value += "px";
			}

			// Support: IE9-11+
			// background-* props affect original clone's values
			if ( !support.clearCloneStyle && value === "" && name.indexOf( "background" ) === 0 ) {
				style[ name ] = "inherit";
			}

			// If a hook was provided, use that value, otherwise just set the specified value
			if ( !hooks || !("set" in hooks) || (value = hooks.set( elem, value, extra )) !== undefined ) {
				style[ name ] = value;
			}

		} else {
			// If a hook was provided get the non-computed value from there
			if ( hooks && "get" in hooks && (ret = hooks.get( elem, false, extra )) !== undefined ) {
				return ret;
			}

			// Otherwise just get the value from the style object
			return style[ name ];
		}
	},

	css: function( elem, name, extra, styles ) {
		var val, num, hooks,
			origName = jQuery.camelCase( name );

		// Make sure that we're working with the right name
		name = jQuery.cssProps[ origName ] || ( jQuery.cssProps[ origName ] = vendorPropName( elem.style, origName ) );

		// Try prefixed name followed by the unprefixed name
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// If a hook was provided get the computed value from there
		if ( hooks && "get" in hooks ) {
			val = hooks.get( elem, true, extra );
		}

		// Otherwise, if a way to get the computed value exists, use that
		if ( val === undefined ) {
			val = curCSS( elem, name, styles );
		}

		// Convert "normal" to computed value
		if ( val === "normal" && name in cssNormalTransform ) {
			val = cssNormalTransform[ name ];
		}

		// Make numeric if forced or a qualifier was provided and val looks numeric
		if ( extra === "" || extra ) {
			num = parseFloat( val );
			return extra === true || jQuery.isNumeric( num ) ? num || 0 : val;
		}
		return val;
	}
});

jQuery.each([ "height", "width" ], function( i, name ) {
	jQuery.cssHooks[ name ] = {
		get: function( elem, computed, extra ) {
			if ( computed ) {

				// Certain elements can have dimension info if we invisibly show them
				// but it must have a current display style that would benefit
				return rdisplayswap.test( jQuery.css( elem, "display" ) ) && elem.offsetWidth === 0 ?
					jQuery.swap( elem, cssShow, function() {
						return getWidthOrHeight( elem, name, extra );
					}) :
					getWidthOrHeight( elem, name, extra );
			}
		},

		set: function( elem, value, extra ) {
			var styles = extra && getStyles( elem );
			return setPositiveNumber( elem, value, extra ?
				augmentWidthOrHeight(
					elem,
					name,
					extra,
					jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
					styles
				) : 0
			);
		}
	};
});

// Support: Android 2.3
jQuery.cssHooks.marginRight = addGetHookIf( support.reliableMarginRight,
	function( elem, computed ) {
		if ( computed ) {
			return jQuery.swap( elem, { "display": "inline-block" },
				curCSS, [ elem, "marginRight" ] );
		}
	}
);

// These hooks are used by animate to expand properties
jQuery.each({
	margin: "",
	padding: "",
	border: "Width"
}, function( prefix, suffix ) {
	jQuery.cssHooks[ prefix + suffix ] = {
		expand: function( value ) {
			var i = 0,
				expanded = {},

				// Assumes a single number if not a string
				parts = typeof value === "string" ? value.split(" ") : [ value ];

			for ( ; i < 4; i++ ) {
				expanded[ prefix + cssExpand[ i ] + suffix ] =
					parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
			}

			return expanded;
		}
	};

	if ( !rmargin.test( prefix ) ) {
		jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
	}
});

jQuery.fn.extend({
	css: function( name, value ) {
		return access( this, function( elem, name, value ) {
			var styles, len,
				map = {},
				i = 0;

			if ( jQuery.isArray( name ) ) {
				styles = getStyles( elem );
				len = name.length;

				for ( ; i < len; i++ ) {
					map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
				}

				return map;
			}

			return value !== undefined ?
				jQuery.style( elem, name, value ) :
				jQuery.css( elem, name );
		}, name, value, arguments.length > 1 );
	},
	show: function() {
		return showHide( this, true );
	},
	hide: function() {
		return showHide( this );
	},
	toggle: function( state ) {
		if ( typeof state === "boolean" ) {
			return state ? this.show() : this.hide();
		}

		return this.each(function() {
			if ( isHidden( this ) ) {
				jQuery( this ).show();
			} else {
				jQuery( this ).hide();
			}
		});
	}
});


function Tween( elem, options, prop, end, easing ) {
	return new Tween.prototype.init( elem, options, prop, end, easing );
}
jQuery.Tween = Tween;

Tween.prototype = {
	constructor: Tween,
	init: function( elem, options, prop, end, easing, unit ) {
		this.elem = elem;
		this.prop = prop;
		this.easing = easing || "swing";
		this.options = options;
		this.start = this.now = this.cur();
		this.end = end;
		this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
	},
	cur: function() {
		var hooks = Tween.propHooks[ this.prop ];

		return hooks && hooks.get ?
			hooks.get( this ) :
			Tween.propHooks._default.get( this );
	},
	run: function( percent ) {
		var eased,
			hooks = Tween.propHooks[ this.prop ];

		if ( this.options.duration ) {
			this.pos = eased = jQuery.easing[ this.easing ](
				percent, this.options.duration * percent, 0, 1, this.options.duration
			);
		} else {
			this.pos = eased = percent;
		}
		this.now = ( this.end - this.start ) * eased + this.start;

		if ( this.options.step ) {
			this.options.step.call( this.elem, this.now, this );
		}

		if ( hooks && hooks.set ) {
			hooks.set( this );
		} else {
			Tween.propHooks._default.set( this );
		}
		return this;
	}
};

Tween.prototype.init.prototype = Tween.prototype;

Tween.propHooks = {
	_default: {
		get: function( tween ) {
			var result;

			if ( tween.elem[ tween.prop ] != null &&
				(!tween.elem.style || tween.elem.style[ tween.prop ] == null) ) {
				return tween.elem[ tween.prop ];
			}

			// Passing an empty string as a 3rd parameter to .css will automatically
			// attempt a parseFloat and fallback to a string if the parse fails.
			// Simple values such as "10px" are parsed to Float;
			// complex values such as "rotate(1rad)" are returned as-is.
			result = jQuery.css( tween.elem, tween.prop, "" );
			// Empty strings, null, undefined and "auto" are converted to 0.
			return !result || result === "auto" ? 0 : result;
		},
		set: function( tween ) {
			// Use step hook for back compat.
			// Use cssHook if its there.
			// Use .style if available and use plain properties where available.
			if ( jQuery.fx.step[ tween.prop ] ) {
				jQuery.fx.step[ tween.prop ]( tween );
			} else if ( tween.elem.style && ( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null || jQuery.cssHooks[ tween.prop ] ) ) {
				jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
			} else {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	}
};

// Support: IE9
// Panic based approach to setting things on disconnected nodes
Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
	set: function( tween ) {
		if ( tween.elem.nodeType && tween.elem.parentNode ) {
			tween.elem[ tween.prop ] = tween.now;
		}
	}
};

jQuery.easing = {
	linear: function( p ) {
		return p;
	},
	swing: function( p ) {
		return 0.5 - Math.cos( p * Math.PI ) / 2;
	}
};

jQuery.fx = Tween.prototype.init;

// Back Compat <1.8 extension point
jQuery.fx.step = {};




var
	fxNow, timerId,
	rfxtypes = /^(?:toggle|show|hide)$/,
	rfxnum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" ),
	rrun = /queueHooks$/,
	animationPrefilters = [ defaultPrefilter ],
	tweeners = {
		"*": [ function( prop, value ) {
			var tween = this.createTween( prop, value ),
				target = tween.cur(),
				parts = rfxnum.exec( value ),
				unit = parts && parts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),

				// Starting value computation is required for potential unit mismatches
				start = ( jQuery.cssNumber[ prop ] || unit !== "px" && +target ) &&
					rfxnum.exec( jQuery.css( tween.elem, prop ) ),
				scale = 1,
				maxIterations = 20;

			if ( start && start[ 3 ] !== unit ) {
				// Trust units reported by jQuery.css
				unit = unit || start[ 3 ];

				// Make sure we update the tween properties later on
				parts = parts || [];

				// Iteratively approximate from a nonzero starting point
				start = +target || 1;

				do {
					// If previous iteration zeroed out, double until we get *something*.
					// Use string for doubling so we don't accidentally see scale as unchanged below
					scale = scale || ".5";

					// Adjust and apply
					start = start / scale;
					jQuery.style( tween.elem, prop, start + unit );

				// Update scale, tolerating zero or NaN from tween.cur(),
				// break the loop if scale is unchanged or perfect, or if we've just had enough
				} while ( scale !== (scale = tween.cur() / target) && scale !== 1 && --maxIterations );
			}

			// Update tween properties
			if ( parts ) {
				start = tween.start = +start || +target || 0;
				tween.unit = unit;
				// If a +=/-= token was provided, we're doing a relative animation
				tween.end = parts[ 1 ] ?
					start + ( parts[ 1 ] + 1 ) * parts[ 2 ] :
					+parts[ 2 ];
			}

			return tween;
		} ]
	};

// Animations created synchronously will run synchronously
function createFxNow() {
	setTimeout(function() {
		fxNow = undefined;
	});
	return ( fxNow = jQuery.now() );
}

// Generate parameters to create a standard animation
function genFx( type, includeWidth ) {
	var which,
		i = 0,
		attrs = { height: type };

	// If we include width, step value is 1 to do all cssExpand values,
	// otherwise step value is 2 to skip over Left and Right
	includeWidth = includeWidth ? 1 : 0;
	for ( ; i < 4 ; i += 2 - includeWidth ) {
		which = cssExpand[ i ];
		attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
	}

	if ( includeWidth ) {
		attrs.opacity = attrs.width = type;
	}

	return attrs;
}

function createTween( value, prop, animation ) {
	var tween,
		collection = ( tweeners[ prop ] || [] ).concat( tweeners[ "*" ] ),
		index = 0,
		length = collection.length;
	for ( ; index < length; index++ ) {
		if ( (tween = collection[ index ].call( animation, prop, value )) ) {

			// We're done with this property
			return tween;
		}
	}
}

function defaultPrefilter( elem, props, opts ) {
	/* jshint validthis: true */
	var prop, value, toggle, tween, hooks, oldfire, display, checkDisplay,
		anim = this,
		orig = {},
		style = elem.style,
		hidden = elem.nodeType && isHidden( elem ),
		dataShow = data_priv.get( elem, "fxshow" );

	// Handle queue: false promises
	if ( !opts.queue ) {
		hooks = jQuery._queueHooks( elem, "fx" );
		if ( hooks.unqueued == null ) {
			hooks.unqueued = 0;
			oldfire = hooks.empty.fire;
			hooks.empty.fire = function() {
				if ( !hooks.unqueued ) {
					oldfire();
				}
			};
		}
		hooks.unqueued++;

		anim.always(function() {
			// Ensure the complete handler is called before this completes
			anim.always(function() {
				hooks.unqueued--;
				if ( !jQuery.queue( elem, "fx" ).length ) {
					hooks.empty.fire();
				}
			});
		});
	}

	// Height/width overflow pass
	if ( elem.nodeType === 1 && ( "height" in props || "width" in props ) ) {
		// Make sure that nothing sneaks out
		// Record all 3 overflow attributes because IE9-10 do not
		// change the overflow attribute when overflowX and
		// overflowY are set to the same value
		opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

		// Set display property to inline-block for height/width
		// animations on inline elements that are having width/height animated
		display = jQuery.css( elem, "display" );

		// Test default display if display is currently "none"
		checkDisplay = display === "none" ?
			data_priv.get( elem, "olddisplay" ) || defaultDisplay( elem.nodeName ) : display;

		if ( checkDisplay === "inline" && jQuery.css( elem, "float" ) === "none" ) {
			style.display = "inline-block";
		}
	}

	if ( opts.overflow ) {
		style.overflow = "hidden";
		anim.always(function() {
			style.overflow = opts.overflow[ 0 ];
			style.overflowX = opts.overflow[ 1 ];
			style.overflowY = opts.overflow[ 2 ];
		});
	}

	// show/hide pass
	for ( prop in props ) {
		value = props[ prop ];
		if ( rfxtypes.exec( value ) ) {
			delete props[ prop ];
			toggle = toggle || value === "toggle";
			if ( value === ( hidden ? "hide" : "show" ) ) {

				// If there is dataShow left over from a stopped hide or show and we are going to proceed with show, we should pretend to be hidden
				if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {
					hidden = true;
				} else {
					continue;
				}
			}
			orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );

		// Any non-fx value stops us from restoring the original display value
		} else {
			display = undefined;
		}
	}

	if ( !jQuery.isEmptyObject( orig ) ) {
		if ( dataShow ) {
			if ( "hidden" in dataShow ) {
				hidden = dataShow.hidden;
			}
		} else {
			dataShow = data_priv.access( elem, "fxshow", {} );
		}

		// Store state if its toggle - enables .stop().toggle() to "reverse"
		if ( toggle ) {
			dataShow.hidden = !hidden;
		}
		if ( hidden ) {
			jQuery( elem ).show();
		} else {
			anim.done(function() {
				jQuery( elem ).hide();
			});
		}
		anim.done(function() {
			var prop;

			data_priv.remove( elem, "fxshow" );
			for ( prop in orig ) {
				jQuery.style( elem, prop, orig[ prop ] );
			}
		});
		for ( prop in orig ) {
			tween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );

			if ( !( prop in dataShow ) ) {
				dataShow[ prop ] = tween.start;
				if ( hidden ) {
					tween.end = tween.start;
					tween.start = prop === "width" || prop === "height" ? 1 : 0;
				}
			}
		}

	// If this is a noop like .hide().hide(), restore an overwritten display value
	} else if ( (display === "none" ? defaultDisplay( elem.nodeName ) : display) === "inline" ) {
		style.display = display;
	}
}

function propFilter( props, specialEasing ) {
	var index, name, easing, value, hooks;

	// camelCase, specialEasing and expand cssHook pass
	for ( index in props ) {
		name = jQuery.camelCase( index );
		easing = specialEasing[ name ];
		value = props[ index ];
		if ( jQuery.isArray( value ) ) {
			easing = value[ 1 ];
			value = props[ index ] = value[ 0 ];
		}

		if ( index !== name ) {
			props[ name ] = value;
			delete props[ index ];
		}

		hooks = jQuery.cssHooks[ name ];
		if ( hooks && "expand" in hooks ) {
			value = hooks.expand( value );
			delete props[ name ];

			// Not quite $.extend, this won't overwrite existing keys.
			// Reusing 'index' because we have the correct "name"
			for ( index in value ) {
				if ( !( index in props ) ) {
					props[ index ] = value[ index ];
					specialEasing[ index ] = easing;
				}
			}
		} else {
			specialEasing[ name ] = easing;
		}
	}
}

function Animation( elem, properties, options ) {
	var result,
		stopped,
		index = 0,
		length = animationPrefilters.length,
		deferred = jQuery.Deferred().always( function() {
			// Don't match elem in the :animated selector
			delete tick.elem;
		}),
		tick = function() {
			if ( stopped ) {
				return false;
			}
			var currentTime = fxNow || createFxNow(),
				remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),
				// Support: Android 2.3
				// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
				temp = remaining / animation.duration || 0,
				percent = 1 - temp,
				index = 0,
				length = animation.tweens.length;

			for ( ; index < length ; index++ ) {
				animation.tweens[ index ].run( percent );
			}

			deferred.notifyWith( elem, [ animation, percent, remaining ]);

			if ( percent < 1 && length ) {
				return remaining;
			} else {
				deferred.resolveWith( elem, [ animation ] );
				return false;
			}
		},
		animation = deferred.promise({
			elem: elem,
			props: jQuery.extend( {}, properties ),
			opts: jQuery.extend( true, { specialEasing: {} }, options ),
			originalProperties: properties,
			originalOptions: options,
			startTime: fxNow || createFxNow(),
			duration: options.duration,
			tweens: [],
			createTween: function( prop, end ) {
				var tween = jQuery.Tween( elem, animation.opts, prop, end,
						animation.opts.specialEasing[ prop ] || animation.opts.easing );
				animation.tweens.push( tween );
				return tween;
			},
			stop: function( gotoEnd ) {
				var index = 0,
					// If we are going to the end, we want to run all the tweens
					// otherwise we skip this part
					length = gotoEnd ? animation.tweens.length : 0;
				if ( stopped ) {
					return this;
				}
				stopped = true;
				for ( ; index < length ; index++ ) {
					animation.tweens[ index ].run( 1 );
				}

				// Resolve when we played the last frame; otherwise, reject
				if ( gotoEnd ) {
					deferred.resolveWith( elem, [ animation, gotoEnd ] );
				} else {
					deferred.rejectWith( elem, [ animation, gotoEnd ] );
				}
				return this;
			}
		}),
		props = animation.props;

	propFilter( props, animation.opts.specialEasing );

	for ( ; index < length ; index++ ) {
		result = animationPrefilters[ index ].call( animation, elem, props, animation.opts );
		if ( result ) {
			return result;
		}
	}

	jQuery.map( props, createTween, animation );

	if ( jQuery.isFunction( animation.opts.start ) ) {
		animation.opts.start.call( elem, animation );
	}

	jQuery.fx.timer(
		jQuery.extend( tick, {
			elem: elem,
			anim: animation,
			queue: animation.opts.queue
		})
	);

	// attach callbacks from options
	return animation.progress( animation.opts.progress )
		.done( animation.opts.done, animation.opts.complete )
		.fail( animation.opts.fail )
		.always( animation.opts.always );
}

jQuery.Animation = jQuery.extend( Animation, {

	tweener: function( props, callback ) {
		if ( jQuery.isFunction( props ) ) {
			callback = props;
			props = [ "*" ];
		} else {
			props = props.split(" ");
		}

		var prop,
			index = 0,
			length = props.length;

		for ( ; index < length ; index++ ) {
			prop = props[ index ];
			tweeners[ prop ] = tweeners[ prop ] || [];
			tweeners[ prop ].unshift( callback );
		}
	},

	prefilter: function( callback, prepend ) {
		if ( prepend ) {
			animationPrefilters.unshift( callback );
		} else {
			animationPrefilters.push( callback );
		}
	}
});

jQuery.speed = function( speed, easing, fn ) {
	var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
		complete: fn || !fn && easing ||
			jQuery.isFunction( speed ) && speed,
		duration: speed,
		easing: fn && easing || easing && !jQuery.isFunction( easing ) && easing
	};

	opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ? opt.duration :
		opt.duration in jQuery.fx.speeds ? jQuery.fx.speeds[ opt.duration ] : jQuery.fx.speeds._default;

	// Normalize opt.queue - true/undefined/null -> "fx"
	if ( opt.queue == null || opt.queue === true ) {
		opt.queue = "fx";
	}

	// Queueing
	opt.old = opt.complete;

	opt.complete = function() {
		if ( jQuery.isFunction( opt.old ) ) {
			opt.old.call( this );
		}

		if ( opt.queue ) {
			jQuery.dequeue( this, opt.queue );
		}
	};

	return opt;
};

jQuery.fn.extend({
	fadeTo: function( speed, to, easing, callback ) {

		// Show any hidden elements after setting opacity to 0
		return this.filter( isHidden ).css( "opacity", 0 ).show()

			// Animate to the value specified
			.end().animate({ opacity: to }, speed, easing, callback );
	},
	animate: function( prop, speed, easing, callback ) {
		var empty = jQuery.isEmptyObject( prop ),
			optall = jQuery.speed( speed, easing, callback ),
			doAnimation = function() {
				// Operate on a copy of prop so per-property easing won't be lost
				var anim = Animation( this, jQuery.extend( {}, prop ), optall );

				// Empty animations, or finishing resolves immediately
				if ( empty || data_priv.get( this, "finish" ) ) {
					anim.stop( true );
				}
			};
			doAnimation.finish = doAnimation;

		return empty || optall.queue === false ?
			this.each( doAnimation ) :
			this.queue( optall.queue, doAnimation );
	},
	stop: function( type, clearQueue, gotoEnd ) {
		var stopQueue = function( hooks ) {
			var stop = hooks.stop;
			delete hooks.stop;
			stop( gotoEnd );
		};

		if ( typeof type !== "string" ) {
			gotoEnd = clearQueue;
			clearQueue = type;
			type = undefined;
		}
		if ( clearQueue && type !== false ) {
			this.queue( type || "fx", [] );
		}

		return this.each(function() {
			var dequeue = true,
				index = type != null && type + "queueHooks",
				timers = jQuery.timers,
				data = data_priv.get( this );

			if ( index ) {
				if ( data[ index ] && data[ index ].stop ) {
					stopQueue( data[ index ] );
				}
			} else {
				for ( index in data ) {
					if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
						stopQueue( data[ index ] );
					}
				}
			}

			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && (type == null || timers[ index ].queue === type) ) {
					timers[ index ].anim.stop( gotoEnd );
					dequeue = false;
					timers.splice( index, 1 );
				}
			}

			// Start the next in the queue if the last step wasn't forced.
			// Timers currently will call their complete callbacks, which
			// will dequeue but only if they were gotoEnd.
			if ( dequeue || !gotoEnd ) {
				jQuery.dequeue( this, type );
			}
		});
	},
	finish: function( type ) {
		if ( type !== false ) {
			type = type || "fx";
		}
		return this.each(function() {
			var index,
				data = data_priv.get( this ),
				queue = data[ type + "queue" ],
				hooks = data[ type + "queueHooks" ],
				timers = jQuery.timers,
				length = queue ? queue.length : 0;

			// Enable finishing flag on private data
			data.finish = true;

			// Empty the queue first
			jQuery.queue( this, type, [] );

			if ( hooks && hooks.stop ) {
				hooks.stop.call( this, true );
			}

			// Look for any active animations, and finish them
			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
					timers[ index ].anim.stop( true );
					timers.splice( index, 1 );
				}
			}

			// Look for any animations in the old queue and finish them
			for ( index = 0; index < length; index++ ) {
				if ( queue[ index ] && queue[ index ].finish ) {
					queue[ index ].finish.call( this );
				}
			}

			// Turn off finishing flag
			delete data.finish;
		});
	}
});

jQuery.each([ "toggle", "show", "hide" ], function( i, name ) {
	var cssFn = jQuery.fn[ name ];
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return speed == null || typeof speed === "boolean" ?
			cssFn.apply( this, arguments ) :
			this.animate( genFx( name, true ), speed, easing, callback );
	};
});

// Generate shortcuts for custom animations
jQuery.each({
	slideDown: genFx("show"),
	slideUp: genFx("hide"),
	slideToggle: genFx("toggle"),
	fadeIn: { opacity: "show" },
	fadeOut: { opacity: "hide" },
	fadeToggle: { opacity: "toggle" }
}, function( name, props ) {
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return this.animate( props, speed, easing, callback );
	};
});

jQuery.timers = [];
jQuery.fx.tick = function() {
	var timer,
		i = 0,
		timers = jQuery.timers;

	fxNow = jQuery.now();

	for ( ; i < timers.length; i++ ) {
		timer = timers[ i ];
		// Checks the timer has not already been removed
		if ( !timer() && timers[ i ] === timer ) {
			timers.splice( i--, 1 );
		}
	}

	if ( !timers.length ) {
		jQuery.fx.stop();
	}
	fxNow = undefined;
};

jQuery.fx.timer = function( timer ) {
	jQuery.timers.push( timer );
	if ( timer() ) {
		jQuery.fx.start();
	} else {
		jQuery.timers.pop();
	}
};

jQuery.fx.interval = 13;

jQuery.fx.start = function() {
	if ( !timerId ) {
		timerId = setInterval( jQuery.fx.tick, jQuery.fx.interval );
	}
};

jQuery.fx.stop = function() {
	clearInterval( timerId );
	timerId = null;
};

jQuery.fx.speeds = {
	slow: 600,
	fast: 200,
	// Default speed
	_default: 400
};


// Based off of the plugin by Clint Helfers, with permission.
// http://blindsignals.com/index.php/2009/07/jquery-delay/
jQuery.fn.delay = function( time, type ) {
	time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
	type = type || "fx";

	return this.queue( type, function( next, hooks ) {
		var timeout = setTimeout( next, time );
		hooks.stop = function() {
			clearTimeout( timeout );
		};
	});
};


(function() {
	var input = document.createElement( "input" ),
		select = document.createElement( "select" ),
		opt = select.appendChild( document.createElement( "option" ) );

	input.type = "checkbox";

	// Support: iOS<=5.1, Android<=4.2+
	// Default value for a checkbox should be "on"
	support.checkOn = input.value !== "";

	// Support: IE<=11+
	// Must access selectedIndex to make default options select
	support.optSelected = opt.selected;

	// Support: Android<=2.3
	// Options inside disabled selects are incorrectly marked as disabled
	select.disabled = true;
	support.optDisabled = !opt.disabled;

	// Support: IE<=11+
	// An input loses its value after becoming a radio
	input = document.createElement( "input" );
	input.value = "t";
	input.type = "radio";
	support.radioValue = input.value === "t";
})();


var nodeHook, boolHook,
	attrHandle = jQuery.expr.attrHandle;

jQuery.fn.extend({
	attr: function( name, value ) {
		return access( this, jQuery.attr, name, value, arguments.length > 1 );
	},

	removeAttr: function( name ) {
		return this.each(function() {
			jQuery.removeAttr( this, name );
		});
	}
});

jQuery.extend({
	attr: function( elem, name, value ) {
		var hooks, ret,
			nType = elem.nodeType;

		// don't get/set attributes on text, comment and attribute nodes
		if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		// Fallback to prop when attributes are not supported
		if ( typeof elem.getAttribute === strundefined ) {
			return jQuery.prop( elem, name, value );
		}

		// All attributes are lowercase
		// Grab necessary hook if one is defined
		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
			name = name.toLowerCase();
			hooks = jQuery.attrHooks[ name ] ||
				( jQuery.expr.match.bool.test( name ) ? boolHook : nodeHook );
		}

		if ( value !== undefined ) {

			if ( value === null ) {
				jQuery.removeAttr( elem, name );

			} else if ( hooks && "set" in hooks && (ret = hooks.set( elem, value, name )) !== undefined ) {
				return ret;

			} else {
				elem.setAttribute( name, value + "" );
				return value;
			}

		} else if ( hooks && "get" in hooks && (ret = hooks.get( elem, name )) !== null ) {
			return ret;

		} else {
			ret = jQuery.find.attr( elem, name );

			// Non-existent attributes return null, we normalize to undefined
			return ret == null ?
				undefined :
				ret;
		}
	},

	removeAttr: function( elem, value ) {
		var name, propName,
			i = 0,
			attrNames = value && value.match( rnotwhite );

		if ( attrNames && elem.nodeType === 1 ) {
			while ( (name = attrNames[i++]) ) {
				propName = jQuery.propFix[ name ] || name;

				// Boolean attributes get special treatment (#10870)
				if ( jQuery.expr.match.bool.test( name ) ) {
					// Set corresponding property to false
					elem[ propName ] = false;
				}

				elem.removeAttribute( name );
			}
		}
	},

	attrHooks: {
		type: {
			set: function( elem, value ) {
				if ( !support.radioValue && value === "radio" &&
					jQuery.nodeName( elem, "input" ) ) {
					var val = elem.value;
					elem.setAttribute( "type", value );
					if ( val ) {
						elem.value = val;
					}
					return value;
				}
			}
		}
	}
});

// Hooks for boolean attributes
boolHook = {
	set: function( elem, value, name ) {
		if ( value === false ) {
			// Remove boolean attributes when set to false
			jQuery.removeAttr( elem, name );
		} else {
			elem.setAttribute( name, name );
		}
		return name;
	}
};
jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( i, name ) {
	var getter = attrHandle[ name ] || jQuery.find.attr;

	attrHandle[ name ] = function( elem, name, isXML ) {
		var ret, handle;
		if ( !isXML ) {
			// Avoid an infinite loop by temporarily removing this function from the getter
			handle = attrHandle[ name ];
			attrHandle[ name ] = ret;
			ret = getter( elem, name, isXML ) != null ?
				name.toLowerCase() :
				null;
			attrHandle[ name ] = handle;
		}
		return ret;
	};
});




var rfocusable = /^(?:input|select|textarea|button)$/i;

jQuery.fn.extend({
	prop: function( name, value ) {
		return access( this, jQuery.prop, name, value, arguments.length > 1 );
	},

	removeProp: function( name ) {
		return this.each(function() {
			delete this[ jQuery.propFix[ name ] || name ];
		});
	}
});

jQuery.extend({
	propFix: {
		"for": "htmlFor",
		"class": "className"
	},

	prop: function( elem, name, value ) {
		var ret, hooks, notxml,
			nType = elem.nodeType;

		// Don't get/set properties on text, comment and attribute nodes
		if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		notxml = nType !== 1 || !jQuery.isXMLDoc( elem );

		if ( notxml ) {
			// Fix name and attach hooks
			name = jQuery.propFix[ name ] || name;
			hooks = jQuery.propHooks[ name ];
		}

		if ( value !== undefined ) {
			return hooks && "set" in hooks && (ret = hooks.set( elem, value, name )) !== undefined ?
				ret :
				( elem[ name ] = value );

		} else {
			return hooks && "get" in hooks && (ret = hooks.get( elem, name )) !== null ?
				ret :
				elem[ name ];
		}
	},

	propHooks: {
		tabIndex: {
			get: function( elem ) {
				return elem.hasAttribute( "tabindex" ) || rfocusable.test( elem.nodeName ) || elem.href ?
					elem.tabIndex :
					-1;
			}
		}
	}
});

if ( !support.optSelected ) {
	jQuery.propHooks.selected = {
		get: function( elem ) {
			var parent = elem.parentNode;
			if ( parent && parent.parentNode ) {
				parent.parentNode.selectedIndex;
			}
			return null;
		}
	};
}

jQuery.each([
	"tabIndex",
	"readOnly",
	"maxLength",
	"cellSpacing",
	"cellPadding",
	"rowSpan",
	"colSpan",
	"useMap",
	"frameBorder",
	"contentEditable"
], function() {
	jQuery.propFix[ this.toLowerCase() ] = this;
});




var rclass = /[\t\r\n\f]/g;

jQuery.fn.extend({
	addClass: function( value ) {
		var classes, elem, cur, clazz, j, finalValue,
			proceed = typeof value === "string" && value,
			i = 0,
			len = this.length;

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( j ) {
				jQuery( this ).addClass( value.call( this, j, this.className ) );
			});
		}

		if ( proceed ) {
			// The disjunction here is for better compressibility (see removeClass)
			classes = ( value || "" ).match( rnotwhite ) || [];

			for ( ; i < len; i++ ) {
				elem = this[ i ];
				cur = elem.nodeType === 1 && ( elem.className ?
					( " " + elem.className + " " ).replace( rclass, " " ) :
					" "
				);

				if ( cur ) {
					j = 0;
					while ( (clazz = classes[j++]) ) {
						if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
							cur += clazz + " ";
						}
					}

					// only assign if different to avoid unneeded rendering.
					finalValue = jQuery.trim( cur );
					if ( elem.className !== finalValue ) {
						elem.className = finalValue;
					}
				}
			}
		}

		return this;
	},

	removeClass: function( value ) {
		var classes, elem, cur, clazz, j, finalValue,
			proceed = arguments.length === 0 || typeof value === "string" && value,
			i = 0,
			len = this.length;

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( j ) {
				jQuery( this ).removeClass( value.call( this, j, this.className ) );
			});
		}
		if ( proceed ) {
			classes = ( value || "" ).match( rnotwhite ) || [];

			for ( ; i < len; i++ ) {
				elem = this[ i ];
				// This expression is here for better compressibility (see addClass)
				cur = elem.nodeType === 1 && ( elem.className ?
					( " " + elem.className + " " ).replace( rclass, " " ) :
					""
				);

				if ( cur ) {
					j = 0;
					while ( (clazz = classes[j++]) ) {
						// Remove *all* instances
						while ( cur.indexOf( " " + clazz + " " ) >= 0 ) {
							cur = cur.replace( " " + clazz + " ", " " );
						}
					}

					// Only assign if different to avoid unneeded rendering.
					finalValue = value ? jQuery.trim( cur ) : "";
					if ( elem.className !== finalValue ) {
						elem.className = finalValue;
					}
				}
			}
		}

		return this;
	},

	toggleClass: function( value, stateVal ) {
		var type = typeof value;

		if ( typeof stateVal === "boolean" && type === "string" ) {
			return stateVal ? this.addClass( value ) : this.removeClass( value );
		}

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( i ) {
				jQuery( this ).toggleClass( value.call(this, i, this.className, stateVal), stateVal );
			});
		}

		return this.each(function() {
			if ( type === "string" ) {
				// Toggle individual class names
				var className,
					i = 0,
					self = jQuery( this ),
					classNames = value.match( rnotwhite ) || [];

				while ( (className = classNames[ i++ ]) ) {
					// Check each className given, space separated list
					if ( self.hasClass( className ) ) {
						self.removeClass( className );
					} else {
						self.addClass( className );
					}
				}

			// Toggle whole class name
			} else if ( type === strundefined || type === "boolean" ) {
				if ( this.className ) {
					// store className if set
					data_priv.set( this, "__className__", this.className );
				}

				// If the element has a class name or if we're passed `false`,
				// then remove the whole classname (if there was one, the above saved it).
				// Otherwise bring back whatever was previously saved (if anything),
				// falling back to the empty string if nothing was stored.
				this.className = this.className || value === false ? "" : data_priv.get( this, "__className__" ) || "";
			}
		});
	},

	hasClass: function( selector ) {
		var className = " " + selector + " ",
			i = 0,
			l = this.length;
		for ( ; i < l; i++ ) {
			if ( this[i].nodeType === 1 && (" " + this[i].className + " ").replace(rclass, " ").indexOf( className ) >= 0 ) {
				return true;
			}
		}

		return false;
	}
});




var rreturn = /\r/g;

jQuery.fn.extend({
	val: function( value ) {
		var hooks, ret, isFunction,
			elem = this[0];

		if ( !arguments.length ) {
			if ( elem ) {
				hooks = jQuery.valHooks[ elem.type ] || jQuery.valHooks[ elem.nodeName.toLowerCase() ];

				if ( hooks && "get" in hooks && (ret = hooks.get( elem, "value" )) !== undefined ) {
					return ret;
				}

				ret = elem.value;

				return typeof ret === "string" ?
					// Handle most common string cases
					ret.replace(rreturn, "") :
					// Handle cases where value is null/undef or number
					ret == null ? "" : ret;
			}

			return;
		}

		isFunction = jQuery.isFunction( value );

		return this.each(function( i ) {
			var val;

			if ( this.nodeType !== 1 ) {
				return;
			}

			if ( isFunction ) {
				val = value.call( this, i, jQuery( this ).val() );
			} else {
				val = value;
			}

			// Treat null/undefined as ""; convert numbers to string
			if ( val == null ) {
				val = "";

			} else if ( typeof val === "number" ) {
				val += "";

			} else if ( jQuery.isArray( val ) ) {
				val = jQuery.map( val, function( value ) {
					return value == null ? "" : value + "";
				});
			}

			hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

			// If set returns undefined, fall back to normal setting
			if ( !hooks || !("set" in hooks) || hooks.set( this, val, "value" ) === undefined ) {
				this.value = val;
			}
		});
	}
});

jQuery.extend({
	valHooks: {
		option: {
			get: function( elem ) {
				var val = jQuery.find.attr( elem, "value" );
				return val != null ?
					val :
					// Support: IE10-11+
					// option.text throws exceptions (#14686, #14858)
					jQuery.trim( jQuery.text( elem ) );
			}
		},
		select: {
			get: function( elem ) {
				var value, option,
					options = elem.options,
					index = elem.selectedIndex,
					one = elem.type === "select-one" || index < 0,
					values = one ? null : [],
					max = one ? index + 1 : options.length,
					i = index < 0 ?
						max :
						one ? index : 0;

				// Loop through all the selected options
				for ( ; i < max; i++ ) {
					option = options[ i ];

					// IE6-9 doesn't update selected after form reset (#2551)
					if ( ( option.selected || i === index ) &&
							// Don't return options that are disabled or in a disabled optgroup
							( support.optDisabled ? !option.disabled : option.getAttribute( "disabled" ) === null ) &&
							( !option.parentNode.disabled || !jQuery.nodeName( option.parentNode, "optgroup" ) ) ) {

						// Get the specific value for the option
						value = jQuery( option ).val();

						// We don't need an array for one selects
						if ( one ) {
							return value;
						}

						// Multi-Selects return an array
						values.push( value );
					}
				}

				return values;
			},

			set: function( elem, value ) {
				var optionSet, option,
					options = elem.options,
					values = jQuery.makeArray( value ),
					i = options.length;

				while ( i-- ) {
					option = options[ i ];
					if ( (option.selected = jQuery.inArray( option.value, values ) >= 0) ) {
						optionSet = true;
					}
				}

				// Force browsers to behave consistently when non-matching value is set
				if ( !optionSet ) {
					elem.selectedIndex = -1;
				}
				return values;
			}
		}
	}
});

// Radios and checkboxes getter/setter
jQuery.each([ "radio", "checkbox" ], function() {
	jQuery.valHooks[ this ] = {
		set: function( elem, value ) {
			if ( jQuery.isArray( value ) ) {
				return ( elem.checked = jQuery.inArray( jQuery(elem).val(), value ) >= 0 );
			}
		}
	};
	if ( !support.checkOn ) {
		jQuery.valHooks[ this ].get = function( elem ) {
			return elem.getAttribute("value") === null ? "on" : elem.value;
		};
	}
});




// Return jQuery for attributes-only inclusion


jQuery.each( ("blur focus focusin focusout load resize scroll unload click dblclick " +
	"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
	"change select submit keydown keypress keyup error contextmenu").split(" "), function( i, name ) {

	// Handle event binding
	jQuery.fn[ name ] = function( data, fn ) {
		return arguments.length > 0 ?
			this.on( name, null, data, fn ) :
			this.trigger( name );
	};
});

jQuery.fn.extend({
	hover: function( fnOver, fnOut ) {
		return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
	},

	bind: function( types, data, fn ) {
		return this.on( types, null, data, fn );
	},
	unbind: function( types, fn ) {
		return this.off( types, null, fn );
	},

	delegate: function( selector, types, data, fn ) {
		return this.on( types, selector, data, fn );
	},
	undelegate: function( selector, types, fn ) {
		// ( namespace ) or ( selector, types [, fn] )
		return arguments.length === 1 ? this.off( selector, "**" ) : this.off( types, selector || "**", fn );
	}
});


var nonce = jQuery.now();

var rquery = (/\?/);



// Support: Android 2.3
// Workaround failure to string-cast null input
jQuery.parseJSON = function( data ) {
	return JSON.parse( data + "" );
};


// Cross-browser xml parsing
jQuery.parseXML = function( data ) {
	var xml, tmp;
	if ( !data || typeof data !== "string" ) {
		return null;
	}

	// Support: IE9
	try {
		tmp = new DOMParser();
		xml = tmp.parseFromString( data, "text/xml" );
	} catch ( e ) {
		xml = undefined;
	}

	if ( !xml || xml.getElementsByTagName( "parsererror" ).length ) {
		jQuery.error( "Invalid XML: " + data );
	}
	return xml;
};


var
	rhash = /#.*$/,
	rts = /([?&])_=[^&]*/,
	rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,
	// #7653, #8125, #8152: local protocol detection
	rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
	rnoContent = /^(?:GET|HEAD)$/,
	rprotocol = /^\/\//,
	rurl = /^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/,

	/* Prefilters
	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
	 * 2) These are called:
	 *    - BEFORE asking for a transport
	 *    - AFTER param serialization (s.data is a string if s.processData is true)
	 * 3) key is the dataType
	 * 4) the catchall symbol "*" can be used
	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
	 */
	prefilters = {},

	/* Transports bindings
	 * 1) key is the dataType
	 * 2) the catchall symbol "*" can be used
	 * 3) selection will start with transport dataType and THEN go to "*" if needed
	 */
	transports = {},

	// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
	allTypes = "*/".concat( "*" ),

	// Document location
	ajaxLocation = window.location.href,

	// Segment location into parts
	ajaxLocParts = rurl.exec( ajaxLocation.toLowerCase() ) || [];

// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
function addToPrefiltersOrTransports( structure ) {

	// dataTypeExpression is optional and defaults to "*"
	return function( dataTypeExpression, func ) {

		if ( typeof dataTypeExpression !== "string" ) {
			func = dataTypeExpression;
			dataTypeExpression = "*";
		}

		var dataType,
			i = 0,
			dataTypes = dataTypeExpression.toLowerCase().match( rnotwhite ) || [];

		if ( jQuery.isFunction( func ) ) {
			// For each dataType in the dataTypeExpression
			while ( (dataType = dataTypes[i++]) ) {
				// Prepend if requested
				if ( dataType[0] === "+" ) {
					dataType = dataType.slice( 1 ) || "*";
					(structure[ dataType ] = structure[ dataType ] || []).unshift( func );

				// Otherwise append
				} else {
					(structure[ dataType ] = structure[ dataType ] || []).push( func );
				}
			}
		}
	};
}

// Base inspection function for prefilters and transports
function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

	var inspected = {},
		seekingTransport = ( structure === transports );

	function inspect( dataType ) {
		var selected;
		inspected[ dataType ] = true;
		jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
			var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
			if ( typeof dataTypeOrTransport === "string" && !seekingTransport && !inspected[ dataTypeOrTransport ] ) {
				options.dataTypes.unshift( dataTypeOrTransport );
				inspect( dataTypeOrTransport );
				return false;
			} else if ( seekingTransport ) {
				return !( selected = dataTypeOrTransport );
			}
		});
		return selected;
	}

	return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
}

// A special extend for ajax options
// that takes "flat" options (not to be deep extended)
// Fixes #9887
function ajaxExtend( target, src ) {
	var key, deep,
		flatOptions = jQuery.ajaxSettings.flatOptions || {};

	for ( key in src ) {
		if ( src[ key ] !== undefined ) {
			( flatOptions[ key ] ? target : ( deep || (deep = {}) ) )[ key ] = src[ key ];
		}
	}
	if ( deep ) {
		jQuery.extend( true, target, deep );
	}

	return target;
}

/* Handles responses to an ajax request:
 * - finds the right dataType (mediates between content-type and expected dataType)
 * - returns the corresponding response
 */
function ajaxHandleResponses( s, jqXHR, responses ) {

	var ct, type, finalDataType, firstDataType,
		contents = s.contents,
		dataTypes = s.dataTypes;

	// Remove auto dataType and get content-type in the process
	while ( dataTypes[ 0 ] === "*" ) {
		dataTypes.shift();
		if ( ct === undefined ) {
			ct = s.mimeType || jqXHR.getResponseHeader("Content-Type");
		}
	}

	// Check if we're dealing with a known content-type
	if ( ct ) {
		for ( type in contents ) {
			if ( contents[ type ] && contents[ type ].test( ct ) ) {
				dataTypes.unshift( type );
				break;
			}
		}
	}

	// Check to see if we have a response for the expected dataType
	if ( dataTypes[ 0 ] in responses ) {
		finalDataType = dataTypes[ 0 ];
	} else {
		// Try convertible dataTypes
		for ( type in responses ) {
			if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[0] ] ) {
				finalDataType = type;
				break;
			}
			if ( !firstDataType ) {
				firstDataType = type;
			}
		}
		// Or just use first one
		finalDataType = finalDataType || firstDataType;
	}

	// If we found a dataType
	// We add the dataType to the list if needed
	// and return the corresponding response
	if ( finalDataType ) {
		if ( finalDataType !== dataTypes[ 0 ] ) {
			dataTypes.unshift( finalDataType );
		}
		return responses[ finalDataType ];
	}
}

/* Chain conversions given the request and the original response
 * Also sets the responseXXX fields on the jqXHR instance
 */
function ajaxConvert( s, response, jqXHR, isSuccess ) {
	var conv2, current, conv, tmp, prev,
		converters = {},
		// Work with a copy of dataTypes in case we need to modify it for conversion
		dataTypes = s.dataTypes.slice();

	// Create converters map with lowercased keys
	if ( dataTypes[ 1 ] ) {
		for ( conv in s.converters ) {
			converters[ conv.toLowerCase() ] = s.converters[ conv ];
		}
	}

	current = dataTypes.shift();

	// Convert to each sequential dataType
	while ( current ) {

		if ( s.responseFields[ current ] ) {
			jqXHR[ s.responseFields[ current ] ] = response;
		}

		// Apply the dataFilter if provided
		if ( !prev && isSuccess && s.dataFilter ) {
			response = s.dataFilter( response, s.dataType );
		}

		prev = current;
		current = dataTypes.shift();

		if ( current ) {

		// There's only work to do if current dataType is non-auto
			if ( current === "*" ) {

				current = prev;

			// Convert response if prev dataType is non-auto and differs from current
			} else if ( prev !== "*" && prev !== current ) {

				// Seek a direct converter
				conv = converters[ prev + " " + current ] || converters[ "* " + current ];

				// If none found, seek a pair
				if ( !conv ) {
					for ( conv2 in converters ) {

						// If conv2 outputs current
						tmp = conv2.split( " " );
						if ( tmp[ 1 ] === current ) {

							// If prev can be converted to accepted input
							conv = converters[ prev + " " + tmp[ 0 ] ] ||
								converters[ "* " + tmp[ 0 ] ];
							if ( conv ) {
								// Condense equivalence converters
								if ( conv === true ) {
									conv = converters[ conv2 ];

								// Otherwise, insert the intermediate dataType
								} else if ( converters[ conv2 ] !== true ) {
									current = tmp[ 0 ];
									dataTypes.unshift( tmp[ 1 ] );
								}
								break;
							}
						}
					}
				}

				// Apply converter (if not an equivalence)
				if ( conv !== true ) {

					// Unless errors are allowed to bubble, catch and return them
					if ( conv && s[ "throws" ] ) {
						response = conv( response );
					} else {
						try {
							response = conv( response );
						} catch ( e ) {
							return { state: "parsererror", error: conv ? e : "No conversion from " + prev + " to " + current };
						}
					}
				}
			}
		}
	}

	return { state: "success", data: response };
}

jQuery.extend({

	// Counter for holding the number of active queries
	active: 0,

	// Last-Modified header cache for next request
	lastModified: {},
	etag: {},

	ajaxSettings: {
		url: ajaxLocation,
		type: "GET",
		isLocal: rlocalProtocol.test( ajaxLocParts[ 1 ] ),
		global: true,
		processData: true,
		async: true,
		contentType: "application/x-www-form-urlencoded; charset=UTF-8",
		/*
		timeout: 0,
		data: null,
		dataType: null,
		username: null,
		password: null,
		cache: null,
		throws: false,
		traditional: false,
		headers: {},
		*/

		accepts: {
			"*": allTypes,
			text: "text/plain",
			html: "text/html",
			xml: "application/xml, text/xml",
			json: "application/json, text/javascript"
		},

		contents: {
			xml: /xml/,
			html: /html/,
			json: /json/
		},

		responseFields: {
			xml: "responseXML",
			text: "responseText",
			json: "responseJSON"
		},

		// Data converters
		// Keys separate source (or catchall "*") and destination types with a single space
		converters: {

			// Convert anything to text
			"* text": String,

			// Text to html (true = no transformation)
			"text html": true,

			// Evaluate text as a json expression
			"text json": jQuery.parseJSON,

			// Parse text as xml
			"text xml": jQuery.parseXML
		},

		// For options that shouldn't be deep extended:
		// you can add your own custom options here if
		// and when you create one that shouldn't be
		// deep extended (see ajaxExtend)
		flatOptions: {
			url: true,
			context: true
		}
	},

	// Creates a full fledged settings object into target
	// with both ajaxSettings and settings fields.
	// If target is omitted, writes into ajaxSettings.
	ajaxSetup: function( target, settings ) {
		return settings ?

			// Building a settings object
			ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :

			// Extending ajaxSettings
			ajaxExtend( jQuery.ajaxSettings, target );
	},

	ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
	ajaxTransport: addToPrefiltersOrTransports( transports ),

	// Main method
	ajax: function( url, options ) {

		// If url is an object, simulate pre-1.5 signature
		if ( typeof url === "object" ) {
			options = url;
			url = undefined;
		}

		// Force options to be an object
		options = options || {};

		var transport,
			// URL without anti-cache param
			cacheURL,
			// Response headers
			responseHeadersString,
			responseHeaders,
			// timeout handle
			timeoutTimer,
			// Cross-domain detection vars
			parts,
			// To know if global events are to be dispatched
			fireGlobals,
			// Loop variable
			i,
			// Create the final options object
			s = jQuery.ajaxSetup( {}, options ),
			// Callbacks context
			callbackContext = s.context || s,
			// Context for global events is callbackContext if it is a DOM node or jQuery collection
			globalEventContext = s.context && ( callbackContext.nodeType || callbackContext.jquery ) ?
				jQuery( callbackContext ) :
				jQuery.event,
			// Deferreds
			deferred = jQuery.Deferred(),
			completeDeferred = jQuery.Callbacks("once memory"),
			// Status-dependent callbacks
			statusCode = s.statusCode || {},
			// Headers (they are sent all at once)
			requestHeaders = {},
			requestHeadersNames = {},
			// The jqXHR state
			state = 0,
			// Default abort message
			strAbort = "canceled",
			// Fake xhr
			jqXHR = {
				readyState: 0,

				// Builds headers hashtable if needed
				getResponseHeader: function( key ) {
					var match;
					if ( state === 2 ) {
						if ( !responseHeaders ) {
							responseHeaders = {};
							while ( (match = rheaders.exec( responseHeadersString )) ) {
								responseHeaders[ match[1].toLowerCase() ] = match[ 2 ];
							}
						}
						match = responseHeaders[ key.toLowerCase() ];
					}
					return match == null ? null : match;
				},

				// Raw string
				getAllResponseHeaders: function() {
					return state === 2 ? responseHeadersString : null;
				},

				// Caches the header
				setRequestHeader: function( name, value ) {
					var lname = name.toLowerCase();
					if ( !state ) {
						name = requestHeadersNames[ lname ] = requestHeadersNames[ lname ] || name;
						requestHeaders[ name ] = value;
					}
					return this;
				},

				// Overrides response content-type header
				overrideMimeType: function( type ) {
					if ( !state ) {
						s.mimeType = type;
					}
					return this;
				},

				// Status-dependent callbacks
				statusCode: function( map ) {
					var code;
					if ( map ) {
						if ( state < 2 ) {
							for ( code in map ) {
								// Lazy-add the new callback in a way that preserves old ones
								statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
							}
						} else {
							// Execute the appropriate callbacks
							jqXHR.always( map[ jqXHR.status ] );
						}
					}
					return this;
				},

				// Cancel the request
				abort: function( statusText ) {
					var finalText = statusText || strAbort;
					if ( transport ) {
						transport.abort( finalText );
					}
					done( 0, finalText );
					return this;
				}
			};

		// Attach deferreds
		deferred.promise( jqXHR ).complete = completeDeferred.add;
		jqXHR.success = jqXHR.done;
		jqXHR.error = jqXHR.fail;

		// Remove hash character (#7531: and string promotion)
		// Add protocol if not provided (prefilters might expect it)
		// Handle falsy url in the settings object (#10093: consistency with old signature)
		// We also use the url parameter if available
		s.url = ( ( url || s.url || ajaxLocation ) + "" ).replace( rhash, "" )
			.replace( rprotocol, ajaxLocParts[ 1 ] + "//" );

		// Alias method option to type as per ticket #12004
		s.type = options.method || options.type || s.method || s.type;

		// Extract dataTypes list
		s.dataTypes = jQuery.trim( s.dataType || "*" ).toLowerCase().match( rnotwhite ) || [ "" ];

		// A cross-domain request is in order when we have a protocol:host:port mismatch
		if ( s.crossDomain == null ) {
			parts = rurl.exec( s.url.toLowerCase() );
			s.crossDomain = !!( parts &&
				( parts[ 1 ] !== ajaxLocParts[ 1 ] || parts[ 2 ] !== ajaxLocParts[ 2 ] ||
					( parts[ 3 ] || ( parts[ 1 ] === "http:" ? "80" : "443" ) ) !==
						( ajaxLocParts[ 3 ] || ( ajaxLocParts[ 1 ] === "http:" ? "80" : "443" ) ) )
			);
		}

		// Convert data if not already a string
		if ( s.data && s.processData && typeof s.data !== "string" ) {
			s.data = jQuery.param( s.data, s.traditional );
		}

		// Apply prefilters
		inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

		// If request was aborted inside a prefilter, stop there
		if ( state === 2 ) {
			return jqXHR;
		}

		// We can fire global events as of now if asked to
		// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
		fireGlobals = jQuery.event && s.global;

		// Watch for a new set of requests
		if ( fireGlobals && jQuery.active++ === 0 ) {
			jQuery.event.trigger("ajaxStart");
		}

		// Uppercase the type
		s.type = s.type.toUpperCase();

		// Determine if request has content
		s.hasContent = !rnoContent.test( s.type );

		// Save the URL in case we're toying with the If-Modified-Since
		// and/or If-None-Match header later on
		cacheURL = s.url;

		// More options handling for requests with no content
		if ( !s.hasContent ) {

			// If data is available, append data to url
			if ( s.data ) {
				cacheURL = ( s.url += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data );
				// #9682: remove data so that it's not used in an eventual retry
				delete s.data;
			}

			// Add anti-cache in url if needed
			if ( s.cache === false ) {
				s.url = rts.test( cacheURL ) ?

					// If there is already a '_' parameter, set its value
					cacheURL.replace( rts, "$1_=" + nonce++ ) :

					// Otherwise add one to the end
					cacheURL + ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + nonce++;
			}
		}

		// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
		if ( s.ifModified ) {
			if ( jQuery.lastModified[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
			}
			if ( jQuery.etag[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
			}
		}

		// Set the correct header, if data is being sent
		if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
			jqXHR.setRequestHeader( "Content-Type", s.contentType );
		}

		// Set the Accepts header for the server, depending on the dataType
		jqXHR.setRequestHeader(
			"Accept",
			s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[0] ] ?
				s.accepts[ s.dataTypes[0] ] + ( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
				s.accepts[ "*" ]
		);

		// Check for headers option
		for ( i in s.headers ) {
			jqXHR.setRequestHeader( i, s.headers[ i ] );
		}

		// Allow custom headers/mimetypes and early abort
		if ( s.beforeSend && ( s.beforeSend.call( callbackContext, jqXHR, s ) === false || state === 2 ) ) {
			// Abort if not done already and return
			return jqXHR.abort();
		}

		// Aborting is no longer a cancellation
		strAbort = "abort";

		// Install callbacks on deferreds
		for ( i in { success: 1, error: 1, complete: 1 } ) {
			jqXHR[ i ]( s[ i ] );
		}

		// Get transport
		transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

		// If no transport, we auto-abort
		if ( !transport ) {
			done( -1, "No Transport" );
		} else {
			jqXHR.readyState = 1;

			// Send global event
			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
			}
			// Timeout
			if ( s.async && s.timeout > 0 ) {
				timeoutTimer = setTimeout(function() {
					jqXHR.abort("timeout");
				}, s.timeout );
			}

			try {
				state = 1;
				transport.send( requestHeaders, done );
			} catch ( e ) {
				// Propagate exception as error if not done
				if ( state < 2 ) {
					done( -1, e );
				// Simply rethrow otherwise
				} else {
					throw e;
				}
			}
		}

		// Callback for when everything is done
		function done( status, nativeStatusText, responses, headers ) {
			var isSuccess, success, error, response, modified,
				statusText = nativeStatusText;

			// Called once
			if ( state === 2 ) {
				return;
			}

			// State is "done" now
			state = 2;

			// Clear timeout if it exists
			if ( timeoutTimer ) {
				clearTimeout( timeoutTimer );
			}

			// Dereference transport for early garbage collection
			// (no matter how long the jqXHR object will be used)
			transport = undefined;

			// Cache response headers
			responseHeadersString = headers || "";

			// Set readyState
			jqXHR.readyState = status > 0 ? 4 : 0;

			// Determine if successful
			isSuccess = status >= 200 && status < 300 || status === 304;

			// Get response data
			if ( responses ) {
				response = ajaxHandleResponses( s, jqXHR, responses );
			}

			// Convert no matter what (that way responseXXX fields are always set)
			response = ajaxConvert( s, response, jqXHR, isSuccess );

			// If successful, handle type chaining
			if ( isSuccess ) {

				// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
				if ( s.ifModified ) {
					modified = jqXHR.getResponseHeader("Last-Modified");
					if ( modified ) {
						jQuery.lastModified[ cacheURL ] = modified;
					}
					modified = jqXHR.getResponseHeader("etag");
					if ( modified ) {
						jQuery.etag[ cacheURL ] = modified;
					}
				}

				// if no content
				if ( status === 204 || s.type === "HEAD" ) {
					statusText = "nocontent";

				// if not modified
				} else if ( status === 304 ) {
					statusText = "notmodified";

				// If we have data, let's convert it
				} else {
					statusText = response.state;
					success = response.data;
					error = response.error;
					isSuccess = !error;
				}
			} else {
				// Extract error from statusText and normalize for non-aborts
				error = statusText;
				if ( status || !statusText ) {
					statusText = "error";
					if ( status < 0 ) {
						status = 0;
					}
				}
			}

			// Set data for the fake xhr object
			jqXHR.status = status;
			jqXHR.statusText = ( nativeStatusText || statusText ) + "";

			// Success/Error
			if ( isSuccess ) {
				deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
			} else {
				deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
			}

			// Status-dependent callbacks
			jqXHR.statusCode( statusCode );
			statusCode = undefined;

			if ( fireGlobals ) {
				globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
					[ jqXHR, s, isSuccess ? success : error ] );
			}

			// Complete
			completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );
				// Handle the global AJAX counter
				if ( !( --jQuery.active ) ) {
					jQuery.event.trigger("ajaxStop");
				}
			}
		}

		return jqXHR;
	},

	getJSON: function( url, data, callback ) {
		return jQuery.get( url, data, callback, "json" );
	},

	getScript: function( url, callback ) {
		return jQuery.get( url, undefined, callback, "script" );
	}
});

jQuery.each( [ "get", "post" ], function( i, method ) {
	jQuery[ method ] = function( url, data, callback, type ) {
		// Shift arguments if data argument was omitted
		if ( jQuery.isFunction( data ) ) {
			type = type || callback;
			callback = data;
			data = undefined;
		}

		return jQuery.ajax({
			url: url,
			type: method,
			dataType: type,
			data: data,
			success: callback
		});
	};
});


jQuery._evalUrl = function( url ) {
	return jQuery.ajax({
		url: url,
		type: "GET",
		dataType: "script",
		async: false,
		global: false,
		"throws": true
	});
};


jQuery.fn.extend({
	wrapAll: function( html ) {
		var wrap;

		if ( jQuery.isFunction( html ) ) {
			return this.each(function( i ) {
				jQuery( this ).wrapAll( html.call(this, i) );
			});
		}

		if ( this[ 0 ] ) {

			// The elements to wrap the target around
			wrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );

			if ( this[ 0 ].parentNode ) {
				wrap.insertBefore( this[ 0 ] );
			}

			wrap.map(function() {
				var elem = this;

				while ( elem.firstElementChild ) {
					elem = elem.firstElementChild;
				}

				return elem;
			}).append( this );
		}

		return this;
	},

	wrapInner: function( html ) {
		if ( jQuery.isFunction( html ) ) {
			return this.each(function( i ) {
				jQuery( this ).wrapInner( html.call(this, i) );
			});
		}

		return this.each(function() {
			var self = jQuery( this ),
				contents = self.contents();

			if ( contents.length ) {
				contents.wrapAll( html );

			} else {
				self.append( html );
			}
		});
	},

	wrap: function( html ) {
		var isFunction = jQuery.isFunction( html );

		return this.each(function( i ) {
			jQuery( this ).wrapAll( isFunction ? html.call(this, i) : html );
		});
	},

	unwrap: function() {
		return this.parent().each(function() {
			if ( !jQuery.nodeName( this, "body" ) ) {
				jQuery( this ).replaceWith( this.childNodes );
			}
		}).end();
	}
});


jQuery.expr.filters.hidden = function( elem ) {
	// Support: Opera <= 12.12
	// Opera reports offsetWidths and offsetHeights less than zero on some elements
	return elem.offsetWidth <= 0 && elem.offsetHeight <= 0;
};
jQuery.expr.filters.visible = function( elem ) {
	return !jQuery.expr.filters.hidden( elem );
};




var r20 = /%20/g,
	rbracket = /\[\]$/,
	rCRLF = /\r?\n/g,
	rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
	rsubmittable = /^(?:input|select|textarea|keygen)/i;

function buildParams( prefix, obj, traditional, add ) {
	var name;

	if ( jQuery.isArray( obj ) ) {
		// Serialize array item.
		jQuery.each( obj, function( i, v ) {
			if ( traditional || rbracket.test( prefix ) ) {
				// Treat each array item as a scalar.
				add( prefix, v );

			} else {
				// Item is non-scalar (array or object), encode its numeric index.
				buildParams( prefix + "[" + ( typeof v === "object" ? i : "" ) + "]", v, traditional, add );
			}
		});

	} else if ( !traditional && jQuery.type( obj ) === "object" ) {
		// Serialize object item.
		for ( name in obj ) {
			buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
		}

	} else {
		// Serialize scalar item.
		add( prefix, obj );
	}
}

// Serialize an array of form elements or a set of
// key/values into a query string
jQuery.param = function( a, traditional ) {
	var prefix,
		s = [],
		add = function( key, value ) {
			// If value is a function, invoke it and return its value
			value = jQuery.isFunction( value ) ? value() : ( value == null ? "" : value );
			s[ s.length ] = encodeURIComponent( key ) + "=" + encodeURIComponent( value );
		};

	// Set traditional to true for jQuery <= 1.3.2 behavior.
	if ( traditional === undefined ) {
		traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;
	}

	// If an array was passed in, assume that it is an array of form elements.
	if ( jQuery.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {
		// Serialize the form elements
		jQuery.each( a, function() {
			add( this.name, this.value );
		});

	} else {
		// If traditional, encode the "old" way (the way 1.3.2 or older
		// did it), otherwise encode params recursively.
		for ( prefix in a ) {
			buildParams( prefix, a[ prefix ], traditional, add );
		}
	}

	// Return the resulting serialization
	return s.join( "&" ).replace( r20, "+" );
};

jQuery.fn.extend({
	serialize: function() {
		return jQuery.param( this.serializeArray() );
	},
	serializeArray: function() {
		return this.map(function() {
			// Can add propHook for "elements" to filter or add form elements
			var elements = jQuery.prop( this, "elements" );
			return elements ? jQuery.makeArray( elements ) : this;
		})
		.filter(function() {
			var type = this.type;

			// Use .is( ":disabled" ) so that fieldset[disabled] works
			return this.name && !jQuery( this ).is( ":disabled" ) &&
				rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
				( this.checked || !rcheckableType.test( type ) );
		})
		.map(function( i, elem ) {
			var val = jQuery( this ).val();

			return val == null ?
				null :
				jQuery.isArray( val ) ?
					jQuery.map( val, function( val ) {
						return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
					}) :
					{ name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
		}).get();
	}
});


jQuery.ajaxSettings.xhr = function() {
	try {
		return new XMLHttpRequest();
	} catch( e ) {}
};

var xhrId = 0,
	xhrCallbacks = {},
	xhrSuccessStatus = {
		// file protocol always yields status code 0, assume 200
		0: 200,
		// Support: IE9
		// #1450: sometimes IE returns 1223 when it should be 204
		1223: 204
	},
	xhrSupported = jQuery.ajaxSettings.xhr();

// Support: IE9
// Open requests must be manually aborted on unload (#5280)
// See https://support.microsoft.com/kb/2856746 for more info
if ( window.attachEvent ) {
	window.attachEvent( "onunload", function() {
		for ( var key in xhrCallbacks ) {
			xhrCallbacks[ key ]();
		}
	});
}

support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
support.ajax = xhrSupported = !!xhrSupported;

jQuery.ajaxTransport(function( options ) {
	var callback;

	// Cross domain only allowed if supported through XMLHttpRequest
	if ( support.cors || xhrSupported && !options.crossDomain ) {
		return {
			send: function( headers, complete ) {
				var i,
					xhr = options.xhr(),
					id = ++xhrId;

				xhr.open( options.type, options.url, options.async, options.username, options.password );

				// Apply custom fields if provided
				if ( options.xhrFields ) {
					for ( i in options.xhrFields ) {
						xhr[ i ] = options.xhrFields[ i ];
					}
				}

				// Override mime type if needed
				if ( options.mimeType && xhr.overrideMimeType ) {
					xhr.overrideMimeType( options.mimeType );
				}

				// X-Requested-With header
				// For cross-domain requests, seeing as conditions for a preflight are
				// akin to a jigsaw puzzle, we simply never set it to be sure.
				// (it can always be set on a per-request basis or even using ajaxSetup)
				// For same-domain requests, won't change header if already provided.
				if ( !options.crossDomain && !headers["X-Requested-With"] ) {
					headers["X-Requested-With"] = "XMLHttpRequest";
				}

				// Set headers
				for ( i in headers ) {
					xhr.setRequestHeader( i, headers[ i ] );
				}

				// Callback
				callback = function( type ) {
					return function() {
						if ( callback ) {
							delete xhrCallbacks[ id ];
							callback = xhr.onload = xhr.onerror = null;

							if ( type === "abort" ) {
								xhr.abort();
							} else if ( type === "error" ) {
								complete(
									// file: protocol always yields status 0; see #8605, #14207
									xhr.status,
									xhr.statusText
								);
							} else {
								complete(
									xhrSuccessStatus[ xhr.status ] || xhr.status,
									xhr.statusText,
									// Support: IE9
									// Accessing binary-data responseText throws an exception
									// (#11426)
									typeof xhr.responseText === "string" ? {
										text: xhr.responseText
									} : undefined,
									xhr.getAllResponseHeaders()
								);
							}
						}
					};
				};

				// Listen to events
				xhr.onload = callback();
				xhr.onerror = callback("error");

				// Create the abort callback
				callback = xhrCallbacks[ id ] = callback("abort");

				try {
					// Do send the request (this may raise an exception)
					xhr.send( options.hasContent && options.data || null );
				} catch ( e ) {
					// #14683: Only rethrow if this hasn't been notified as an error yet
					if ( callback ) {
						throw e;
					}
				}
			},

			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
});




// Install script dataType
jQuery.ajaxSetup({
	accepts: {
		script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
	},
	contents: {
		script: /(?:java|ecma)script/
	},
	converters: {
		"text script": function( text ) {
			jQuery.globalEval( text );
			return text;
		}
	}
});

// Handle cache's special case and crossDomain
jQuery.ajaxPrefilter( "script", function( s ) {
	if ( s.cache === undefined ) {
		s.cache = false;
	}
	if ( s.crossDomain ) {
		s.type = "GET";
	}
});

// Bind script tag hack transport
jQuery.ajaxTransport( "script", function( s ) {
	// This transport only deals with cross domain requests
	if ( s.crossDomain ) {
		var script, callback;
		return {
			send: function( _, complete ) {
				script = jQuery("<script>").prop({
					async: true,
					charset: s.scriptCharset,
					src: s.url
				}).on(
					"load error",
					callback = function( evt ) {
						script.remove();
						callback = null;
						if ( evt ) {
							complete( evt.type === "error" ? 404 : 200, evt.type );
						}
					}
				);
				document.head.appendChild( script[ 0 ] );
			},
			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
});




var oldCallbacks = [],
	rjsonp = /(=)\?(?=&|$)|\?\?/;

// Default jsonp settings
jQuery.ajaxSetup({
	jsonp: "callback",
	jsonpCallback: function() {
		var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce++ ) );
		this[ callback ] = true;
		return callback;
	}
});

// Detect, normalize options and install callbacks for jsonp requests
jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

	var callbackName, overwritten, responseContainer,
		jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
			"url" :
			typeof s.data === "string" && !( s.contentType || "" ).indexOf("application/x-www-form-urlencoded") && rjsonp.test( s.data ) && "data"
		);

	// Handle iff the expected data type is "jsonp" or we have a parameter to set
	if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {

		// Get callback name, remembering preexisting value associated with it
		callbackName = s.jsonpCallback = jQuery.isFunction( s.jsonpCallback ) ?
			s.jsonpCallback() :
			s.jsonpCallback;

		// Insert callback into url or form data
		if ( jsonProp ) {
			s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
		} else if ( s.jsonp !== false ) {
			s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
		}

		// Use data converter to retrieve json after script execution
		s.converters["script json"] = function() {
			if ( !responseContainer ) {
				jQuery.error( callbackName + " was not called" );
			}
			return responseContainer[ 0 ];
		};

		// force json dataType
		s.dataTypes[ 0 ] = "json";

		// Install callback
		overwritten = window[ callbackName ];
		window[ callbackName ] = function() {
			responseContainer = arguments;
		};

		// Clean-up function (fires after converters)
		jqXHR.always(function() {
			// Restore preexisting value
			window[ callbackName ] = overwritten;

			// Save back as free
			if ( s[ callbackName ] ) {
				// make sure that re-using the options doesn't screw things around
				s.jsonpCallback = originalSettings.jsonpCallback;

				// save the callback name for future use
				oldCallbacks.push( callbackName );
			}

			// Call if it was a function and we have a response
			if ( responseContainer && jQuery.isFunction( overwritten ) ) {
				overwritten( responseContainer[ 0 ] );
			}

			responseContainer = overwritten = undefined;
		});

		// Delegate to script
		return "script";
	}
});




// data: string of html
// context (optional): If specified, the fragment will be created in this context, defaults to document
// keepScripts (optional): If true, will include scripts passed in the html string
jQuery.parseHTML = function( data, context, keepScripts ) {
	if ( !data || typeof data !== "string" ) {
		return null;
	}
	if ( typeof context === "boolean" ) {
		keepScripts = context;
		context = false;
	}
	context = context || document;

	var parsed = rsingleTag.exec( data ),
		scripts = !keepScripts && [];

	// Single tag
	if ( parsed ) {
		return [ context.createElement( parsed[1] ) ];
	}

	parsed = jQuery.buildFragment( [ data ], context, scripts );

	if ( scripts && scripts.length ) {
		jQuery( scripts ).remove();
	}

	return jQuery.merge( [], parsed.childNodes );
};


// Keep a copy of the old load method
var _load = jQuery.fn.load;

/**
 * Load a url into a page
 */
jQuery.fn.load = function( url, params, callback ) {
	if ( typeof url !== "string" && _load ) {
		return _load.apply( this, arguments );
	}

	var selector, type, response,
		self = this,
		off = url.indexOf(" ");

	if ( off >= 0 ) {
		selector = jQuery.trim( url.slice( off ) );
		url = url.slice( 0, off );
	}

	// If it's a function
	if ( jQuery.isFunction( params ) ) {

		// We assume that it's the callback
		callback = params;
		params = undefined;

	// Otherwise, build a param string
	} else if ( params && typeof params === "object" ) {
		type = "POST";
	}

	// If we have elements to modify, make the request
	if ( self.length > 0 ) {
		jQuery.ajax({
			url: url,

			// if "type" variable is undefined, then "GET" method will be used
			type: type,
			dataType: "html",
			data: params
		}).done(function( responseText ) {

			// Save response for use in complete callback
			response = arguments;

			self.html( selector ?

				// If a selector was specified, locate the right elements in a dummy div
				// Exclude scripts to avoid IE 'Permission Denied' errors
				jQuery("<div>").append( jQuery.parseHTML( responseText ) ).find( selector ) :

				// Otherwise use the full result
				responseText );

		}).complete( callback && function( jqXHR, status ) {
			self.each( callback, response || [ jqXHR.responseText, status, jqXHR ] );
		});
	}

	return this;
};




// Attach a bunch of functions for handling common AJAX events
jQuery.each( [ "ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend" ], function( i, type ) {
	jQuery.fn[ type ] = function( fn ) {
		return this.on( type, fn );
	};
});




jQuery.expr.filters.animated = function( elem ) {
	return jQuery.grep(jQuery.timers, function( fn ) {
		return elem === fn.elem;
	}).length;
};




var docElem = window.document.documentElement;

/**
 * Gets a window from an element
 */
function getWindow( elem ) {
	return jQuery.isWindow( elem ) ? elem : elem.nodeType === 9 && elem.defaultView;
}

jQuery.offset = {
	setOffset: function( elem, options, i ) {
		var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
			position = jQuery.css( elem, "position" ),
			curElem = jQuery( elem ),
			props = {};

		// Set position first, in-case top/left are set even on static elem
		if ( position === "static" ) {
			elem.style.position = "relative";
		}

		curOffset = curElem.offset();
		curCSSTop = jQuery.css( elem, "top" );
		curCSSLeft = jQuery.css( elem, "left" );
		calculatePosition = ( position === "absolute" || position === "fixed" ) &&
			( curCSSTop + curCSSLeft ).indexOf("auto") > -1;

		// Need to be able to calculate position if either
		// top or left is auto and position is either absolute or fixed
		if ( calculatePosition ) {
			curPosition = curElem.position();
			curTop = curPosition.top;
			curLeft = curPosition.left;

		} else {
			curTop = parseFloat( curCSSTop ) || 0;
			curLeft = parseFloat( curCSSLeft ) || 0;
		}

		if ( jQuery.isFunction( options ) ) {
			options = options.call( elem, i, curOffset );
		}

		if ( options.top != null ) {
			props.top = ( options.top - curOffset.top ) + curTop;
		}
		if ( options.left != null ) {
			props.left = ( options.left - curOffset.left ) + curLeft;
		}

		if ( "using" in options ) {
			options.using.call( elem, props );

		} else {
			curElem.css( props );
		}
	}
};

jQuery.fn.extend({
	offset: function( options ) {
		if ( arguments.length ) {
			return options === undefined ?
				this :
				this.each(function( i ) {
					jQuery.offset.setOffset( this, options, i );
				});
		}

		var docElem, win,
			elem = this[ 0 ],
			box = { top: 0, left: 0 },
			doc = elem && elem.ownerDocument;

		if ( !doc ) {
			return;
		}

		docElem = doc.documentElement;

		// Make sure it's not a disconnected DOM node
		if ( !jQuery.contains( docElem, elem ) ) {
			return box;
		}

		// Support: BlackBerry 5, iOS 3 (original iPhone)
		// If we don't have gBCR, just use 0,0 rather than error
		if ( typeof elem.getBoundingClientRect !== strundefined ) {
			box = elem.getBoundingClientRect();
		}
		win = getWindow( doc );
		return {
			top: box.top + win.pageYOffset - docElem.clientTop,
			left: box.left + win.pageXOffset - docElem.clientLeft
		};
	},

	position: function() {
		if ( !this[ 0 ] ) {
			return;
		}

		var offsetParent, offset,
			elem = this[ 0 ],
			parentOffset = { top: 0, left: 0 };

		// Fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is its only offset parent
		if ( jQuery.css( elem, "position" ) === "fixed" ) {
			// Assume getBoundingClientRect is there when computed position is fixed
			offset = elem.getBoundingClientRect();

		} else {
			// Get *real* offsetParent
			offsetParent = this.offsetParent();

			// Get correct offsets
			offset = this.offset();
			if ( !jQuery.nodeName( offsetParent[ 0 ], "html" ) ) {
				parentOffset = offsetParent.offset();
			}

			// Add offsetParent borders
			parentOffset.top += jQuery.css( offsetParent[ 0 ], "borderTopWidth", true );
			parentOffset.left += jQuery.css( offsetParent[ 0 ], "borderLeftWidth", true );
		}

		// Subtract parent offsets and element margins
		return {
			top: offset.top - parentOffset.top - jQuery.css( elem, "marginTop", true ),
			left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true )
		};
	},

	offsetParent: function() {
		return this.map(function() {
			var offsetParent = this.offsetParent || docElem;

			while ( offsetParent && ( !jQuery.nodeName( offsetParent, "html" ) && jQuery.css( offsetParent, "position" ) === "static" ) ) {
				offsetParent = offsetParent.offsetParent;
			}

			return offsetParent || docElem;
		});
	}
});

// Create scrollLeft and scrollTop methods
jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {
	var top = "pageYOffset" === prop;

	jQuery.fn[ method ] = function( val ) {
		return access( this, function( elem, method, val ) {
			var win = getWindow( elem );

			if ( val === undefined ) {
				return win ? win[ prop ] : elem[ method ];
			}

			if ( win ) {
				win.scrollTo(
					!top ? val : window.pageXOffset,
					top ? val : window.pageYOffset
				);

			} else {
				elem[ method ] = val;
			}
		}, method, val, arguments.length, null );
	};
});

// Support: Safari<7+, Chrome<37+
// Add the top/left cssHooks using jQuery.fn.position
// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
// Blink bug: https://code.google.com/p/chromium/issues/detail?id=229280
// getComputedStyle returns percent when specified for top/left/bottom/right;
// rather than make the css module depend on the offset module, just check for it here
jQuery.each( [ "top", "left" ], function( i, prop ) {
	jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,
		function( elem, computed ) {
			if ( computed ) {
				computed = curCSS( elem, prop );
				// If curCSS returns percentage, fallback to offset
				return rnumnonpx.test( computed ) ?
					jQuery( elem ).position()[ prop ] + "px" :
					computed;
			}
		}
	);
});


// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
	jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name }, function( defaultExtra, funcName ) {
		// Margin is only for outerHeight, outerWidth
		jQuery.fn[ funcName ] = function( margin, value ) {
			var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
				extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

			return access( this, function( elem, type, value ) {
				var doc;

				if ( jQuery.isWindow( elem ) ) {
					// As of 5/8/2012 this will yield incorrect results for Mobile Safari, but there
					// isn't a whole lot we can do. See pull request at this URL for discussion:
					// https://github.com/jquery/jquery/pull/764
					return elem.document.documentElement[ "client" + name ];
				}

				// Get document width or height
				if ( elem.nodeType === 9 ) {
					doc = elem.documentElement;

					// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
					// whichever is greatest
					return Math.max(
						elem.body[ "scroll" + name ], doc[ "scroll" + name ],
						elem.body[ "offset" + name ], doc[ "offset" + name ],
						doc[ "client" + name ]
					);
				}

				return value === undefined ?
					// Get width or height on the element, requesting but not forcing parseFloat
					jQuery.css( elem, type, extra ) :

					// Set width or height on the element
					jQuery.style( elem, type, value, extra );
			}, type, chainable ? margin : undefined, chainable, null );
		};
	});
});


// The number of elements contained in the matched element set
jQuery.fn.size = function() {
	return this.length;
};

jQuery.fn.andSelf = jQuery.fn.addBack;




// Register as a named AMD module, since jQuery can be concatenated with other
// files that may use define, but not via a proper concatenation script that
// understands anonymous AMD modules. A named AMD is safest and most robust
// way to register. Lowercase jquery is used because AMD module names are
// derived from file names, and jQuery is normally delivered in a lowercase
// file name. Do this after creating the global so that if an AMD module wants
// to call noConflict to hide this version of jQuery, it will work.

// Note that for maximum portability, libraries that are not jQuery should
// declare themselves as anonymous modules, and avoid setting a global if an
// AMD loader is present. jQuery is a special case. For more information, see
// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

if ( typeof define === "function" && define.amd ) {
	define( "jquery", [], function() {
		return jQuery;
	});
}




var
	// Map over jQuery in case of overwrite
	_jQuery = window.jQuery,

	// Map over the $ in case of overwrite
	_$ = window.$;

jQuery.noConflict = function( deep ) {
	if ( window.$ === jQuery ) {
		window.$ = _$;
	}

	if ( deep && window.jQuery === jQuery ) {
		window.jQuery = _jQuery;
	}

	return jQuery;
};

// Expose jQuery and $ identifiers, even in AMD
// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
// and CommonJS for browser emulators (#13566)
if ( typeof noGlobal === strundefined ) {
	window.jQuery = window.$ = jQuery;
}




return jQuery;

}));

},{}],"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\lodash\\index.js":[function(require,module,exports){
(function (global){
/**
 * @license
 * lodash 3.10.1 (Custom Build) <https://lodash.com/>
 * Build: `lodash modern -d -o ./index.js`
 * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 * Available under MIT license <https://lodash.com/license>
 */
;(function() {

  /** Used as a safe reference for `undefined` in pre-ES5 environments. */
  var undefined;

  /** Used as the semantic version number. */
  var VERSION = '3.10.1';

  /** Used to compose bitmasks for wrapper metadata. */
  var BIND_FLAG = 1,
      BIND_KEY_FLAG = 2,
      CURRY_BOUND_FLAG = 4,
      CURRY_FLAG = 8,
      CURRY_RIGHT_FLAG = 16,
      PARTIAL_FLAG = 32,
      PARTIAL_RIGHT_FLAG = 64,
      ARY_FLAG = 128,
      REARG_FLAG = 256;

  /** Used as default options for `_.trunc`. */
  var DEFAULT_TRUNC_LENGTH = 30,
      DEFAULT_TRUNC_OMISSION = '...';

  /** Used to detect when a function becomes hot. */
  var HOT_COUNT = 150,
      HOT_SPAN = 16;

  /** Used as the size to enable large array optimizations. */
  var LARGE_ARRAY_SIZE = 200;

  /** Used to indicate the type of lazy iteratees. */
  var LAZY_FILTER_FLAG = 1,
      LAZY_MAP_FLAG = 2;

  /** Used as the `TypeError` message for "Functions" methods. */
  var FUNC_ERROR_TEXT = 'Expected a function';

  /** Used as the internal argument placeholder. */
  var PLACEHOLDER = '__lodash_placeholder__';

  /** `Object#toString` result references. */
  var argsTag = '[object Arguments]',
      arrayTag = '[object Array]',
      boolTag = '[object Boolean]',
      dateTag = '[object Date]',
      errorTag = '[object Error]',
      funcTag = '[object Function]',
      mapTag = '[object Map]',
      numberTag = '[object Number]',
      objectTag = '[object Object]',
      regexpTag = '[object RegExp]',
      setTag = '[object Set]',
      stringTag = '[object String]',
      weakMapTag = '[object WeakMap]';

  var arrayBufferTag = '[object ArrayBuffer]',
      float32Tag = '[object Float32Array]',
      float64Tag = '[object Float64Array]',
      int8Tag = '[object Int8Array]',
      int16Tag = '[object Int16Array]',
      int32Tag = '[object Int32Array]',
      uint8Tag = '[object Uint8Array]',
      uint8ClampedTag = '[object Uint8ClampedArray]',
      uint16Tag = '[object Uint16Array]',
      uint32Tag = '[object Uint32Array]';

  /** Used to match empty string literals in compiled template source. */
  var reEmptyStringLeading = /\b__p \+= '';/g,
      reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
      reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

  /** Used to match HTML entities and HTML characters. */
  var reEscapedHtml = /&(?:amp|lt|gt|quot|#39|#96);/g,
      reUnescapedHtml = /[&<>"'`]/g,
      reHasEscapedHtml = RegExp(reEscapedHtml.source),
      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);

  /** Used to match template delimiters. */
  var reEscape = /<%-([\s\S]+?)%>/g,
      reEvaluate = /<%([\s\S]+?)%>/g,
      reInterpolate = /<%=([\s\S]+?)%>/g;

  /** Used to match property names within property paths. */
  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\n\\]|\\.)*?\1)\]/,
      reIsPlainProp = /^\w*$/,
      rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\n\\]|\\.)*?)\2)\]/g;

  /**
   * Used to match `RegExp` [syntax characters](http://ecma-international.org/ecma-262/6.0/#sec-patterns)
   * and those outlined by [`EscapeRegExpPattern`](http://ecma-international.org/ecma-262/6.0/#sec-escaperegexppattern).
   */
  var reRegExpChars = /^[:!,]|[\\^$.*+?()[\]{}|\/]|(^[0-9a-fA-Fnrtuvx])|([\n\r\u2028\u2029])/g,
      reHasRegExpChars = RegExp(reRegExpChars.source);

  /** Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks). */
  var reComboMark = /[\u0300-\u036f\ufe20-\ufe23]/g;

  /** Used to match backslashes in property paths. */
  var reEscapeChar = /\\(\\)?/g;

  /** Used to match [ES template delimiters](http://ecma-international.org/ecma-262/6.0/#sec-template-literal-lexical-components). */
  var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

  /** Used to match `RegExp` flags from their coerced string values. */
  var reFlags = /\w*$/;

  /** Used to detect hexadecimal string values. */
  var reHasHexPrefix = /^0[xX]/;

  /** Used to detect host constructors (Safari > 5). */
  var reIsHostCtor = /^\[object .+?Constructor\]$/;

  /** Used to detect unsigned integer values. */
  var reIsUint = /^\d+$/;

  /** Used to match latin-1 supplementary letters (excluding mathematical operators). */
  var reLatin1 = /[\xc0-\xd6\xd8-\xde\xdf-\xf6\xf8-\xff]/g;

  /** Used to ensure capturing order of template delimiters. */
  var reNoMatch = /($^)/;

  /** Used to match unescaped characters in compiled string literals. */
  var reUnescapedString = /['\n\r\u2028\u2029\\]/g;

  /** Used to match words to create compound words. */
  var reWords = (function() {
    var upper = '[A-Z\\xc0-\\xd6\\xd8-\\xde]',
        lower = '[a-z\\xdf-\\xf6\\xf8-\\xff]+';

    return RegExp(upper + '+(?=' + upper + lower + ')|' + upper + '?' + lower + '|' + upper + '+|[0-9]+', 'g');
  }());

  /** Used to assign default `context` object properties. */
  var contextProps = [
    'Array', 'ArrayBuffer', 'Date', 'Error', 'Float32Array', 'Float64Array',
    'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Math', 'Number',
    'Object', 'RegExp', 'Set', 'String', '_', 'clearTimeout', 'isFinite',
    'parseFloat', 'parseInt', 'setTimeout', 'TypeError', 'Uint8Array',
    'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap'
  ];

  /** Used to make template sourceURLs easier to identify. */
  var templateCounter = -1;

  /** Used to identify `toStringTag` values of typed arrays. */
  var typedArrayTags = {};
  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
  typedArrayTags[uint32Tag] = true;
  typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
  typedArrayTags[dateTag] = typedArrayTags[errorTag] =
  typedArrayTags[funcTag] = typedArrayTags[mapTag] =
  typedArrayTags[numberTag] = typedArrayTags[objectTag] =
  typedArrayTags[regexpTag] = typedArrayTags[setTag] =
  typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;

  /** Used to identify `toStringTag` values supported by `_.clone`. */
  var cloneableTags = {};
  cloneableTags[argsTag] = cloneableTags[arrayTag] =
  cloneableTags[arrayBufferTag] = cloneableTags[boolTag] =
  cloneableTags[dateTag] = cloneableTags[float32Tag] =
  cloneableTags[float64Tag] = cloneableTags[int8Tag] =
  cloneableTags[int16Tag] = cloneableTags[int32Tag] =
  cloneableTags[numberTag] = cloneableTags[objectTag] =
  cloneableTags[regexpTag] = cloneableTags[stringTag] =
  cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
  cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
  cloneableTags[errorTag] = cloneableTags[funcTag] =
  cloneableTags[mapTag] = cloneableTags[setTag] =
  cloneableTags[weakMapTag] = false;

  /** Used to map latin-1 supplementary letters to basic latin letters. */
  var deburredLetters = {
    '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
    '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
    '\xc7': 'C',  '\xe7': 'c',
    '\xd0': 'D',  '\xf0': 'd',
    '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
    '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
    '\xcC': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
    '\xeC': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
    '\xd1': 'N',  '\xf1': 'n',
    '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
    '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
    '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
    '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
    '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
    '\xc6': 'Ae', '\xe6': 'ae',
    '\xde': 'Th', '\xfe': 'th',
    '\xdf': 'ss'
  };

  /** Used to map characters to HTML entities. */
  var htmlEscapes = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#39;',
    '`': '&#96;'
  };

  /** Used to map HTML entities to characters. */
  var htmlUnescapes = {
    '&amp;': '&',
    '&lt;': '<',
    '&gt;': '>',
    '&quot;': '"',
    '&#39;': "'",
    '&#96;': '`'
  };

  /** Used to determine if values are of the language type `Object`. */
  var objectTypes = {
    'function': true,
    'object': true
  };

  /** Used to escape characters for inclusion in compiled regexes. */
  var regexpEscapes = {
    '0': 'x30', '1': 'x31', '2': 'x32', '3': 'x33', '4': 'x34',
    '5': 'x35', '6': 'x36', '7': 'x37', '8': 'x38', '9': 'x39',
    'A': 'x41', 'B': 'x42', 'C': 'x43', 'D': 'x44', 'E': 'x45', 'F': 'x46',
    'a': 'x61', 'b': 'x62', 'c': 'x63', 'd': 'x64', 'e': 'x65', 'f': 'x66',
    'n': 'x6e', 'r': 'x72', 't': 'x74', 'u': 'x75', 'v': 'x76', 'x': 'x78'
  };

  /** Used to escape characters for inclusion in compiled string literals. */
  var stringEscapes = {
    '\\': '\\',
    "'": "'",
    '\n': 'n',
    '\r': 'r',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  /** Detect free variable `exports`. */
  var freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports;

  /** Detect free variable `module`. */
  var freeModule = objectTypes[typeof module] && module && !module.nodeType && module;

  /** Detect free variable `global` from Node.js. */
  var freeGlobal = freeExports && freeModule && typeof global == 'object' && global && global.Object && global;

  /** Detect free variable `self`. */
  var freeSelf = objectTypes[typeof self] && self && self.Object && self;

  /** Detect free variable `window`. */
  var freeWindow = objectTypes[typeof window] && window && window.Object && window;

  /** Detect the popular CommonJS extension `module.exports`. */
  var moduleExports = freeModule && freeModule.exports === freeExports && freeExports;

  /**
   * Used as a reference to the global object.
   *
   * The `this` value is used if it's the global object to avoid Greasemonkey's
   * restricted `window` object, otherwise the `window` object is used.
   */
  var root = freeGlobal || ((freeWindow !== (this && this.window)) && freeWindow) || freeSelf || this;

  /*--------------------------------------------------------------------------*/

  /**
   * The base implementation of `compareAscending` which compares values and
   * sorts them in ascending order without guaranteeing a stable sort.
   *
   * @private
   * @param {*} value The value to compare.
   * @param {*} other The other value to compare.
   * @returns {number} Returns the sort order indicator for `value`.
   */
  function baseCompareAscending(value, other) {
    if (value !== other) {
      var valIsNull = value === null,
          valIsUndef = value === undefined,
          valIsReflexive = value === value;

      var othIsNull = other === null,
          othIsUndef = other === undefined,
          othIsReflexive = other === other;

      if ((value > other && !othIsNull) || !valIsReflexive ||
          (valIsNull && !othIsUndef && othIsReflexive) ||
          (valIsUndef && othIsReflexive)) {
        return 1;
      }
      if ((value < other && !valIsNull) || !othIsReflexive ||
          (othIsNull && !valIsUndef && valIsReflexive) ||
          (othIsUndef && valIsReflexive)) {
        return -1;
      }
    }
    return 0;
  }

  /**
   * The base implementation of `_.findIndex` and `_.findLastIndex` without
   * support for callback shorthands and `this` binding.
   *
   * @private
   * @param {Array} array The array to search.
   * @param {Function} predicate The function invoked per iteration.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseFindIndex(array, predicate, fromRight) {
    var length = array.length,
        index = fromRight ? length : -1;

    while ((fromRight ? index-- : ++index < length)) {
      if (predicate(array[index], index, array)) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.indexOf` without support for binary searches.
   *
   * @private
   * @param {Array} array The array to search.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseIndexOf(array, value, fromIndex) {
    if (value !== value) {
      return indexOfNaN(array, fromIndex);
    }
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (array[index] === value) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.isFunction` without support for environments
   * with incorrect `typeof` results.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
   */
  function baseIsFunction(value) {
    // Avoid a Chakra JIT bug in compatibility modes of IE 11.
    // See https://github.com/jashkenas/underscore/issues/1621 for more details.
    return typeof value == 'function' || false;
  }

  /**
   * Converts `value` to a string if it's not one. An empty string is returned
   * for `null` or `undefined` values.
   *
   * @private
   * @param {*} value The value to process.
   * @returns {string} Returns the string.
   */
  function baseToString(value) {
    return value == null ? '' : (value + '');
  }

  /**
   * Used by `_.trim` and `_.trimLeft` to get the index of the first character
   * of `string` that is not found in `chars`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @param {string} chars The characters to find.
   * @returns {number} Returns the index of the first character not found in `chars`.
   */
  function charsLeftIndex(string, chars) {
    var index = -1,
        length = string.length;

    while (++index < length && chars.indexOf(string.charAt(index)) > -1) {}
    return index;
  }

  /**
   * Used by `_.trim` and `_.trimRight` to get the index of the last character
   * of `string` that is not found in `chars`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @param {string} chars The characters to find.
   * @returns {number} Returns the index of the last character not found in `chars`.
   */
  function charsRightIndex(string, chars) {
    var index = string.length;

    while (index-- && chars.indexOf(string.charAt(index)) > -1) {}
    return index;
  }

  /**
   * Used by `_.sortBy` to compare transformed elements of a collection and stable
   * sort them in ascending order.
   *
   * @private
   * @param {Object} object The object to compare.
   * @param {Object} other The other object to compare.
   * @returns {number} Returns the sort order indicator for `object`.
   */
  function compareAscending(object, other) {
    return baseCompareAscending(object.criteria, other.criteria) || (object.index - other.index);
  }

  /**
   * Used by `_.sortByOrder` to compare multiple properties of a value to another
   * and stable sort them.
   *
   * If `orders` is unspecified, all valuess are sorted in ascending order. Otherwise,
   * a value is sorted in ascending order if its corresponding order is "asc", and
   * descending if "desc".
   *
   * @private
   * @param {Object} object The object to compare.
   * @param {Object} other The other object to compare.
   * @param {boolean[]} orders The order to sort by for each property.
   * @returns {number} Returns the sort order indicator for `object`.
   */
  function compareMultiple(object, other, orders) {
    var index = -1,
        objCriteria = object.criteria,
        othCriteria = other.criteria,
        length = objCriteria.length,
        ordersLength = orders.length;

    while (++index < length) {
      var result = baseCompareAscending(objCriteria[index], othCriteria[index]);
      if (result) {
        if (index >= ordersLength) {
          return result;
        }
        var order = orders[index];
        return result * ((order === 'asc' || order === true) ? 1 : -1);
      }
    }
    // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
    // that causes it, under certain circumstances, to provide the same value for
    // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
    // for more details.
    //
    // This also ensures a stable sort in V8 and other engines.
    // See https://code.google.com/p/v8/issues/detail?id=90 for more details.
    return object.index - other.index;
  }

  /**
   * Used by `_.deburr` to convert latin-1 supplementary letters to basic latin letters.
   *
   * @private
   * @param {string} letter The matched letter to deburr.
   * @returns {string} Returns the deburred letter.
   */
  function deburrLetter(letter) {
    return deburredLetters[letter];
  }

  /**
   * Used by `_.escape` to convert characters to HTML entities.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  function escapeHtmlChar(chr) {
    return htmlEscapes[chr];
  }

  /**
   * Used by `_.escapeRegExp` to escape characters for inclusion in compiled regexes.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @param {string} leadingChar The capture group for a leading character.
   * @param {string} whitespaceChar The capture group for a whitespace character.
   * @returns {string} Returns the escaped character.
   */
  function escapeRegExpChar(chr, leadingChar, whitespaceChar) {
    if (leadingChar) {
      chr = regexpEscapes[chr];
    } else if (whitespaceChar) {
      chr = stringEscapes[chr];
    }
    return '\\' + chr;
  }

  /**
   * Used by `_.template` to escape characters for inclusion in compiled string literals.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  function escapeStringChar(chr) {
    return '\\' + stringEscapes[chr];
  }

  /**
   * Gets the index at which the first occurrence of `NaN` is found in `array`.
   *
   * @private
   * @param {Array} array The array to search.
   * @param {number} fromIndex The index to search from.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {number} Returns the index of the matched `NaN`, else `-1`.
   */
  function indexOfNaN(array, fromIndex, fromRight) {
    var length = array.length,
        index = fromIndex + (fromRight ? 0 : -1);

    while ((fromRight ? index-- : ++index < length)) {
      var other = array[index];
      if (other !== other) {
        return index;
      }
    }
    return -1;
  }

  /**
   * Checks if `value` is object-like.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
   */
  function isObjectLike(value) {
    return !!value && typeof value == 'object';
  }

  /**
   * Used by `trimmedLeftIndex` and `trimmedRightIndex` to determine if a
   * character code is whitespace.
   *
   * @private
   * @param {number} charCode The character code to inspect.
   * @returns {boolean} Returns `true` if `charCode` is whitespace, else `false`.
   */
  function isSpace(charCode) {
    return ((charCode <= 160 && (charCode >= 9 && charCode <= 13) || charCode == 32 || charCode == 160) || charCode == 5760 || charCode == 6158 ||
      (charCode >= 8192 && (charCode <= 8202 || charCode == 8232 || charCode == 8233 || charCode == 8239 || charCode == 8287 || charCode == 12288 || charCode == 65279)));
  }

  /**
   * Replaces all `placeholder` elements in `array` with an internal placeholder
   * and returns an array of their indexes.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {*} placeholder The placeholder to replace.
   * @returns {Array} Returns the new array of placeholder indexes.
   */
  function replaceHolders(array, placeholder) {
    var index = -1,
        length = array.length,
        resIndex = -1,
        result = [];

    while (++index < length) {
      if (array[index] === placeholder) {
        array[index] = PLACEHOLDER;
        result[++resIndex] = index;
      }
    }
    return result;
  }

  /**
   * An implementation of `_.uniq` optimized for sorted arrays without support
   * for callback shorthands and `this` binding.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {Function} [iteratee] The function invoked per iteration.
   * @returns {Array} Returns the new duplicate-value-free array.
   */
  function sortedUniq(array, iteratee) {
    var seen,
        index = -1,
        length = array.length,
        resIndex = -1,
        result = [];

    while (++index < length) {
      var value = array[index],
          computed = iteratee ? iteratee(value, index, array) : value;

      if (!index || seen !== computed) {
        seen = computed;
        result[++resIndex] = value;
      }
    }
    return result;
  }

  /**
   * Used by `_.trim` and `_.trimLeft` to get the index of the first non-whitespace
   * character of `string`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the index of the first non-whitespace character.
   */
  function trimmedLeftIndex(string) {
    var index = -1,
        length = string.length;

    while (++index < length && isSpace(string.charCodeAt(index))) {}
    return index;
  }

  /**
   * Used by `_.trim` and `_.trimRight` to get the index of the last non-whitespace
   * character of `string`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the index of the last non-whitespace character.
   */
  function trimmedRightIndex(string) {
    var index = string.length;

    while (index-- && isSpace(string.charCodeAt(index))) {}
    return index;
  }

  /**
   * Used by `_.unescape` to convert HTML entities to characters.
   *
   * @private
   * @param {string} chr The matched character to unescape.
   * @returns {string} Returns the unescaped character.
   */
  function unescapeHtmlChar(chr) {
    return htmlUnescapes[chr];
  }

  /*--------------------------------------------------------------------------*/

  /**
   * Create a new pristine `lodash` function using the given `context` object.
   *
   * @static
   * @memberOf _
   * @category Utility
   * @param {Object} [context=root] The context object.
   * @returns {Function} Returns a new `lodash` function.
   * @example
   *
   * _.mixin({ 'foo': _.constant('foo') });
   *
   * var lodash = _.runInContext();
   * lodash.mixin({ 'bar': lodash.constant('bar') });
   *
   * _.isFunction(_.foo);
   * // => true
   * _.isFunction(_.bar);
   * // => false
   *
   * lodash.isFunction(lodash.foo);
   * // => false
   * lodash.isFunction(lodash.bar);
   * // => true
   *
   * // using `context` to mock `Date#getTime` use in `_.now`
   * var mock = _.runInContext({
   *   'Date': function() {
   *     return { 'getTime': getTimeMock };
   *   }
   * });
   *
   * // or creating a suped-up `defer` in Node.js
   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
   */
  function runInContext(context) {
    // Avoid issues with some ES3 environments that attempt to use values, named
    // after built-in constructors like `Object`, for the creation of literals.
    // ES5 clears this up by stating that literals must use built-in constructors.
    // See https://es5.github.io/#x11.1.5 for more details.
    context = context ? _.defaults(root.Object(), context, _.pick(root, contextProps)) : root;

    /** Native constructor references. */
    var Array = context.Array,
        Date = context.Date,
        Error = context.Error,
        Function = context.Function,
        Math = context.Math,
        Number = context.Number,
        Object = context.Object,
        RegExp = context.RegExp,
        String = context.String,
        TypeError = context.TypeError;

    /** Used for native method references. */
    var arrayProto = Array.prototype,
        objectProto = Object.prototype,
        stringProto = String.prototype;

    /** Used to resolve the decompiled source of functions. */
    var fnToString = Function.prototype.toString;

    /** Used to check objects for own properties. */
    var hasOwnProperty = objectProto.hasOwnProperty;

    /** Used to generate unique IDs. */
    var idCounter = 0;

    /**
     * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
     * of values.
     */
    var objToString = objectProto.toString;

    /** Used to restore the original `_` reference in `_.noConflict`. */
    var oldDash = root._;

    /** Used to detect if a method is native. */
    var reIsNative = RegExp('^' +
      fnToString.call(hasOwnProperty).replace(/[\\^$.*+?()[\]{}|]/g, '\\$&')
      .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
    );

    /** Native method references. */
    var ArrayBuffer = context.ArrayBuffer,
        clearTimeout = context.clearTimeout,
        parseFloat = context.parseFloat,
        pow = Math.pow,
        propertyIsEnumerable = objectProto.propertyIsEnumerable,
        Set = getNative(context, 'Set'),
        setTimeout = context.setTimeout,
        splice = arrayProto.splice,
        Uint8Array = context.Uint8Array,
        WeakMap = getNative(context, 'WeakMap');

    /* Native method references for those with the same name as other `lodash` methods. */
    var nativeCeil = Math.ceil,
        nativeCreate = getNative(Object, 'create'),
        nativeFloor = Math.floor,
        nativeIsArray = getNative(Array, 'isArray'),
        nativeIsFinite = context.isFinite,
        nativeKeys = getNative(Object, 'keys'),
        nativeMax = Math.max,
        nativeMin = Math.min,
        nativeNow = getNative(Date, 'now'),
        nativeParseInt = context.parseInt,
        nativeRandom = Math.random;

    /** Used as references for `-Infinity` and `Infinity`. */
    var NEGATIVE_INFINITY = Number.NEGATIVE_INFINITY,
        POSITIVE_INFINITY = Number.POSITIVE_INFINITY;

    /** Used as references for the maximum length and index of an array. */
    var MAX_ARRAY_LENGTH = 4294967295,
        MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,
        HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;

    /**
     * Used as the [maximum length](http://ecma-international.org/ecma-262/6.0/#sec-number.max_safe_integer)
     * of an array-like value.
     */
    var MAX_SAFE_INTEGER = 9007199254740991;

    /** Used to store function metadata. */
    var metaMap = WeakMap && new WeakMap;

    /** Used to lookup unminified function names. */
    var realNames = {};

    /*------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` object which wraps `value` to enable implicit chaining.
     * Methods that operate on and return arrays, collections, and functions can
     * be chained together. Methods that retrieve a single value or may return a
     * primitive value will automatically end the chain returning the unwrapped
     * value. Explicit chaining may be enabled using `_.chain`. The execution of
     * chained methods is lazy, that is, execution is deferred until `_#value`
     * is implicitly or explicitly called.
     *
     * Lazy evaluation allows several methods to support shortcut fusion. Shortcut
     * fusion is an optimization strategy which merge iteratee calls; this can help
     * to avoid the creation of intermediate data structures and greatly reduce the
     * number of iteratee executions.
     *
     * Chaining is supported in custom builds as long as the `_#value` method is
     * directly or indirectly included in the build.
     *
     * In addition to lodash methods, wrappers have `Array` and `String` methods.
     *
     * The wrapper `Array` methods are:
     * `concat`, `join`, `pop`, `push`, `reverse`, `shift`, `slice`, `sort`,
     * `splice`, and `unshift`
     *
     * The wrapper `String` methods are:
     * `replace` and `split`
     *
     * The wrapper methods that support shortcut fusion are:
     * `compact`, `drop`, `dropRight`, `dropRightWhile`, `dropWhile`, `filter`,
     * `first`, `initial`, `last`, `map`, `pluck`, `reject`, `rest`, `reverse`,
     * `slice`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, `toArray`,
     * and `where`
     *
     * The chainable wrapper methods are:
     * `after`, `ary`, `assign`, `at`, `before`, `bind`, `bindAll`, `bindKey`,
     * `callback`, `chain`, `chunk`, `commit`, `compact`, `concat`, `constant`,
     * `countBy`, `create`, `curry`, `debounce`, `defaults`, `defaultsDeep`,
     * `defer`, `delay`, `difference`, `drop`, `dropRight`, `dropRightWhile`,
     * `dropWhile`, `fill`, `filter`, `flatten`, `flattenDeep`, `flow`, `flowRight`,
     * `forEach`, `forEachRight`, `forIn`, `forInRight`, `forOwn`, `forOwnRight`,
     * `functions`, `groupBy`, `indexBy`, `initial`, `intersection`, `invert`,
     * `invoke`, `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`,
     * `matchesProperty`, `memoize`, `merge`, `method`, `methodOf`, `mixin`,
     * `modArgs`, `negate`, `omit`, `once`, `pairs`, `partial`, `partialRight`,
     * `partition`, `pick`, `plant`, `pluck`, `property`, `propertyOf`, `pull`,
     * `pullAt`, `push`, `range`, `rearg`, `reject`, `remove`, `rest`, `restParam`,
     * `reverse`, `set`, `shuffle`, `slice`, `sort`, `sortBy`, `sortByAll`,
     * `sortByOrder`, `splice`, `spread`, `take`, `takeRight`, `takeRightWhile`,
     * `takeWhile`, `tap`, `throttle`, `thru`, `times`, `toArray`, `toPlainObject`,
     * `transform`, `union`, `uniq`, `unshift`, `unzip`, `unzipWith`, `values`,
     * `valuesIn`, `where`, `without`, `wrap`, `xor`, `zip`, `zipObject`, `zipWith`
     *
     * The wrapper methods that are **not** chainable by default are:
     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clone`, `cloneDeep`,
     * `deburr`, `endsWith`, `escape`, `escapeRegExp`, `every`, `find`, `findIndex`,
     * `findKey`, `findLast`, `findLastIndex`, `findLastKey`, `findWhere`, `first`,
     * `floor`, `get`, `gt`, `gte`, `has`, `identity`, `includes`, `indexOf`,
     * `inRange`, `isArguments`, `isArray`, `isBoolean`, `isDate`, `isElement`,
     * `isEmpty`, `isEqual`, `isError`, `isFinite` `isFunction`, `isMatch`,
     * `isNative`, `isNaN`, `isNull`, `isNumber`, `isObject`, `isPlainObject`,
     * `isRegExp`, `isString`, `isUndefined`, `isTypedArray`, `join`, `kebabCase`,
     * `last`, `lastIndexOf`, `lt`, `lte`, `max`, `min`, `noConflict`, `noop`,
     * `now`, `pad`, `padLeft`, `padRight`, `parseInt`, `pop`, `random`, `reduce`,
     * `reduceRight`, `repeat`, `result`, `round`, `runInContext`, `shift`, `size`,
     * `snakeCase`, `some`, `sortedIndex`, `sortedLastIndex`, `startCase`,
     * `startsWith`, `sum`, `template`, `trim`, `trimLeft`, `trimRight`, `trunc`,
     * `unescape`, `uniqueId`, `value`, and `words`
     *
     * The wrapper method `sample` will return a wrapped value when `n` is provided,
     * otherwise an unwrapped value is returned.
     *
     * @name _
     * @constructor
     * @category Chain
     * @param {*} value The value to wrap in a `lodash` instance.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var wrapped = _([1, 2, 3]);
     *
     * // returns an unwrapped value
     * wrapped.reduce(function(total, n) {
     *   return total + n;
     * });
     * // => 6
     *
     * // returns a wrapped value
     * var squares = wrapped.map(function(n) {
     *   return n * n;
     * });
     *
     * _.isArray(squares);
     * // => false
     *
     * _.isArray(squares.value());
     * // => true
     */
    function lodash(value) {
      if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
        if (value instanceof LodashWrapper) {
          return value;
        }
        if (hasOwnProperty.call(value, '__chain__') && hasOwnProperty.call(value, '__wrapped__')) {
          return wrapperClone(value);
        }
      }
      return new LodashWrapper(value);
    }

    /**
     * The function whose prototype all chaining wrappers inherit from.
     *
     * @private
     */
    function baseLodash() {
      // No operation performed.
    }

    /**
     * The base constructor for creating `lodash` wrapper objects.
     *
     * @private
     * @param {*} value The value to wrap.
     * @param {boolean} [chainAll] Enable chaining for all wrapper methods.
     * @param {Array} [actions=[]] Actions to peform to resolve the unwrapped value.
     */
    function LodashWrapper(value, chainAll, actions) {
      this.__wrapped__ = value;
      this.__actions__ = actions || [];
      this.__chain__ = !!chainAll;
    }

    /**
     * An object environment feature flags.
     *
     * @static
     * @memberOf _
     * @type Object
     */
    var support = lodash.support = {};

    /**
     * By default, the template delimiters used by lodash are like those in
     * embedded Ruby (ERB). Change the following template settings to use
     * alternative delimiters.
     *
     * @static
     * @memberOf _
     * @type Object
     */
    lodash.templateSettings = {

      /**
       * Used to detect `data` property values to be HTML-escaped.
       *
       * @memberOf _.templateSettings
       * @type RegExp
       */
      'escape': reEscape,

      /**
       * Used to detect code to be evaluated.
       *
       * @memberOf _.templateSettings
       * @type RegExp
       */
      'evaluate': reEvaluate,

      /**
       * Used to detect `data` property values to inject.
       *
       * @memberOf _.templateSettings
       * @type RegExp
       */
      'interpolate': reInterpolate,

      /**
       * Used to reference the data object in the template text.
       *
       * @memberOf _.templateSettings
       * @type string
       */
      'variable': '',

      /**
       * Used to import variables into the compiled template.
       *
       * @memberOf _.templateSettings
       * @type Object
       */
      'imports': {

        /**
         * A reference to the `lodash` function.
         *
         * @memberOf _.templateSettings.imports
         * @type Function
         */
        '_': lodash
      }
    };

    /*------------------------------------------------------------------------*/

    /**
     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
     *
     * @private
     * @param {*} value The value to wrap.
     */
    function LazyWrapper(value) {
      this.__wrapped__ = value;
      this.__actions__ = [];
      this.__dir__ = 1;
      this.__filtered__ = false;
      this.__iteratees__ = [];
      this.__takeCount__ = POSITIVE_INFINITY;
      this.__views__ = [];
    }

    /**
     * Creates a clone of the lazy wrapper object.
     *
     * @private
     * @name clone
     * @memberOf LazyWrapper
     * @returns {Object} Returns the cloned `LazyWrapper` object.
     */
    function lazyClone() {
      var result = new LazyWrapper(this.__wrapped__);
      result.__actions__ = arrayCopy(this.__actions__);
      result.__dir__ = this.__dir__;
      result.__filtered__ = this.__filtered__;
      result.__iteratees__ = arrayCopy(this.__iteratees__);
      result.__takeCount__ = this.__takeCount__;
      result.__views__ = arrayCopy(this.__views__);
      return result;
    }

    /**
     * Reverses the direction of lazy iteration.
     *
     * @private
     * @name reverse
     * @memberOf LazyWrapper
     * @returns {Object} Returns the new reversed `LazyWrapper` object.
     */
    function lazyReverse() {
      if (this.__filtered__) {
        var result = new LazyWrapper(this);
        result.__dir__ = -1;
        result.__filtered__ = true;
      } else {
        result = this.clone();
        result.__dir__ *= -1;
      }
      return result;
    }

    /**
     * Extracts the unwrapped value from its lazy wrapper.
     *
     * @private
     * @name value
     * @memberOf LazyWrapper
     * @returns {*} Returns the unwrapped value.
     */
    function lazyValue() {
      var array = this.__wrapped__.value(),
          dir = this.__dir__,
          isArr = isArray(array),
          isRight = dir < 0,
          arrLength = isArr ? array.length : 0,
          view = getView(0, arrLength, this.__views__),
          start = view.start,
          end = view.end,
          length = end - start,
          index = isRight ? end : (start - 1),
          iteratees = this.__iteratees__,
          iterLength = iteratees.length,
          resIndex = 0,
          takeCount = nativeMin(length, this.__takeCount__);

      if (!isArr || arrLength < LARGE_ARRAY_SIZE || (arrLength == length && takeCount == length)) {
        return baseWrapperValue((isRight && isArr) ? array.reverse() : array, this.__actions__);
      }
      var result = [];

      outer:
      while (length-- && resIndex < takeCount) {
        index += dir;

        var iterIndex = -1,
            value = array[index];

        while (++iterIndex < iterLength) {
          var data = iteratees[iterIndex],
              iteratee = data.iteratee,
              type = data.type,
              computed = iteratee(value);

          if (type == LAZY_MAP_FLAG) {
            value = computed;
          } else if (!computed) {
            if (type == LAZY_FILTER_FLAG) {
              continue outer;
            } else {
              break outer;
            }
          }
        }
        result[resIndex++] = value;
      }
      return result;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates a cache object to store key/value pairs.
     *
     * @private
     * @static
     * @name Cache
     * @memberOf _.memoize
     */
    function MapCache() {
      this.__data__ = {};
    }

    /**
     * Removes `key` and its value from the cache.
     *
     * @private
     * @name delete
     * @memberOf _.memoize.Cache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed successfully, else `false`.
     */
    function mapDelete(key) {
      return this.has(key) && delete this.__data__[key];
    }

    /**
     * Gets the cached value for `key`.
     *
     * @private
     * @name get
     * @memberOf _.memoize.Cache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the cached value.
     */
    function mapGet(key) {
      return key == '__proto__' ? undefined : this.__data__[key];
    }

    /**
     * Checks if a cached value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf _.memoize.Cache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function mapHas(key) {
      return key != '__proto__' && hasOwnProperty.call(this.__data__, key);
    }

    /**
     * Sets `value` to `key` of the cache.
     *
     * @private
     * @name set
     * @memberOf _.memoize.Cache
     * @param {string} key The key of the value to cache.
     * @param {*} value The value to cache.
     * @returns {Object} Returns the cache object.
     */
    function mapSet(key, value) {
      if (key != '__proto__') {
        this.__data__[key] = value;
      }
      return this;
    }

    /*------------------------------------------------------------------------*/

    /**
     *
     * Creates a cache object to store unique values.
     *
     * @private
     * @param {Array} [values] The values to cache.
     */
    function SetCache(values) {
      var length = values ? values.length : 0;

      this.data = { 'hash': nativeCreate(null), 'set': new Set };
      while (length--) {
        this.push(values[length]);
      }
    }

    /**
     * Checks if `value` is in `cache` mimicking the return signature of
     * `_.indexOf` by returning `0` if the value is found, else `-1`.
     *
     * @private
     * @param {Object} cache The cache to search.
     * @param {*} value The value to search for.
     * @returns {number} Returns `0` if `value` is found, else `-1`.
     */
    function cacheIndexOf(cache, value) {
      var data = cache.data,
          result = (typeof value == 'string' || isObject(value)) ? data.set.has(value) : data.hash[value];

      return result ? 0 : -1;
    }

    /**
     * Adds `value` to the cache.
     *
     * @private
     * @name push
     * @memberOf SetCache
     * @param {*} value The value to cache.
     */
    function cachePush(value) {
      var data = this.data;
      if (typeof value == 'string' || isObject(value)) {
        data.set.add(value);
      } else {
        data.hash[value] = true;
      }
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates a new array joining `array` with `other`.
     *
     * @private
     * @param {Array} array The array to join.
     * @param {Array} other The other array to join.
     * @returns {Array} Returns the new concatenated array.
     */
    function arrayConcat(array, other) {
      var index = -1,
          length = array.length,
          othIndex = -1,
          othLength = other.length,
          result = Array(length + othLength);

      while (++index < length) {
        result[index] = array[index];
      }
      while (++othIndex < othLength) {
        result[index++] = other[othIndex];
      }
      return result;
    }

    /**
     * Copies the values of `source` to `array`.
     *
     * @private
     * @param {Array} source The array to copy values from.
     * @param {Array} [array=[]] The array to copy values to.
     * @returns {Array} Returns `array`.
     */
    function arrayCopy(source, array) {
      var index = -1,
          length = source.length;

      array || (array = Array(length));
      while (++index < length) {
        array[index] = source[index];
      }
      return array;
    }

    /**
     * A specialized version of `_.forEach` for arrays without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns `array`.
     */
    function arrayEach(array, iteratee) {
      var index = -1,
          length = array.length;

      while (++index < length) {
        if (iteratee(array[index], index, array) === false) {
          break;
        }
      }
      return array;
    }

    /**
     * A specialized version of `_.forEachRight` for arrays without support for
     * callback shorthands and `this` binding.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns `array`.
     */
    function arrayEachRight(array, iteratee) {
      var length = array.length;

      while (length--) {
        if (iteratee(array[length], length, array) === false) {
          break;
        }
      }
      return array;
    }

    /**
     * A specialized version of `_.every` for arrays without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`.
     */
    function arrayEvery(array, predicate) {
      var index = -1,
          length = array.length;

      while (++index < length) {
        if (!predicate(array[index], index, array)) {
          return false;
        }
      }
      return true;
    }

    /**
     * A specialized version of `baseExtremum` for arrays which invokes `iteratee`
     * with one argument: (value).
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} comparator The function used to compare values.
     * @param {*} exValue The initial extremum value.
     * @returns {*} Returns the extremum value.
     */
    function arrayExtremum(array, iteratee, comparator, exValue) {
      var index = -1,
          length = array.length,
          computed = exValue,
          result = computed;

      while (++index < length) {
        var value = array[index],
            current = +iteratee(value);

        if (comparator(current, computed)) {
          computed = current;
          result = value;
        }
      }
      return result;
    }

    /**
     * A specialized version of `_.filter` for arrays without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     */
    function arrayFilter(array, predicate) {
      var index = -1,
          length = array.length,
          resIndex = -1,
          result = [];

      while (++index < length) {
        var value = array[index];
        if (predicate(value, index, array)) {
          result[++resIndex] = value;
        }
      }
      return result;
    }

    /**
     * A specialized version of `_.map` for arrays without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     */
    function arrayMap(array, iteratee) {
      var index = -1,
          length = array.length,
          result = Array(length);

      while (++index < length) {
        result[index] = iteratee(array[index], index, array);
      }
      return result;
    }

    /**
     * Appends the elements of `values` to `array`.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {Array} values The values to append.
     * @returns {Array} Returns `array`.
     */
    function arrayPush(array, values) {
      var index = -1,
          length = values.length,
          offset = array.length;

      while (++index < length) {
        array[offset + index] = values[index];
      }
      return array;
    }

    /**
     * A specialized version of `_.reduce` for arrays without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @param {boolean} [initFromArray] Specify using the first element of `array`
     *  as the initial value.
     * @returns {*} Returns the accumulated value.
     */
    function arrayReduce(array, iteratee, accumulator, initFromArray) {
      var index = -1,
          length = array.length;

      if (initFromArray && length) {
        accumulator = array[++index];
      }
      while (++index < length) {
        accumulator = iteratee(accumulator, array[index], index, array);
      }
      return accumulator;
    }

    /**
     * A specialized version of `_.reduceRight` for arrays without support for
     * callback shorthands and `this` binding.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @param {boolean} [initFromArray] Specify using the last element of `array`
     *  as the initial value.
     * @returns {*} Returns the accumulated value.
     */
    function arrayReduceRight(array, iteratee, accumulator, initFromArray) {
      var length = array.length;
      if (initFromArray && length) {
        accumulator = array[--length];
      }
      while (length--) {
        accumulator = iteratee(accumulator, array[length], length, array);
      }
      return accumulator;
    }

    /**
     * A specialized version of `_.some` for arrays without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     */
    function arraySome(array, predicate) {
      var index = -1,
          length = array.length;

      while (++index < length) {
        if (predicate(array[index], index, array)) {
          return true;
        }
      }
      return false;
    }

    /**
     * A specialized version of `_.sum` for arrays without support for callback
     * shorthands and `this` binding..
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {number} Returns the sum.
     */
    function arraySum(array, iteratee) {
      var length = array.length,
          result = 0;

      while (length--) {
        result += +iteratee(array[length]) || 0;
      }
      return result;
    }

    /**
     * Used by `_.defaults` to customize its `_.assign` use.
     *
     * @private
     * @param {*} objectValue The destination object property value.
     * @param {*} sourceValue The source object property value.
     * @returns {*} Returns the value to assign to the destination object.
     */
    function assignDefaults(objectValue, sourceValue) {
      return objectValue === undefined ? sourceValue : objectValue;
    }

    /**
     * Used by `_.template` to customize its `_.assign` use.
     *
     * **Note:** This function is like `assignDefaults` except that it ignores
     * inherited property values when checking if a property is `undefined`.
     *
     * @private
     * @param {*} objectValue The destination object property value.
     * @param {*} sourceValue The source object property value.
     * @param {string} key The key associated with the object and source values.
     * @param {Object} object The destination object.
     * @returns {*} Returns the value to assign to the destination object.
     */
    function assignOwnDefaults(objectValue, sourceValue, key, object) {
      return (objectValue === undefined || !hasOwnProperty.call(object, key))
        ? sourceValue
        : objectValue;
    }

    /**
     * A specialized version of `_.assign` for customizing assigned values without
     * support for argument juggling, multiple sources, and `this` binding `customizer`
     * functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {Function} customizer The function to customize assigned values.
     * @returns {Object} Returns `object`.
     */
    function assignWith(object, source, customizer) {
      var index = -1,
          props = keys(source),
          length = props.length;

      while (++index < length) {
        var key = props[index],
            value = object[key],
            result = customizer(value, source[key], key, object, source);

        if ((result === result ? (result !== value) : (value === value)) ||
            (value === undefined && !(key in object))) {
          object[key] = result;
        }
      }
      return object;
    }

    /**
     * The base implementation of `_.assign` without support for argument juggling,
     * multiple sources, and `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */
    function baseAssign(object, source) {
      return source == null
        ? object
        : baseCopy(source, keys(source), object);
    }

    /**
     * The base implementation of `_.at` without support for string collections
     * and individual key arguments.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {number[]|string[]} props The property names or indexes of elements to pick.
     * @returns {Array} Returns the new array of picked elements.
     */
    function baseAt(collection, props) {
      var index = -1,
          isNil = collection == null,
          isArr = !isNil && isArrayLike(collection),
          length = isArr ? collection.length : 0,
          propsLength = props.length,
          result = Array(propsLength);

      while(++index < propsLength) {
        var key = props[index];
        if (isArr) {
          result[index] = isIndex(key, length) ? collection[key] : undefined;
        } else {
          result[index] = isNil ? undefined : collection[key];
        }
      }
      return result;
    }

    /**
     * Copies properties of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy properties from.
     * @param {Array} props The property names to copy.
     * @param {Object} [object={}] The object to copy properties to.
     * @returns {Object} Returns `object`.
     */
    function baseCopy(source, props, object) {
      object || (object = {});

      var index = -1,
          length = props.length;

      while (++index < length) {
        var key = props[index];
        object[key] = source[key];
      }
      return object;
    }

    /**
     * The base implementation of `_.callback` which supports specifying the
     * number of arguments to provide to `func`.
     *
     * @private
     * @param {*} [func=_.identity] The value to convert to a callback.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {number} [argCount] The number of arguments to provide to `func`.
     * @returns {Function} Returns the callback.
     */
    function baseCallback(func, thisArg, argCount) {
      var type = typeof func;
      if (type == 'function') {
        return thisArg === undefined
          ? func
          : bindCallback(func, thisArg, argCount);
      }
      if (func == null) {
        return identity;
      }
      if (type == 'object') {
        return baseMatches(func);
      }
      return thisArg === undefined
        ? property(func)
        : baseMatchesProperty(func, thisArg);
    }

    /**
     * The base implementation of `_.clone` without support for argument juggling
     * and `this` binding `customizer` functions.
     *
     * @private
     * @param {*} value The value to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @param {Function} [customizer] The function to customize cloning values.
     * @param {string} [key] The key of `value`.
     * @param {Object} [object] The object `value` belongs to.
     * @param {Array} [stackA=[]] Tracks traversed source objects.
     * @param {Array} [stackB=[]] Associates clones with source counterparts.
     * @returns {*} Returns the cloned value.
     */
    function baseClone(value, isDeep, customizer, key, object, stackA, stackB) {
      var result;
      if (customizer) {
        result = object ? customizer(value, key, object) : customizer(value);
      }
      if (result !== undefined) {
        return result;
      }
      if (!isObject(value)) {
        return value;
      }
      var isArr = isArray(value);
      if (isArr) {
        result = initCloneArray(value);
        if (!isDeep) {
          return arrayCopy(value, result);
        }
      } else {
        var tag = objToString.call(value),
            isFunc = tag == funcTag;

        if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
          result = initCloneObject(isFunc ? {} : value);
          if (!isDeep) {
            return baseAssign(result, value);
          }
        } else {
          return cloneableTags[tag]
            ? initCloneByTag(value, tag, isDeep)
            : (object ? value : {});
        }
      }
      // Check for circular references and return its corresponding clone.
      stackA || (stackA = []);
      stackB || (stackB = []);

      var length = stackA.length;
      while (length--) {
        if (stackA[length] == value) {
          return stackB[length];
        }
      }
      // Add the source value to the stack of traversed objects and associate it with its clone.
      stackA.push(value);
      stackB.push(result);

      // Recursively populate clone (susceptible to call stack limits).
      (isArr ? arrayEach : baseForOwn)(value, function(subValue, key) {
        result[key] = baseClone(subValue, isDeep, customizer, key, value, stackA, stackB);
      });
      return result;
    }

    /**
     * The base implementation of `_.create` without support for assigning
     * properties to the created object.
     *
     * @private
     * @param {Object} prototype The object to inherit from.
     * @returns {Object} Returns the new object.
     */
    var baseCreate = (function() {
      function object() {}
      return function(prototype) {
        if (isObject(prototype)) {
          object.prototype = prototype;
          var result = new object;
          object.prototype = undefined;
        }
        return result || {};
      };
    }());

    /**
     * The base implementation of `_.delay` and `_.defer` which accepts an index
     * of where to slice the arguments to provide to `func`.
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {Object} args The arguments provide to `func`.
     * @returns {number} Returns the timer id.
     */
    function baseDelay(func, wait, args) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return setTimeout(function() { func.apply(undefined, args); }, wait);
    }

    /**
     * The base implementation of `_.difference` which accepts a single array
     * of values to exclude.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Array} values The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     */
    function baseDifference(array, values) {
      var length = array ? array.length : 0,
          result = [];

      if (!length) {
        return result;
      }
      var index = -1,
          indexOf = getIndexOf(),
          isCommon = indexOf == baseIndexOf,
          cache = (isCommon && values.length >= LARGE_ARRAY_SIZE) ? createCache(values) : null,
          valuesLength = values.length;

      if (cache) {
        indexOf = cacheIndexOf;
        isCommon = false;
        values = cache;
      }
      outer:
      while (++index < length) {
        var value = array[index];

        if (isCommon && value === value) {
          var valuesIndex = valuesLength;
          while (valuesIndex--) {
            if (values[valuesIndex] === value) {
              continue outer;
            }
          }
          result.push(value);
        }
        else if (indexOf(values, value, 0) < 0) {
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.forEach` without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object|string} Returns `collection`.
     */
    var baseEach = createBaseEach(baseForOwn);

    /**
     * The base implementation of `_.forEachRight` without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object|string} Returns `collection`.
     */
    var baseEachRight = createBaseEach(baseForOwnRight, true);

    /**
     * The base implementation of `_.every` without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`
     */
    function baseEvery(collection, predicate) {
      var result = true;
      baseEach(collection, function(value, index, collection) {
        result = !!predicate(value, index, collection);
        return result;
      });
      return result;
    }

    /**
     * Gets the extremum value of `collection` invoking `iteratee` for each value
     * in `collection` to generate the criterion by which the value is ranked.
     * The `iteratee` is invoked with three arguments: (value, index|key, collection).
     *
     * @private
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} comparator The function used to compare values.
     * @param {*} exValue The initial extremum value.
     * @returns {*} Returns the extremum value.
     */
    function baseExtremum(collection, iteratee, comparator, exValue) {
      var computed = exValue,
          result = computed;

      baseEach(collection, function(value, index, collection) {
        var current = +iteratee(value, index, collection);
        if (comparator(current, computed) || (current === exValue && current === result)) {
          computed = current;
          result = value;
        }
      });
      return result;
    }

    /**
     * The base implementation of `_.fill` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     */
    function baseFill(array, value, start, end) {
      var length = array.length;

      start = start == null ? 0 : (+start || 0);
      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = (end === undefined || end > length) ? length : (+end || 0);
      if (end < 0) {
        end += length;
      }
      length = start > end ? 0 : (end >>> 0);
      start >>>= 0;

      while (start < length) {
        array[start++] = value;
      }
      return array;
    }

    /**
     * The base implementation of `_.filter` without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     */
    function baseFilter(collection, predicate) {
      var result = [];
      baseEach(collection, function(value, index, collection) {
        if (predicate(value, index, collection)) {
          result.push(value);
        }
      });
      return result;
    }

    /**
     * The base implementation of `_.find`, `_.findLast`, `_.findKey`, and `_.findLastKey`,
     * without support for callback shorthands and `this` binding, which iterates
     * over `collection` using the provided `eachFunc`.
     *
     * @private
     * @param {Array|Object|string} collection The collection to search.
     * @param {Function} predicate The function invoked per iteration.
     * @param {Function} eachFunc The function to iterate over `collection`.
     * @param {boolean} [retKey] Specify returning the key of the found element
     *  instead of the element itself.
     * @returns {*} Returns the found element or its key, else `undefined`.
     */
    function baseFind(collection, predicate, eachFunc, retKey) {
      var result;
      eachFunc(collection, function(value, key, collection) {
        if (predicate(value, key, collection)) {
          result = retKey ? key : value;
          return false;
        }
      });
      return result;
    }

    /**
     * The base implementation of `_.flatten` with added support for restricting
     * flattening and specifying the start index.
     *
     * @private
     * @param {Array} array The array to flatten.
     * @param {boolean} [isDeep] Specify a deep flatten.
     * @param {boolean} [isStrict] Restrict flattening to arrays-like objects.
     * @param {Array} [result=[]] The initial result value.
     * @returns {Array} Returns the new flattened array.
     */
    function baseFlatten(array, isDeep, isStrict, result) {
      result || (result = []);

      var index = -1,
          length = array.length;

      while (++index < length) {
        var value = array[index];
        if (isObjectLike(value) && isArrayLike(value) &&
            (isStrict || isArray(value) || isArguments(value))) {
          if (isDeep) {
            // Recursively flatten arrays (susceptible to call stack limits).
            baseFlatten(value, isDeep, isStrict, result);
          } else {
            arrayPush(result, value);
          }
        } else if (!isStrict) {
          result[result.length] = value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `baseForIn` and `baseForOwn` which iterates
     * over `object` properties returned by `keysFunc` invoking `iteratee` for
     * each property. Iteratee functions may exit iteration early by explicitly
     * returning `false`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseFor = createBaseFor();

    /**
     * This function is like `baseFor` except that it iterates over properties
     * in the opposite order.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseForRight = createBaseFor(true);

    /**
     * The base implementation of `_.forIn` without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForIn(object, iteratee) {
      return baseFor(object, iteratee, keysIn);
    }

    /**
     * The base implementation of `_.forOwn` without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwn(object, iteratee) {
      return baseFor(object, iteratee, keys);
    }

    /**
     * The base implementation of `_.forOwnRight` without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwnRight(object, iteratee) {
      return baseForRight(object, iteratee, keys);
    }

    /**
     * The base implementation of `_.functions` which creates an array of
     * `object` function property names filtered from those provided.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Array} props The property names to filter.
     * @returns {Array} Returns the new array of filtered property names.
     */
    function baseFunctions(object, props) {
      var index = -1,
          length = props.length,
          resIndex = -1,
          result = [];

      while (++index < length) {
        var key = props[index];
        if (isFunction(object[key])) {
          result[++resIndex] = key;
        }
      }
      return result;
    }

    /**
     * The base implementation of `get` without support for string paths
     * and default values.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array} path The path of the property to get.
     * @param {string} [pathKey] The key representation of path.
     * @returns {*} Returns the resolved value.
     */
    function baseGet(object, path, pathKey) {
      if (object == null) {
        return;
      }
      if (pathKey !== undefined && pathKey in toObject(object)) {
        path = [pathKey];
      }
      var index = 0,
          length = path.length;

      while (object != null && index < length) {
        object = object[path[index++]];
      }
      return (index && index == length) ? object : undefined;
    }

    /**
     * The base implementation of `_.isEqual` without support for `this` binding
     * `customizer` functions.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {Function} [customizer] The function to customize comparing values.
     * @param {boolean} [isLoose] Specify performing partial comparisons.
     * @param {Array} [stackA] Tracks traversed `value` objects.
     * @param {Array} [stackB] Tracks traversed `other` objects.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     */
    function baseIsEqual(value, other, customizer, isLoose, stackA, stackB) {
      if (value === other) {
        return true;
      }
      if (value == null || other == null || (!isObject(value) && !isObjectLike(other))) {
        return value !== value && other !== other;
      }
      return baseIsEqualDeep(value, other, baseIsEqual, customizer, isLoose, stackA, stackB);
    }

    /**
     * A specialized version of `baseIsEqual` for arrays and objects which performs
     * deep comparisons and tracks traversed objects enabling objects with circular
     * references to be compared.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Function} [customizer] The function to customize comparing objects.
     * @param {boolean} [isLoose] Specify performing partial comparisons.
     * @param {Array} [stackA=[]] Tracks traversed `value` objects.
     * @param {Array} [stackB=[]] Tracks traversed `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function baseIsEqualDeep(object, other, equalFunc, customizer, isLoose, stackA, stackB) {
      var objIsArr = isArray(object),
          othIsArr = isArray(other),
          objTag = arrayTag,
          othTag = arrayTag;

      if (!objIsArr) {
        objTag = objToString.call(object);
        if (objTag == argsTag) {
          objTag = objectTag;
        } else if (objTag != objectTag) {
          objIsArr = isTypedArray(object);
        }
      }
      if (!othIsArr) {
        othTag = objToString.call(other);
        if (othTag == argsTag) {
          othTag = objectTag;
        } else if (othTag != objectTag) {
          othIsArr = isTypedArray(other);
        }
      }
      var objIsObj = objTag == objectTag,
          othIsObj = othTag == objectTag,
          isSameTag = objTag == othTag;

      if (isSameTag && !(objIsArr || objIsObj)) {
        return equalByTag(object, other, objTag);
      }
      if (!isLoose) {
        var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
            othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

        if (objIsWrapped || othIsWrapped) {
          return equalFunc(objIsWrapped ? object.value() : object, othIsWrapped ? other.value() : other, customizer, isLoose, stackA, stackB);
        }
      }
      if (!isSameTag) {
        return false;
      }
      // Assume cyclic values are equal.
      // For more information on detecting circular references see https://es5.github.io/#JO.
      stackA || (stackA = []);
      stackB || (stackB = []);

      var length = stackA.length;
      while (length--) {
        if (stackA[length] == object) {
          return stackB[length] == other;
        }
      }
      // Add `object` and `other` to the stack of traversed objects.
      stackA.push(object);
      stackB.push(other);

      var result = (objIsArr ? equalArrays : equalObjects)(object, other, equalFunc, customizer, isLoose, stackA, stackB);

      stackA.pop();
      stackB.pop();

      return result;
    }

    /**
     * The base implementation of `_.isMatch` without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Array} matchData The propery names, values, and compare flags to match.
     * @param {Function} [customizer] The function to customize comparing objects.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     */
    function baseIsMatch(object, matchData, customizer) {
      var index = matchData.length,
          length = index,
          noCustomizer = !customizer;

      if (object == null) {
        return !length;
      }
      object = toObject(object);
      while (index--) {
        var data = matchData[index];
        if ((noCustomizer && data[2])
              ? data[1] !== object[data[0]]
              : !(data[0] in object)
            ) {
          return false;
        }
      }
      while (++index < length) {
        data = matchData[index];
        var key = data[0],
            objValue = object[key],
            srcValue = data[1];

        if (noCustomizer && data[2]) {
          if (objValue === undefined && !(key in object)) {
            return false;
          }
        } else {
          var result = customizer ? customizer(objValue, srcValue, key) : undefined;
          if (!(result === undefined ? baseIsEqual(srcValue, objValue, customizer, true) : result)) {
            return false;
          }
        }
      }
      return true;
    }

    /**
     * The base implementation of `_.map` without support for callback shorthands
     * and `this` binding.
     *
     * @private
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     */
    function baseMap(collection, iteratee) {
      var index = -1,
          result = isArrayLike(collection) ? Array(collection.length) : [];

      baseEach(collection, function(value, key, collection) {
        result[++index] = iteratee(value, key, collection);
      });
      return result;
    }

    /**
     * The base implementation of `_.matches` which does not clone `source`.
     *
     * @private
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new function.
     */
    function baseMatches(source) {
      var matchData = getMatchData(source);
      if (matchData.length == 1 && matchData[0][2]) {
        var key = matchData[0][0],
            value = matchData[0][1];

        return function(object) {
          if (object == null) {
            return false;
          }
          return object[key] === value && (value !== undefined || (key in toObject(object)));
        };
      }
      return function(object) {
        return baseIsMatch(object, matchData);
      };
    }

    /**
     * The base implementation of `_.matchesProperty` which does not clone `srcValue`.
     *
     * @private
     * @param {string} path The path of the property to get.
     * @param {*} srcValue The value to compare.
     * @returns {Function} Returns the new function.
     */
    function baseMatchesProperty(path, srcValue) {
      var isArr = isArray(path),
          isCommon = isKey(path) && isStrictComparable(srcValue),
          pathKey = (path + '');

      path = toPath(path);
      return function(object) {
        if (object == null) {
          return false;
        }
        var key = pathKey;
        object = toObject(object);
        if ((isArr || !isCommon) && !(key in object)) {
          object = path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));
          if (object == null) {
            return false;
          }
          key = last(path);
          object = toObject(object);
        }
        return object[key] === srcValue
          ? (srcValue !== undefined || (key in object))
          : baseIsEqual(srcValue, object[key], undefined, true);
      };
    }

    /**
     * The base implementation of `_.merge` without support for argument juggling,
     * multiple sources, and `this` binding `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {Function} [customizer] The function to customize merged values.
     * @param {Array} [stackA=[]] Tracks traversed source objects.
     * @param {Array} [stackB=[]] Associates values with source counterparts.
     * @returns {Object} Returns `object`.
     */
    function baseMerge(object, source, customizer, stackA, stackB) {
      if (!isObject(object)) {
        return object;
      }
      var isSrcArr = isArrayLike(source) && (isArray(source) || isTypedArray(source)),
          props = isSrcArr ? undefined : keys(source);

      arrayEach(props || source, function(srcValue, key) {
        if (props) {
          key = srcValue;
          srcValue = source[key];
        }
        if (isObjectLike(srcValue)) {
          stackA || (stackA = []);
          stackB || (stackB = []);
          baseMergeDeep(object, source, key, baseMerge, customizer, stackA, stackB);
        }
        else {
          var value = object[key],
              result = customizer ? customizer(value, srcValue, key, object, source) : undefined,
              isCommon = result === undefined;

          if (isCommon) {
            result = srcValue;
          }
          if ((result !== undefined || (isSrcArr && !(key in object))) &&
              (isCommon || (result === result ? (result !== value) : (value === value)))) {
            object[key] = result;
          }
        }
      });
      return object;
    }

    /**
     * A specialized version of `baseMerge` for arrays and objects which performs
     * deep merges and tracks traversed objects enabling objects with circular
     * references to be merged.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {string} key The key of the value to merge.
     * @param {Function} mergeFunc The function to merge values.
     * @param {Function} [customizer] The function to customize merged values.
     * @param {Array} [stackA=[]] Tracks traversed source objects.
     * @param {Array} [stackB=[]] Associates values with source counterparts.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function baseMergeDeep(object, source, key, mergeFunc, customizer, stackA, stackB) {
      var length = stackA.length,
          srcValue = source[key];

      while (length--) {
        if (stackA[length] == srcValue) {
          object[key] = stackB[length];
          return;
        }
      }
      var value = object[key],
          result = customizer ? customizer(value, srcValue, key, object, source) : undefined,
          isCommon = result === undefined;

      if (isCommon) {
        result = srcValue;
        if (isArrayLike(srcValue) && (isArray(srcValue) || isTypedArray(srcValue))) {
          result = isArray(value)
            ? value
            : (isArrayLike(value) ? arrayCopy(value) : []);
        }
        else if (isPlainObject(srcValue) || isArguments(srcValue)) {
          result = isArguments(value)
            ? toPlainObject(value)
            : (isPlainObject(value) ? value : {});
        }
        else {
          isCommon = false;
        }
      }
      // Add the source value to the stack of traversed objects and associate
      // it with its merged value.
      stackA.push(srcValue);
      stackB.push(result);

      if (isCommon) {
        // Recursively merge objects and arrays (susceptible to call stack limits).
        object[key] = mergeFunc(result, srcValue, customizer, stackA, stackB);
      } else if (result === result ? (result !== value) : (value === value)) {
        object[key] = result;
      }
    }

    /**
     * The base implementation of `_.property` without support for deep paths.
     *
     * @private
     * @param {string} key The key of the property to get.
     * @returns {Function} Returns the new function.
     */
    function baseProperty(key) {
      return function(object) {
        return object == null ? undefined : object[key];
      };
    }

    /**
     * A specialized version of `baseProperty` which supports deep paths.
     *
     * @private
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new function.
     */
    function basePropertyDeep(path) {
      var pathKey = (path + '');
      path = toPath(path);
      return function(object) {
        return baseGet(object, path, pathKey);
      };
    }

    /**
     * The base implementation of `_.pullAt` without support for individual
     * index arguments and capturing the removed elements.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {number[]} indexes The indexes of elements to remove.
     * @returns {Array} Returns `array`.
     */
    function basePullAt(array, indexes) {
      var length = array ? indexes.length : 0;
      while (length--) {
        var index = indexes[length];
        if (index != previous && isIndex(index)) {
          var previous = index;
          splice.call(array, index, 1);
        }
      }
      return array;
    }

    /**
     * The base implementation of `_.random` without support for argument juggling
     * and returning floating-point numbers.
     *
     * @private
     * @param {number} min The minimum possible value.
     * @param {number} max The maximum possible value.
     * @returns {number} Returns the random number.
     */
    function baseRandom(min, max) {
      return min + nativeFloor(nativeRandom() * (max - min + 1));
    }

    /**
     * The base implementation of `_.reduce` and `_.reduceRight` without support
     * for callback shorthands and `this` binding, which iterates over `collection`
     * using the provided `eachFunc`.
     *
     * @private
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {*} accumulator The initial value.
     * @param {boolean} initFromCollection Specify using the first or last element
     *  of `collection` as the initial value.
     * @param {Function} eachFunc The function to iterate over `collection`.
     * @returns {*} Returns the accumulated value.
     */
    function baseReduce(collection, iteratee, accumulator, initFromCollection, eachFunc) {
      eachFunc(collection, function(value, index, collection) {
        accumulator = initFromCollection
          ? (initFromCollection = false, value)
          : iteratee(accumulator, value, index, collection);
      });
      return accumulator;
    }

    /**
     * The base implementation of `setData` without support for hot loop detection.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
    var baseSetData = !metaMap ? identity : function(func, data) {
      metaMap.set(func, data);
      return func;
    };

    /**
     * The base implementation of `_.slice` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function baseSlice(array, start, end) {
      var index = -1,
          length = array.length;

      start = start == null ? 0 : (+start || 0);
      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = (end === undefined || end > length) ? length : (+end || 0);
      if (end < 0) {
        end += length;
      }
      length = start > end ? 0 : ((end - start) >>> 0);
      start >>>= 0;

      var result = Array(length);
      while (++index < length) {
        result[index] = array[index + start];
      }
      return result;
    }

    /**
     * The base implementation of `_.some` without support for callback shorthands
     * and `this` binding.
     *
     * @private
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     */
    function baseSome(collection, predicate) {
      var result;

      baseEach(collection, function(value, index, collection) {
        result = predicate(value, index, collection);
        return !result;
      });
      return !!result;
    }

    /**
     * The base implementation of `_.sortBy` which uses `comparer` to define
     * the sort order of `array` and replaces criteria objects with their
     * corresponding values.
     *
     * @private
     * @param {Array} array The array to sort.
     * @param {Function} comparer The function to define sort order.
     * @returns {Array} Returns `array`.
     */
    function baseSortBy(array, comparer) {
      var length = array.length;

      array.sort(comparer);
      while (length--) {
        array[length] = array[length].value;
      }
      return array;
    }

    /**
     * The base implementation of `_.sortByOrder` without param guards.
     *
     * @private
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
     * @param {boolean[]} orders The sort orders of `iteratees`.
     * @returns {Array} Returns the new sorted array.
     */
    function baseSortByOrder(collection, iteratees, orders) {
      var callback = getCallback(),
          index = -1;

      iteratees = arrayMap(iteratees, function(iteratee) { return callback(iteratee); });

      var result = baseMap(collection, function(value) {
        var criteria = arrayMap(iteratees, function(iteratee) { return iteratee(value); });
        return { 'criteria': criteria, 'index': ++index, 'value': value };
      });

      return baseSortBy(result, function(object, other) {
        return compareMultiple(object, other, orders);
      });
    }

    /**
     * The base implementation of `_.sum` without support for callback shorthands
     * and `this` binding.
     *
     * @private
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {number} Returns the sum.
     */
    function baseSum(collection, iteratee) {
      var result = 0;
      baseEach(collection, function(value, index, collection) {
        result += +iteratee(value, index, collection) || 0;
      });
      return result;
    }

    /**
     * The base implementation of `_.uniq` without support for callback shorthands
     * and `this` binding.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The function invoked per iteration.
     * @returns {Array} Returns the new duplicate-value-free array.
     */
    function baseUniq(array, iteratee) {
      var index = -1,
          indexOf = getIndexOf(),
          length = array.length,
          isCommon = indexOf == baseIndexOf,
          isLarge = isCommon && length >= LARGE_ARRAY_SIZE,
          seen = isLarge ? createCache() : null,
          result = [];

      if (seen) {
        indexOf = cacheIndexOf;
        isCommon = false;
      } else {
        isLarge = false;
        seen = iteratee ? [] : result;
      }
      outer:
      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value, index, array) : value;

        if (isCommon && value === value) {
          var seenIndex = seen.length;
          while (seenIndex--) {
            if (seen[seenIndex] === computed) {
              continue outer;
            }
          }
          if (iteratee) {
            seen.push(computed);
          }
          result.push(value);
        }
        else if (indexOf(seen, computed, 0) < 0) {
          if (iteratee || isLarge) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.values` and `_.valuesIn` which creates an
     * array of `object` property values corresponding to the property names
     * of `props`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array} props The property names to get values for.
     * @returns {Object} Returns the array of property values.
     */
    function baseValues(object, props) {
      var index = -1,
          length = props.length,
          result = Array(length);

      while (++index < length) {
        result[index] = object[props[index]];
      }
      return result;
    }

    /**
     * The base implementation of `_.dropRightWhile`, `_.dropWhile`, `_.takeRightWhile`,
     * and `_.takeWhile` without support for callback shorthands and `this` binding.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {Function} predicate The function invoked per iteration.
     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the slice of `array`.
     */
    function baseWhile(array, predicate, isDrop, fromRight) {
      var length = array.length,
          index = fromRight ? length : -1;

      while ((fromRight ? index-- : ++index < length) && predicate(array[index], index, array)) {}
      return isDrop
        ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))
        : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));
    }

    /**
     * The base implementation of `wrapperValue` which returns the result of
     * performing a sequence of actions on the unwrapped `value`, where each
     * successive action is supplied the return value of the previous.
     *
     * @private
     * @param {*} value The unwrapped value.
     * @param {Array} actions Actions to peform to resolve the unwrapped value.
     * @returns {*} Returns the resolved value.
     */
    function baseWrapperValue(value, actions) {
      var result = value;
      if (result instanceof LazyWrapper) {
        result = result.value();
      }
      var index = -1,
          length = actions.length;

      while (++index < length) {
        var action = actions[index];
        result = action.func.apply(action.thisArg, arrayPush([result], action.args));
      }
      return result;
    }

    /**
     * Performs a binary search of `array` to determine the index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */
    function binaryIndex(array, value, retHighest) {
      var low = 0,
          high = array ? array.length : low;

      if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
        while (low < high) {
          var mid = (low + high) >>> 1,
              computed = array[mid];

          if ((retHighest ? (computed <= value) : (computed < value)) && computed !== null) {
            low = mid + 1;
          } else {
            high = mid;
          }
        }
        return high;
      }
      return binaryIndexBy(array, value, identity, retHighest);
    }

    /**
     * This function is like `binaryIndex` except that it invokes `iteratee` for
     * `value` and each element of `array` to compute their sort ranking. The
     * iteratee is invoked with one argument; (value).
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */
    function binaryIndexBy(array, value, iteratee, retHighest) {
      value = iteratee(value);

      var low = 0,
          high = array ? array.length : 0,
          valIsNaN = value !== value,
          valIsNull = value === null,
          valIsUndef = value === undefined;

      while (low < high) {
        var mid = nativeFloor((low + high) / 2),
            computed = iteratee(array[mid]),
            isDef = computed !== undefined,
            isReflexive = computed === computed;

        if (valIsNaN) {
          var setLow = isReflexive || retHighest;
        } else if (valIsNull) {
          setLow = isReflexive && isDef && (retHighest || computed != null);
        } else if (valIsUndef) {
          setLow = isReflexive && (retHighest || isDef);
        } else if (computed == null) {
          setLow = false;
        } else {
          setLow = retHighest ? (computed <= value) : (computed < value);
        }
        if (setLow) {
          low = mid + 1;
        } else {
          high = mid;
        }
      }
      return nativeMin(high, MAX_ARRAY_INDEX);
    }

    /**
     * A specialized version of `baseCallback` which only supports `this` binding
     * and specifying the number of arguments to provide to `func`.
     *
     * @private
     * @param {Function} func The function to bind.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {number} [argCount] The number of arguments to provide to `func`.
     * @returns {Function} Returns the callback.
     */
    function bindCallback(func, thisArg, argCount) {
      if (typeof func != 'function') {
        return identity;
      }
      if (thisArg === undefined) {
        return func;
      }
      switch (argCount) {
        case 1: return function(value) {
          return func.call(thisArg, value);
        };
        case 3: return function(value, index, collection) {
          return func.call(thisArg, value, index, collection);
        };
        case 4: return function(accumulator, value, index, collection) {
          return func.call(thisArg, accumulator, value, index, collection);
        };
        case 5: return function(value, other, key, object, source) {
          return func.call(thisArg, value, other, key, object, source);
        };
      }
      return function() {
        return func.apply(thisArg, arguments);
      };
    }

    /**
     * Creates a clone of the given array buffer.
     *
     * @private
     * @param {ArrayBuffer} buffer The array buffer to clone.
     * @returns {ArrayBuffer} Returns the cloned array buffer.
     */
    function bufferClone(buffer) {
      var result = new ArrayBuffer(buffer.byteLength),
          view = new Uint8Array(result);

      view.set(new Uint8Array(buffer));
      return result;
    }

    /**
     * Creates an array that is the composition of partially applied arguments,
     * placeholders, and provided arguments into a single array of arguments.
     *
     * @private
     * @param {Array|Object} args The provided arguments.
     * @param {Array} partials The arguments to prepend to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @returns {Array} Returns the new array of composed arguments.
     */
    function composeArgs(args, partials, holders) {
      var holdersLength = holders.length,
          argsIndex = -1,
          argsLength = nativeMax(args.length - holdersLength, 0),
          leftIndex = -1,
          leftLength = partials.length,
          result = Array(leftLength + argsLength);

      while (++leftIndex < leftLength) {
        result[leftIndex] = partials[leftIndex];
      }
      while (++argsIndex < holdersLength) {
        result[holders[argsIndex]] = args[argsIndex];
      }
      while (argsLength--) {
        result[leftIndex++] = args[argsIndex++];
      }
      return result;
    }

    /**
     * This function is like `composeArgs` except that the arguments composition
     * is tailored for `_.partialRight`.
     *
     * @private
     * @param {Array|Object} args The provided arguments.
     * @param {Array} partials The arguments to append to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @returns {Array} Returns the new array of composed arguments.
     */
    function composeArgsRight(args, partials, holders) {
      var holdersIndex = -1,
          holdersLength = holders.length,
          argsIndex = -1,
          argsLength = nativeMax(args.length - holdersLength, 0),
          rightIndex = -1,
          rightLength = partials.length,
          result = Array(argsLength + rightLength);

      while (++argsIndex < argsLength) {
        result[argsIndex] = args[argsIndex];
      }
      var offset = argsIndex;
      while (++rightIndex < rightLength) {
        result[offset + rightIndex] = partials[rightIndex];
      }
      while (++holdersIndex < holdersLength) {
        result[offset + holders[holdersIndex]] = args[argsIndex++];
      }
      return result;
    }

    /**
     * Creates a `_.countBy`, `_.groupBy`, `_.indexBy`, or `_.partition` function.
     *
     * @private
     * @param {Function} setter The function to set keys and values of the accumulator object.
     * @param {Function} [initializer] The function to initialize the accumulator object.
     * @returns {Function} Returns the new aggregator function.
     */
    function createAggregator(setter, initializer) {
      return function(collection, iteratee, thisArg) {
        var result = initializer ? initializer() : {};
        iteratee = getCallback(iteratee, thisArg, 3);

        if (isArray(collection)) {
          var index = -1,
              length = collection.length;

          while (++index < length) {
            var value = collection[index];
            setter(result, value, iteratee(value, index, collection), collection);
          }
        } else {
          baseEach(collection, function(value, key, collection) {
            setter(result, value, iteratee(value, key, collection), collection);
          });
        }
        return result;
      };
    }

    /**
     * Creates a `_.assign`, `_.defaults`, or `_.merge` function.
     *
     * @private
     * @param {Function} assigner The function to assign values.
     * @returns {Function} Returns the new assigner function.
     */
    function createAssigner(assigner) {
      return restParam(function(object, sources) {
        var index = -1,
            length = object == null ? 0 : sources.length,
            customizer = length > 2 ? sources[length - 2] : undefined,
            guard = length > 2 ? sources[2] : undefined,
            thisArg = length > 1 ? sources[length - 1] : undefined;

        if (typeof customizer == 'function') {
          customizer = bindCallback(customizer, thisArg, 5);
          length -= 2;
        } else {
          customizer = typeof thisArg == 'function' ? thisArg : undefined;
          length -= (customizer ? 1 : 0);
        }
        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
          customizer = length < 3 ? undefined : customizer;
          length = 1;
        }
        while (++index < length) {
          var source = sources[index];
          if (source) {
            assigner(object, source, customizer);
          }
        }
        return object;
      });
    }

    /**
     * Creates a `baseEach` or `baseEachRight` function.
     *
     * @private
     * @param {Function} eachFunc The function to iterate over a collection.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseEach(eachFunc, fromRight) {
      return function(collection, iteratee) {
        var length = collection ? getLength(collection) : 0;
        if (!isLength(length)) {
          return eachFunc(collection, iteratee);
        }
        var index = fromRight ? length : -1,
            iterable = toObject(collection);

        while ((fromRight ? index-- : ++index < length)) {
          if (iteratee(iterable[index], index, iterable) === false) {
            break;
          }
        }
        return collection;
      };
    }

    /**
     * Creates a base function for `_.forIn` or `_.forInRight`.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseFor(fromRight) {
      return function(object, iteratee, keysFunc) {
        var iterable = toObject(object),
            props = keysFunc(object),
            length = props.length,
            index = fromRight ? length : -1;

        while ((fromRight ? index-- : ++index < length)) {
          var key = props[index];
          if (iteratee(iterable[key], key, iterable) === false) {
            break;
          }
        }
        return object;
      };
    }

    /**
     * Creates a function that wraps `func` and invokes it with the `this`
     * binding of `thisArg`.
     *
     * @private
     * @param {Function} func The function to bind.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @returns {Function} Returns the new bound function.
     */
    function createBindWrapper(func, thisArg) {
      var Ctor = createCtorWrapper(func);

      function wrapper() {
        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
        return fn.apply(thisArg, arguments);
      }
      return wrapper;
    }

    /**
     * Creates a `Set` cache object to optimize linear searches of large arrays.
     *
     * @private
     * @param {Array} [values] The values to cache.
     * @returns {null|Object} Returns the new cache object if `Set` is supported, else `null`.
     */
    function createCache(values) {
      return (nativeCreate && Set) ? new SetCache(values) : null;
    }

    /**
     * Creates a function that produces compound words out of the words in a
     * given string.
     *
     * @private
     * @param {Function} callback The function to combine each word.
     * @returns {Function} Returns the new compounder function.
     */
    function createCompounder(callback) {
      return function(string) {
        var index = -1,
            array = words(deburr(string)),
            length = array.length,
            result = '';

        while (++index < length) {
          result = callback(result, array[index], index);
        }
        return result;
      };
    }

    /**
     * Creates a function that produces an instance of `Ctor` regardless of
     * whether it was invoked as part of a `new` expression or by `call` or `apply`.
     *
     * @private
     * @param {Function} Ctor The constructor to wrap.
     * @returns {Function} Returns the new wrapped function.
     */
    function createCtorWrapper(Ctor) {
      return function() {
        // Use a `switch` statement to work with class constructors.
        // See http://ecma-international.org/ecma-262/6.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
        // for more details.
        var args = arguments;
        switch (args.length) {
          case 0: return new Ctor;
          case 1: return new Ctor(args[0]);
          case 2: return new Ctor(args[0], args[1]);
          case 3: return new Ctor(args[0], args[1], args[2]);
          case 4: return new Ctor(args[0], args[1], args[2], args[3]);
          case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);
          case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
          case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
        }
        var thisBinding = baseCreate(Ctor.prototype),
            result = Ctor.apply(thisBinding, args);

        // Mimic the constructor's `return` behavior.
        // See https://es5.github.io/#x13.2.2 for more details.
        return isObject(result) ? result : thisBinding;
      };
    }

    /**
     * Creates a `_.curry` or `_.curryRight` function.
     *
     * @private
     * @param {boolean} flag The curry bit flag.
     * @returns {Function} Returns the new curry function.
     */
    function createCurry(flag) {
      function curryFunc(func, arity, guard) {
        if (guard && isIterateeCall(func, arity, guard)) {
          arity = undefined;
        }
        var result = createWrapper(func, flag, undefined, undefined, undefined, undefined, undefined, arity);
        result.placeholder = curryFunc.placeholder;
        return result;
      }
      return curryFunc;
    }

    /**
     * Creates a `_.defaults` or `_.defaultsDeep` function.
     *
     * @private
     * @param {Function} assigner The function to assign values.
     * @param {Function} customizer The function to customize assigned values.
     * @returns {Function} Returns the new defaults function.
     */
    function createDefaults(assigner, customizer) {
      return restParam(function(args) {
        var object = args[0];
        if (object == null) {
          return object;
        }
        args.push(customizer);
        return assigner.apply(undefined, args);
      });
    }

    /**
     * Creates a `_.max` or `_.min` function.
     *
     * @private
     * @param {Function} comparator The function used to compare values.
     * @param {*} exValue The initial extremum value.
     * @returns {Function} Returns the new extremum function.
     */
    function createExtremum(comparator, exValue) {
      return function(collection, iteratee, thisArg) {
        if (thisArg && isIterateeCall(collection, iteratee, thisArg)) {
          iteratee = undefined;
        }
        iteratee = getCallback(iteratee, thisArg, 3);
        if (iteratee.length == 1) {
          collection = isArray(collection) ? collection : toIterable(collection);
          var result = arrayExtremum(collection, iteratee, comparator, exValue);
          if (!(collection.length && result === exValue)) {
            return result;
          }
        }
        return baseExtremum(collection, iteratee, comparator, exValue);
      };
    }

    /**
     * Creates a `_.find` or `_.findLast` function.
     *
     * @private
     * @param {Function} eachFunc The function to iterate over a collection.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new find function.
     */
    function createFind(eachFunc, fromRight) {
      return function(collection, predicate, thisArg) {
        predicate = getCallback(predicate, thisArg, 3);
        if (isArray(collection)) {
          var index = baseFindIndex(collection, predicate, fromRight);
          return index > -1 ? collection[index] : undefined;
        }
        return baseFind(collection, predicate, eachFunc);
      };
    }

    /**
     * Creates a `_.findIndex` or `_.findLastIndex` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new find function.
     */
    function createFindIndex(fromRight) {
      return function(array, predicate, thisArg) {
        if (!(array && array.length)) {
          return -1;
        }
        predicate = getCallback(predicate, thisArg, 3);
        return baseFindIndex(array, predicate, fromRight);
      };
    }

    /**
     * Creates a `_.findKey` or `_.findLastKey` function.
     *
     * @private
     * @param {Function} objectFunc The function to iterate over an object.
     * @returns {Function} Returns the new find function.
     */
    function createFindKey(objectFunc) {
      return function(object, predicate, thisArg) {
        predicate = getCallback(predicate, thisArg, 3);
        return baseFind(object, predicate, objectFunc, true);
      };
    }

    /**
     * Creates a `_.flow` or `_.flowRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new flow function.
     */
    function createFlow(fromRight) {
      return function() {
        var wrapper,
            length = arguments.length,
            index = fromRight ? length : -1,
            leftIndex = 0,
            funcs = Array(length);

        while ((fromRight ? index-- : ++index < length)) {
          var func = funcs[leftIndex++] = arguments[index];
          if (typeof func != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          if (!wrapper && LodashWrapper.prototype.thru && getFuncName(func) == 'wrapper') {
            wrapper = new LodashWrapper([], true);
          }
        }
        index = wrapper ? -1 : length;
        while (++index < length) {
          func = funcs[index];

          var funcName = getFuncName(func),
              data = funcName == 'wrapper' ? getData(func) : undefined;

          if (data && isLaziable(data[0]) && data[1] == (ARY_FLAG | CURRY_FLAG | PARTIAL_FLAG | REARG_FLAG) && !data[4].length && data[9] == 1) {
            wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
          } else {
            wrapper = (func.length == 1 && isLaziable(func)) ? wrapper[funcName]() : wrapper.thru(func);
          }
        }
        return function() {
          var args = arguments,
              value = args[0];

          if (wrapper && args.length == 1 && isArray(value) && value.length >= LARGE_ARRAY_SIZE) {
            return wrapper.plant(value).value();
          }
          var index = 0,
              result = length ? funcs[index].apply(this, args) : value;

          while (++index < length) {
            result = funcs[index].call(this, result);
          }
          return result;
        };
      };
    }

    /**
     * Creates a function for `_.forEach` or `_.forEachRight`.
     *
     * @private
     * @param {Function} arrayFunc The function to iterate over an array.
     * @param {Function} eachFunc The function to iterate over a collection.
     * @returns {Function} Returns the new each function.
     */
    function createForEach(arrayFunc, eachFunc) {
      return function(collection, iteratee, thisArg) {
        return (typeof iteratee == 'function' && thisArg === undefined && isArray(collection))
          ? arrayFunc(collection, iteratee)
          : eachFunc(collection, bindCallback(iteratee, thisArg, 3));
      };
    }

    /**
     * Creates a function for `_.forIn` or `_.forInRight`.
     *
     * @private
     * @param {Function} objectFunc The function to iterate over an object.
     * @returns {Function} Returns the new each function.
     */
    function createForIn(objectFunc) {
      return function(object, iteratee, thisArg) {
        if (typeof iteratee != 'function' || thisArg !== undefined) {
          iteratee = bindCallback(iteratee, thisArg, 3);
        }
        return objectFunc(object, iteratee, keysIn);
      };
    }

    /**
     * Creates a function for `_.forOwn` or `_.forOwnRight`.
     *
     * @private
     * @param {Function} objectFunc The function to iterate over an object.
     * @returns {Function} Returns the new each function.
     */
    function createForOwn(objectFunc) {
      return function(object, iteratee, thisArg) {
        if (typeof iteratee != 'function' || thisArg !== undefined) {
          iteratee = bindCallback(iteratee, thisArg, 3);
        }
        return objectFunc(object, iteratee);
      };
    }

    /**
     * Creates a function for `_.mapKeys` or `_.mapValues`.
     *
     * @private
     * @param {boolean} [isMapKeys] Specify mapping keys instead of values.
     * @returns {Function} Returns the new map function.
     */
    function createObjectMapper(isMapKeys) {
      return function(object, iteratee, thisArg) {
        var result = {};
        iteratee = getCallback(iteratee, thisArg, 3);

        baseForOwn(object, function(value, key, object) {
          var mapped = iteratee(value, key, object);
          key = isMapKeys ? mapped : key;
          value = isMapKeys ? value : mapped;
          result[key] = value;
        });
        return result;
      };
    }

    /**
     * Creates a function for `_.padLeft` or `_.padRight`.
     *
     * @private
     * @param {boolean} [fromRight] Specify padding from the right.
     * @returns {Function} Returns the new pad function.
     */
    function createPadDir(fromRight) {
      return function(string, length, chars) {
        string = baseToString(string);
        return (fromRight ? string : '') + createPadding(string, length, chars) + (fromRight ? '' : string);
      };
    }

    /**
     * Creates a `_.partial` or `_.partialRight` function.
     *
     * @private
     * @param {boolean} flag The partial bit flag.
     * @returns {Function} Returns the new partial function.
     */
    function createPartial(flag) {
      var partialFunc = restParam(function(func, partials) {
        var holders = replaceHolders(partials, partialFunc.placeholder);
        return createWrapper(func, flag, undefined, partials, holders);
      });
      return partialFunc;
    }

    /**
     * Creates a function for `_.reduce` or `_.reduceRight`.
     *
     * @private
     * @param {Function} arrayFunc The function to iterate over an array.
     * @param {Function} eachFunc The function to iterate over a collection.
     * @returns {Function} Returns the new each function.
     */
    function createReduce(arrayFunc, eachFunc) {
      return function(collection, iteratee, accumulator, thisArg) {
        var initFromArray = arguments.length < 3;
        return (typeof iteratee == 'function' && thisArg === undefined && isArray(collection))
          ? arrayFunc(collection, iteratee, accumulator, initFromArray)
          : baseReduce(collection, getCallback(iteratee, thisArg, 4), accumulator, initFromArray, eachFunc);
      };
    }

    /**
     * Creates a function that wraps `func` and invokes it with optional `this`
     * binding of, partial application, and currying.
     *
     * @private
     * @param {Function|string} func The function or method name to reference.
     * @param {number} bitmask The bitmask of flags. See `createWrapper` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [partialsRight] The arguments to append to those provided to the new function.
     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createHybridWrapper(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
      var isAry = bitmask & ARY_FLAG,
          isBind = bitmask & BIND_FLAG,
          isBindKey = bitmask & BIND_KEY_FLAG,
          isCurry = bitmask & CURRY_FLAG,
          isCurryBound = bitmask & CURRY_BOUND_FLAG,
          isCurryRight = bitmask & CURRY_RIGHT_FLAG,
          Ctor = isBindKey ? undefined : createCtorWrapper(func);

      function wrapper() {
        // Avoid `arguments` object use disqualifying optimizations by
        // converting it to an array before providing it to other functions.
        var length = arguments.length,
            index = length,
            args = Array(length);

        while (index--) {
          args[index] = arguments[index];
        }
        if (partials) {
          args = composeArgs(args, partials, holders);
        }
        if (partialsRight) {
          args = composeArgsRight(args, partialsRight, holdersRight);
        }
        if (isCurry || isCurryRight) {
          var placeholder = wrapper.placeholder,
              argsHolders = replaceHolders(args, placeholder);

          length -= argsHolders.length;
          if (length < arity) {
            var newArgPos = argPos ? arrayCopy(argPos) : undefined,
                newArity = nativeMax(arity - length, 0),
                newsHolders = isCurry ? argsHolders : undefined,
                newHoldersRight = isCurry ? undefined : argsHolders,
                newPartials = isCurry ? args : undefined,
                newPartialsRight = isCurry ? undefined : args;

            bitmask |= (isCurry ? PARTIAL_FLAG : PARTIAL_RIGHT_FLAG);
            bitmask &= ~(isCurry ? PARTIAL_RIGHT_FLAG : PARTIAL_FLAG);

            if (!isCurryBound) {
              bitmask &= ~(BIND_FLAG | BIND_KEY_FLAG);
            }
            var newData = [func, bitmask, thisArg, newPartials, newsHolders, newPartialsRight, newHoldersRight, newArgPos, ary, newArity],
                result = createHybridWrapper.apply(undefined, newData);

            if (isLaziable(func)) {
              setData(result, newData);
            }
            result.placeholder = placeholder;
            return result;
          }
        }
        var thisBinding = isBind ? thisArg : this,
            fn = isBindKey ? thisBinding[func] : func;

        if (argPos) {
          args = reorder(args, argPos);
        }
        if (isAry && ary < args.length) {
          args.length = ary;
        }
        if (this && this !== root && this instanceof wrapper) {
          fn = Ctor || createCtorWrapper(func);
        }
        return fn.apply(thisBinding, args);
      }
      return wrapper;
    }

    /**
     * Creates the padding required for `string` based on the given `length`.
     * The `chars` string is truncated if the number of characters exceeds `length`.
     *
     * @private
     * @param {string} string The string to create padding for.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the pad for `string`.
     */
    function createPadding(string, length, chars) {
      var strLength = string.length;
      length = +length;

      if (strLength >= length || !nativeIsFinite(length)) {
        return '';
      }
      var padLength = length - strLength;
      chars = chars == null ? ' ' : (chars + '');
      return repeat(chars, nativeCeil(padLength / chars.length)).slice(0, padLength);
    }

    /**
     * Creates a function that wraps `func` and invokes it with the optional `this`
     * binding of `thisArg` and the `partials` prepended to those provided to
     * the wrapper.
     *
     * @private
     * @param {Function} func The function to partially apply arguments to.
     * @param {number} bitmask The bitmask of flags. See `createWrapper` for more details.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {Array} partials The arguments to prepend to those provided to the new function.
     * @returns {Function} Returns the new bound function.
     */
    function createPartialWrapper(func, bitmask, thisArg, partials) {
      var isBind = bitmask & BIND_FLAG,
          Ctor = createCtorWrapper(func);

      function wrapper() {
        // Avoid `arguments` object use disqualifying optimizations by
        // converting it to an array before providing it `func`.
        var argsIndex = -1,
            argsLength = arguments.length,
            leftIndex = -1,
            leftLength = partials.length,
            args = Array(leftLength + argsLength);

        while (++leftIndex < leftLength) {
          args[leftIndex] = partials[leftIndex];
        }
        while (argsLength--) {
          args[leftIndex++] = arguments[++argsIndex];
        }
        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
        return fn.apply(isBind ? thisArg : this, args);
      }
      return wrapper;
    }

    /**
     * Creates a `_.ceil`, `_.floor`, or `_.round` function.
     *
     * @private
     * @param {string} methodName The name of the `Math` method to use when rounding.
     * @returns {Function} Returns the new round function.
     */
    function createRound(methodName) {
      var func = Math[methodName];
      return function(number, precision) {
        precision = precision === undefined ? 0 : (+precision || 0);
        if (precision) {
          precision = pow(10, precision);
          return func(number * precision) / precision;
        }
        return func(number);
      };
    }

    /**
     * Creates a `_.sortedIndex` or `_.sortedLastIndex` function.
     *
     * @private
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {Function} Returns the new index function.
     */
    function createSortedIndex(retHighest) {
      return function(array, value, iteratee, thisArg) {
        var callback = getCallback(iteratee);
        return (iteratee == null && callback === baseCallback)
          ? binaryIndex(array, value, retHighest)
          : binaryIndexBy(array, value, callback(iteratee, thisArg, 1), retHighest);
      };
    }

    /**
     * Creates a function that either curries or invokes `func` with optional
     * `this` binding and partially applied arguments.
     *
     * @private
     * @param {Function|string} func The function or method name to reference.
     * @param {number} bitmask The bitmask of flags.
     *  The bitmask may be composed of the following flags:
     *     1 - `_.bind`
     *     2 - `_.bindKey`
     *     4 - `_.curry` or `_.curryRight` of a bound function
     *     8 - `_.curry`
     *    16 - `_.curryRight`
     *    32 - `_.partial`
     *    64 - `_.partialRight`
     *   128 - `_.rearg`
     *   256 - `_.ary`
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to be partially applied.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createWrapper(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
      var isBindKey = bitmask & BIND_KEY_FLAG;
      if (!isBindKey && typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var length = partials ? partials.length : 0;
      if (!length) {
        bitmask &= ~(PARTIAL_FLAG | PARTIAL_RIGHT_FLAG);
        partials = holders = undefined;
      }
      length -= (holders ? holders.length : 0);
      if (bitmask & PARTIAL_RIGHT_FLAG) {
        var partialsRight = partials,
            holdersRight = holders;

        partials = holders = undefined;
      }
      var data = isBindKey ? undefined : getData(func),
          newData = [func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity];

      if (data) {
        mergeData(newData, data);
        bitmask = newData[1];
        arity = newData[9];
      }
      newData[9] = arity == null
        ? (isBindKey ? 0 : func.length)
        : (nativeMax(arity - length, 0) || 0);

      if (bitmask == BIND_FLAG) {
        var result = createBindWrapper(newData[0], newData[2]);
      } else if ((bitmask == PARTIAL_FLAG || bitmask == (BIND_FLAG | PARTIAL_FLAG)) && !newData[4].length) {
        result = createPartialWrapper.apply(undefined, newData);
      } else {
        result = createHybridWrapper.apply(undefined, newData);
      }
      var setter = data ? baseSetData : setData;
      return setter(result, newData);
    }

    /**
     * A specialized version of `baseIsEqualDeep` for arrays with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Array} array The array to compare.
     * @param {Array} other The other array to compare.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Function} [customizer] The function to customize comparing arrays.
     * @param {boolean} [isLoose] Specify performing partial comparisons.
     * @param {Array} [stackA] Tracks traversed `value` objects.
     * @param {Array} [stackB] Tracks traversed `other` objects.
     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
     */
    function equalArrays(array, other, equalFunc, customizer, isLoose, stackA, stackB) {
      var index = -1,
          arrLength = array.length,
          othLength = other.length;

      if (arrLength != othLength && !(isLoose && othLength > arrLength)) {
        return false;
      }
      // Ignore non-index properties.
      while (++index < arrLength) {
        var arrValue = array[index],
            othValue = other[index],
            result = customizer ? customizer(isLoose ? othValue : arrValue, isLoose ? arrValue : othValue, index) : undefined;

        if (result !== undefined) {
          if (result) {
            continue;
          }
          return false;
        }
        // Recursively compare arrays (susceptible to call stack limits).
        if (isLoose) {
          if (!arraySome(other, function(othValue) {
                return arrValue === othValue || equalFunc(arrValue, othValue, customizer, isLoose, stackA, stackB);
              })) {
            return false;
          }
        } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, customizer, isLoose, stackA, stackB))) {
          return false;
        }
      }
      return true;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for comparing objects of
     * the same `toStringTag`.
     *
     * **Note:** This function only supports comparing values with tags of
     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {string} tag The `toStringTag` of the objects to compare.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalByTag(object, other, tag) {
      switch (tag) {
        case boolTag:
        case dateTag:
          // Coerce dates and booleans to numbers, dates to milliseconds and booleans
          // to `1` or `0` treating invalid dates coerced to `NaN` as not equal.
          return +object == +other;

        case errorTag:
          return object.name == other.name && object.message == other.message;

        case numberTag:
          // Treat `NaN` vs. `NaN` as equal.
          return (object != +object)
            ? other != +other
            : object == +other;

        case regexpTag:
        case stringTag:
          // Coerce regexes to strings and treat strings primitives and string
          // objects as equal. See https://es5.github.io/#x15.10.6.4 for more details.
          return object == (other + '');
      }
      return false;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for objects with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Function} [customizer] The function to customize comparing values.
     * @param {boolean} [isLoose] Specify performing partial comparisons.
     * @param {Array} [stackA] Tracks traversed `value` objects.
     * @param {Array} [stackB] Tracks traversed `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalObjects(object, other, equalFunc, customizer, isLoose, stackA, stackB) {
      var objProps = keys(object),
          objLength = objProps.length,
          othProps = keys(other),
          othLength = othProps.length;

      if (objLength != othLength && !isLoose) {
        return false;
      }
      var index = objLength;
      while (index--) {
        var key = objProps[index];
        if (!(isLoose ? key in other : hasOwnProperty.call(other, key))) {
          return false;
        }
      }
      var skipCtor = isLoose;
      while (++index < objLength) {
        key = objProps[index];
        var objValue = object[key],
            othValue = other[key],
            result = customizer ? customizer(isLoose ? othValue : objValue, isLoose? objValue : othValue, key) : undefined;

        // Recursively compare objects (susceptible to call stack limits).
        if (!(result === undefined ? equalFunc(objValue, othValue, customizer, isLoose, stackA, stackB) : result)) {
          return false;
        }
        skipCtor || (skipCtor = key == 'constructor');
      }
      if (!skipCtor) {
        var objCtor = object.constructor,
            othCtor = other.constructor;

        // Non `Object` object instances with different constructors are not equal.
        if (objCtor != othCtor &&
            ('constructor' in object && 'constructor' in other) &&
            !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
              typeof othCtor == 'function' && othCtor instanceof othCtor)) {
          return false;
        }
      }
      return true;
    }

    /**
     * Gets the appropriate "callback" function. If the `_.callback` method is
     * customized this function returns the custom method, otherwise it returns
     * the `baseCallback` function. If arguments are provided the chosen function
     * is invoked with them and its result is returned.
     *
     * @private
     * @returns {Function} Returns the chosen function or its result.
     */
    function getCallback(func, thisArg, argCount) {
      var result = lodash.callback || callback;
      result = result === callback ? baseCallback : result;
      return argCount ? result(func, thisArg, argCount) : result;
    }

    /**
     * Gets metadata for `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {*} Returns the metadata for `func`.
     */
    var getData = !metaMap ? noop : function(func) {
      return metaMap.get(func);
    };

    /**
     * Gets the name of `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {string} Returns the function name.
     */
    function getFuncName(func) {
      var result = func.name,
          array = realNames[result],
          length = array ? array.length : 0;

      while (length--) {
        var data = array[length],
            otherFunc = data.func;
        if (otherFunc == null || otherFunc == func) {
          return data.name;
        }
      }
      return result;
    }

    /**
     * Gets the appropriate "indexOf" function. If the `_.indexOf` method is
     * customized this function returns the custom method, otherwise it returns
     * the `baseIndexOf` function. If arguments are provided the chosen function
     * is invoked with them and its result is returned.
     *
     * @private
     * @returns {Function|number} Returns the chosen function or its result.
     */
    function getIndexOf(collection, target, fromIndex) {
      var result = lodash.indexOf || indexOf;
      result = result === indexOf ? baseIndexOf : result;
      return collection ? result(collection, target, fromIndex) : result;
    }

    /**
     * Gets the "length" property value of `object`.
     *
     * **Note:** This function is used to avoid a [JIT bug](https://bugs.webkit.org/show_bug.cgi?id=142792)
     * that affects Safari on at least iOS 8.1-8.3 ARM64.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {*} Returns the "length" value.
     */
    var getLength = baseProperty('length');

    /**
     * Gets the propery names, values, and compare flags of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the match data of `object`.
     */
    function getMatchData(object) {
      var result = pairs(object),
          length = result.length;

      while (length--) {
        result[length][2] = isStrictComparable(result[length][1]);
      }
      return result;
    }

    /**
     * Gets the native function at `key` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {string} key The key of the method to get.
     * @returns {*} Returns the function if it's native, else `undefined`.
     */
    function getNative(object, key) {
      var value = object == null ? undefined : object[key];
      return isNative(value) ? value : undefined;
    }

    /**
     * Gets the view, applying any `transforms` to the `start` and `end` positions.
     *
     * @private
     * @param {number} start The start of the view.
     * @param {number} end The end of the view.
     * @param {Array} transforms The transformations to apply to the view.
     * @returns {Object} Returns an object containing the `start` and `end`
     *  positions of the view.
     */
    function getView(start, end, transforms) {
      var index = -1,
          length = transforms.length;

      while (++index < length) {
        var data = transforms[index],
            size = data.size;

        switch (data.type) {
          case 'drop':      start += size; break;
          case 'dropRight': end -= size; break;
          case 'take':      end = nativeMin(end, start + size); break;
          case 'takeRight': start = nativeMax(start, end - size); break;
        }
      }
      return { 'start': start, 'end': end };
    }

    /**
     * Initializes an array clone.
     *
     * @private
     * @param {Array} array The array to clone.
     * @returns {Array} Returns the initialized clone.
     */
    function initCloneArray(array) {
      var length = array.length,
          result = new array.constructor(length);

      // Add array properties assigned by `RegExp#exec`.
      if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
        result.index = array.index;
        result.input = array.input;
      }
      return result;
    }

    /**
     * Initializes an object clone.
     *
     * @private
     * @param {Object} object The object to clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneObject(object) {
      var Ctor = object.constructor;
      if (!(typeof Ctor == 'function' && Ctor instanceof Ctor)) {
        Ctor = Object;
      }
      return new Ctor;
    }

    /**
     * Initializes an object clone based on its `toStringTag`.
     *
     * **Note:** This function only supports cloning values with tags of
     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
     *
     * @private
     * @param {Object} object The object to clone.
     * @param {string} tag The `toStringTag` of the object to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneByTag(object, tag, isDeep) {
      var Ctor = object.constructor;
      switch (tag) {
        case arrayBufferTag:
          return bufferClone(object);

        case boolTag:
        case dateTag:
          return new Ctor(+object);

        case float32Tag: case float64Tag:
        case int8Tag: case int16Tag: case int32Tag:
        case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
          var buffer = object.buffer;
          return new Ctor(isDeep ? bufferClone(buffer) : buffer, object.byteOffset, object.length);

        case numberTag:
        case stringTag:
          return new Ctor(object);

        case regexpTag:
          var result = new Ctor(object.source, reFlags.exec(object));
          result.lastIndex = object.lastIndex;
      }
      return result;
    }

    /**
     * Invokes the method at `path` on `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {Array} args The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     */
    function invokePath(object, path, args) {
      if (object != null && !isKey(path, object)) {
        path = toPath(path);
        object = path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));
        path = last(path);
      }
      var func = object == null ? object : object[path];
      return func == null ? undefined : func.apply(object, args);
    }

    /**
     * Checks if `value` is array-like.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
     */
    function isArrayLike(value) {
      return value != null && isLength(getLength(value));
    }

    /**
     * Checks if `value` is a valid array-like index.
     *
     * @private
     * @param {*} value The value to check.
     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
     */
    function isIndex(value, length) {
      value = (typeof value == 'number' || reIsUint.test(value)) ? +value : -1;
      length = length == null ? MAX_SAFE_INTEGER : length;
      return value > -1 && value % 1 == 0 && value < length;
    }

    /**
     * Checks if the provided arguments are from an iteratee call.
     *
     * @private
     * @param {*} value The potential iteratee value argument.
     * @param {*} index The potential iteratee index or key argument.
     * @param {*} object The potential iteratee object argument.
     * @returns {boolean} Returns `true` if the arguments are from an iteratee call, else `false`.
     */
    function isIterateeCall(value, index, object) {
      if (!isObject(object)) {
        return false;
      }
      var type = typeof index;
      if (type == 'number'
          ? (isArrayLike(object) && isIndex(index, object.length))
          : (type == 'string' && index in object)) {
        var other = object[index];
        return value === value ? (value === other) : (other !== other);
      }
      return false;
    }

    /**
     * Checks if `value` is a property name and not a property path.
     *
     * @private
     * @param {*} value The value to check.
     * @param {Object} [object] The object to query keys on.
     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
     */
    function isKey(value, object) {
      var type = typeof value;
      if ((type == 'string' && reIsPlainProp.test(value)) || type == 'number') {
        return true;
      }
      if (isArray(value)) {
        return false;
      }
      var result = !reIsDeepProp.test(value);
      return result || (object != null && value in toObject(object));
    }

    /**
     * Checks if `func` has a lazy counterpart.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` has a lazy counterpart, else `false`.
     */
    function isLaziable(func) {
      var funcName = getFuncName(func);
      if (!(funcName in LazyWrapper.prototype)) {
        return false;
      }
      var other = lodash[funcName];
      if (func === other) {
        return true;
      }
      var data = getData(other);
      return !!data && func === data[0];
    }

    /**
     * Checks if `value` is a valid array-like length.
     *
     * **Note:** This function is based on [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
     */
    function isLength(value) {
      return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }

    /**
     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` if suitable for strict
     *  equality comparisons, else `false`.
     */
    function isStrictComparable(value) {
      return value === value && !isObject(value);
    }

    /**
     * Merges the function metadata of `source` into `data`.
     *
     * Merging metadata reduces the number of wrappers required to invoke a function.
     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
     * may be applied regardless of execution order. Methods like `_.ary` and `_.rearg`
     * augment function arguments, making the order in which they are executed important,
     * preventing the merging of metadata. However, we make an exception for a safe
     * common case where curried functions have `_.ary` and or `_.rearg` applied.
     *
     * @private
     * @param {Array} data The destination metadata.
     * @param {Array} source The source metadata.
     * @returns {Array} Returns `data`.
     */
    function mergeData(data, source) {
      var bitmask = data[1],
          srcBitmask = source[1],
          newBitmask = bitmask | srcBitmask,
          isCommon = newBitmask < ARY_FLAG;

      var isCombo =
        (srcBitmask == ARY_FLAG && bitmask == CURRY_FLAG) ||
        (srcBitmask == ARY_FLAG && bitmask == REARG_FLAG && data[7].length <= source[8]) ||
        (srcBitmask == (ARY_FLAG | REARG_FLAG) && bitmask == CURRY_FLAG);

      // Exit early if metadata can't be merged.
      if (!(isCommon || isCombo)) {
        return data;
      }
      // Use source `thisArg` if available.
      if (srcBitmask & BIND_FLAG) {
        data[2] = source[2];
        // Set when currying a bound function.
        newBitmask |= (bitmask & BIND_FLAG) ? 0 : CURRY_BOUND_FLAG;
      }
      // Compose partial arguments.
      var value = source[3];
      if (value) {
        var partials = data[3];
        data[3] = partials ? composeArgs(partials, value, source[4]) : arrayCopy(value);
        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : arrayCopy(source[4]);
      }
      // Compose partial right arguments.
      value = source[5];
      if (value) {
        partials = data[5];
        data[5] = partials ? composeArgsRight(partials, value, source[6]) : arrayCopy(value);
        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : arrayCopy(source[6]);
      }
      // Use source `argPos` if available.
      value = source[7];
      if (value) {
        data[7] = arrayCopy(value);
      }
      // Use source `ary` if it's smaller.
      if (srcBitmask & ARY_FLAG) {
        data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
      }
      // Use source `arity` if one is not provided.
      if (data[9] == null) {
        data[9] = source[9];
      }
      // Use source `func` and merge bitmasks.
      data[0] = source[0];
      data[1] = newBitmask;

      return data;
    }

    /**
     * Used by `_.defaultsDeep` to customize its `_.merge` use.
     *
     * @private
     * @param {*} objectValue The destination object property value.
     * @param {*} sourceValue The source object property value.
     * @returns {*} Returns the value to assign to the destination object.
     */
    function mergeDefaults(objectValue, sourceValue) {
      return objectValue === undefined ? sourceValue : merge(objectValue, sourceValue, mergeDefaults);
    }

    /**
     * A specialized version of `_.pick` which picks `object` properties specified
     * by `props`.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} props The property names to pick.
     * @returns {Object} Returns the new object.
     */
    function pickByArray(object, props) {
      object = toObject(object);

      var index = -1,
          length = props.length,
          result = {};

      while (++index < length) {
        var key = props[index];
        if (key in object) {
          result[key] = object[key];
        }
      }
      return result;
    }

    /**
     * A specialized version of `_.pick` which picks `object` properties `predicate`
     * returns truthy for.
     *
     * @private
     * @param {Object} object The source object.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {Object} Returns the new object.
     */
    function pickByCallback(object, predicate) {
      var result = {};
      baseForIn(object, function(value, key, object) {
        if (predicate(value, key, object)) {
          result[key] = value;
        }
      });
      return result;
    }

    /**
     * Reorder `array` according to the specified indexes where the element at
     * the first index is assigned as the first element, the element at
     * the second index is assigned as the second element, and so on.
     *
     * @private
     * @param {Array} array The array to reorder.
     * @param {Array} indexes The arranged array indexes.
     * @returns {Array} Returns `array`.
     */
    function reorder(array, indexes) {
      var arrLength = array.length,
          length = nativeMin(indexes.length, arrLength),
          oldArray = arrayCopy(array);

      while (length--) {
        var index = indexes[length];
        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
      }
      return array;
    }

    /**
     * Sets metadata for `func`.
     *
     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
     * period of time, it will trip its breaker and transition to an identity function
     * to avoid garbage collection pauses in V8. See [V8 issue 2070](https://code.google.com/p/v8/issues/detail?id=2070)
     * for more details.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
    var setData = (function() {
      var count = 0,
          lastCalled = 0;

      return function(key, value) {
        var stamp = now(),
            remaining = HOT_SPAN - (stamp - lastCalled);

        lastCalled = stamp;
        if (remaining > 0) {
          if (++count >= HOT_COUNT) {
            return key;
          }
        } else {
          count = 0;
        }
        return baseSetData(key, value);
      };
    }());

    /**
     * A fallback implementation of `Object.keys` which creates an array of the
     * own enumerable property names of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function shimKeys(object) {
      var props = keysIn(object),
          propsLength = props.length,
          length = propsLength && object.length;

      var allowIndexes = !!length && isLength(length) &&
        (isArray(object) || isArguments(object));

      var index = -1,
          result = [];

      while (++index < propsLength) {
        var key = props[index];
        if ((allowIndexes && isIndex(key, length)) || hasOwnProperty.call(object, key)) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * Converts `value` to an array-like object if it's not one.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {Array|Object} Returns the array-like object.
     */
    function toIterable(value) {
      if (value == null) {
        return [];
      }
      if (!isArrayLike(value)) {
        return values(value);
      }
      return isObject(value) ? value : Object(value);
    }

    /**
     * Converts `value` to an object if it's not one.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {Object} Returns the object.
     */
    function toObject(value) {
      return isObject(value) ? value : Object(value);
    }

    /**
     * Converts `value` to property path array if it's not one.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {Array} Returns the property path array.
     */
    function toPath(value) {
      if (isArray(value)) {
        return value;
      }
      var result = [];
      baseToString(value).replace(rePropName, function(match, number, quote, string) {
        result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));
      });
      return result;
    }

    /**
     * Creates a clone of `wrapper`.
     *
     * @private
     * @param {Object} wrapper The wrapper to clone.
     * @returns {Object} Returns the cloned wrapper.
     */
    function wrapperClone(wrapper) {
      return wrapper instanceof LazyWrapper
        ? wrapper.clone()
        : new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__, arrayCopy(wrapper.__actions__));
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates an array of elements split into groups the length of `size`.
     * If `collection` can't be split evenly, the final chunk will be the remaining
     * elements.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to process.
     * @param {number} [size=1] The length of each chunk.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Array} Returns the new array containing chunks.
     * @example
     *
     * _.chunk(['a', 'b', 'c', 'd'], 2);
     * // => [['a', 'b'], ['c', 'd']]
     *
     * _.chunk(['a', 'b', 'c', 'd'], 3);
     * // => [['a', 'b', 'c'], ['d']]
     */
    function chunk(array, size, guard) {
      if (guard ? isIterateeCall(array, size, guard) : size == null) {
        size = 1;
      } else {
        size = nativeMax(nativeFloor(size) || 1, 1);
      }
      var index = 0,
          length = array ? array.length : 0,
          resIndex = -1,
          result = Array(nativeCeil(length / size));

      while (index < length) {
        result[++resIndex] = baseSlice(array, index, (index += size));
      }
      return result;
    }

    /**
     * Creates an array with all falsey values removed. The values `false`, `null`,
     * `0`, `""`, `undefined`, and `NaN` are falsey.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to compact.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.compact([0, 1, false, 2, '', 3]);
     * // => [1, 2, 3]
     */
    function compact(array) {
      var index = -1,
          length = array ? array.length : 0,
          resIndex = -1,
          result = [];

      while (++index < length) {
        var value = array[index];
        if (value) {
          result[++resIndex] = value;
        }
      }
      return result;
    }

    /**
     * Creates an array of unique `array` values not included in the other
     * provided arrays using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The arrays of values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.difference([1, 2, 3], [4, 2]);
     * // => [1, 3]
     */
    var difference = restParam(function(array, values) {
      return (isObjectLike(array) && isArrayLike(array))
        ? baseDifference(array, baseFlatten(values, false, true))
        : [];
    });

    /**
     * Creates a slice of `array` with `n` elements dropped from the beginning.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.drop([1, 2, 3]);
     * // => [2, 3]
     *
     * _.drop([1, 2, 3], 2);
     * // => [3]
     *
     * _.drop([1, 2, 3], 5);
     * // => []
     *
     * _.drop([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
    function drop(array, n, guard) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      if (guard ? isIterateeCall(array, n, guard) : n == null) {
        n = 1;
      }
      return baseSlice(array, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` with `n` elements dropped from the end.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.dropRight([1, 2, 3]);
     * // => [1, 2]
     *
     * _.dropRight([1, 2, 3], 2);
     * // => [1]
     *
     * _.dropRight([1, 2, 3], 5);
     * // => []
     *
     * _.dropRight([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
    function dropRight(array, n, guard) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      if (guard ? isIterateeCall(array, n, guard) : n == null) {
        n = 1;
      }
      n = length - (+n || 0);
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` excluding elements dropped from the end.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * bound to `thisArg` and invoked with three arguments: (value, index, array).
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that match the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.dropRightWhile([1, 2, 3], function(n) {
     *   return n > 1;
     * });
     * // => [1]
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * // using the `_.matches` callback shorthand
     * _.pluck(_.dropRightWhile(users, { 'user': 'pebbles', 'active': false }), 'user');
     * // => ['barney', 'fred']
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.pluck(_.dropRightWhile(users, 'active', false), 'user');
     * // => ['barney']
     *
     * // using the `_.property` callback shorthand
     * _.pluck(_.dropRightWhile(users, 'active'), 'user');
     * // => ['barney', 'fred', 'pebbles']
     */
    function dropRightWhile(array, predicate, thisArg) {
      return (array && array.length)
        ? baseWhile(array, getCallback(predicate, thisArg, 3), true, true)
        : [];
    }

    /**
     * Creates a slice of `array` excluding elements dropped from the beginning.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * bound to `thisArg` and invoked with three arguments: (value, index, array).
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.dropWhile([1, 2, 3], function(n) {
     *   return n < 3;
     * });
     * // => [3]
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * // using the `_.matches` callback shorthand
     * _.pluck(_.dropWhile(users, { 'user': 'barney', 'active': false }), 'user');
     * // => ['fred', 'pebbles']
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.pluck(_.dropWhile(users, 'active', false), 'user');
     * // => ['pebbles']
     *
     * // using the `_.property` callback shorthand
     * _.pluck(_.dropWhile(users, 'active'), 'user');
     * // => ['barney', 'fred', 'pebbles']
     */
    function dropWhile(array, predicate, thisArg) {
      return (array && array.length)
        ? baseWhile(array, getCallback(predicate, thisArg, 3), true)
        : [];
    }

    /**
     * Fills elements of `array` with `value` from `start` up to, but not
     * including, `end`.
     *
     * **Note:** This method mutates `array`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.fill(array, 'a');
     * console.log(array);
     * // => ['a', 'a', 'a']
     *
     * _.fill(Array(3), 2);
     * // => [2, 2, 2]
     *
     * _.fill([4, 6, 8], '*', 1, 2);
     * // => [4, '*', 8]
     */
    function fill(array, value, start, end) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
        start = 0;
        end = length;
      }
      return baseFill(array, value, start, end);
    }

    /**
     * This method is like `_.find` except that it returns the index of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to search.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.findIndex(users, function(chr) {
     *   return chr.user == 'barney';
     * });
     * // => 0
     *
     * // using the `_.matches` callback shorthand
     * _.findIndex(users, { 'user': 'fred', 'active': false });
     * // => 1
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.findIndex(users, 'active', false);
     * // => 0
     *
     * // using the `_.property` callback shorthand
     * _.findIndex(users, 'active');
     * // => 2
     */
    var findIndex = createFindIndex();

    /**
     * This method is like `_.findIndex` except that it iterates over elements
     * of `collection` from right to left.
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to search.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.findLastIndex(users, function(chr) {
     *   return chr.user == 'pebbles';
     * });
     * // => 2
     *
     * // using the `_.matches` callback shorthand
     * _.findLastIndex(users, { 'user': 'barney', 'active': true });
     * // => 0
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.findLastIndex(users, 'active', false);
     * // => 2
     *
     * // using the `_.property` callback shorthand
     * _.findLastIndex(users, 'active');
     * // => 0
     */
    var findLastIndex = createFindIndex(true);

    /**
     * Gets the first element of `array`.
     *
     * @static
     * @memberOf _
     * @alias head
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the first element of `array`.
     * @example
     *
     * _.first([1, 2, 3]);
     * // => 1
     *
     * _.first([]);
     * // => undefined
     */
    function first(array) {
      return array ? array[0] : undefined;
    }

    /**
     * Flattens a nested array. If `isDeep` is `true` the array is recursively
     * flattened, otherwise it is only flattened a single level.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to flatten.
     * @param {boolean} [isDeep] Specify a deep flatten.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flatten([1, [2, 3, [4]]]);
     * // => [1, 2, 3, [4]]
     *
     * // using `isDeep`
     * _.flatten([1, [2, 3, [4]]], true);
     * // => [1, 2, 3, 4]
     */
    function flatten(array, isDeep, guard) {
      var length = array ? array.length : 0;
      if (guard && isIterateeCall(array, isDeep, guard)) {
        isDeep = false;
      }
      return length ? baseFlatten(array, isDeep) : [];
    }

    /**
     * Recursively flattens a nested array.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to recursively flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flattenDeep([1, [2, 3, [4]]]);
     * // => [1, 2, 3, 4]
     */
    function flattenDeep(array) {
      var length = array ? array.length : 0;
      return length ? baseFlatten(array, true) : [];
    }

    /**
     * Gets the index at which the first occurrence of `value` is found in `array`
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * for equality comparisons. If `fromIndex` is negative, it is used as the offset
     * from the end of `array`. If `array` is sorted providing `true` for `fromIndex`
     * performs a faster binary search.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to search.
     * @param {*} value The value to search for.
     * @param {boolean|number} [fromIndex=0] The index to search from or `true`
     *  to perform a binary search on a sorted array.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.indexOf([1, 2, 1, 2], 2);
     * // => 1
     *
     * // using `fromIndex`
     * _.indexOf([1, 2, 1, 2], 2, 2);
     * // => 3
     *
     * // performing a binary search
     * _.indexOf([1, 1, 2, 2], 2, true);
     * // => 2
     */
    function indexOf(array, value, fromIndex) {
      var length = array ? array.length : 0;
      if (!length) {
        return -1;
      }
      if (typeof fromIndex == 'number') {
        fromIndex = fromIndex < 0 ? nativeMax(length + fromIndex, 0) : fromIndex;
      } else if (fromIndex) {
        var index = binaryIndex(array, value);
        if (index < length &&
            (value === value ? (value === array[index]) : (array[index] !== array[index]))) {
          return index;
        }
        return -1;
      }
      return baseIndexOf(array, value, fromIndex || 0);
    }

    /**
     * Gets all but the last element of `array`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.initial([1, 2, 3]);
     * // => [1, 2]
     */
    function initial(array) {
      return dropRight(array, 1);
    }

    /**
     * Creates an array of unique values that are included in all of the provided
     * arrays using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of shared values.
     * @example
     * _.intersection([1, 2], [4, 2], [2, 1]);
     * // => [2]
     */
    var intersection = restParam(function(arrays) {
      var othLength = arrays.length,
          othIndex = othLength,
          caches = Array(length),
          indexOf = getIndexOf(),
          isCommon = indexOf == baseIndexOf,
          result = [];

      while (othIndex--) {
        var value = arrays[othIndex] = isArrayLike(value = arrays[othIndex]) ? value : [];
        caches[othIndex] = (isCommon && value.length >= 120) ? createCache(othIndex && value) : null;
      }
      var array = arrays[0],
          index = -1,
          length = array ? array.length : 0,
          seen = caches[0];

      outer:
      while (++index < length) {
        value = array[index];
        if ((seen ? cacheIndexOf(seen, value) : indexOf(result, value, 0)) < 0) {
          var othIndex = othLength;
          while (--othIndex) {
            var cache = caches[othIndex];
            if ((cache ? cacheIndexOf(cache, value) : indexOf(arrays[othIndex], value, 0)) < 0) {
              continue outer;
            }
          }
          if (seen) {
            seen.push(value);
          }
          result.push(value);
        }
      }
      return result;
    });

    /**
     * Gets the last element of `array`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the last element of `array`.
     * @example
     *
     * _.last([1, 2, 3]);
     * // => 3
     */
    function last(array) {
      var length = array ? array.length : 0;
      return length ? array[length - 1] : undefined;
    }

    /**
     * This method is like `_.indexOf` except that it iterates over elements of
     * `array` from right to left.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to search.
     * @param {*} value The value to search for.
     * @param {boolean|number} [fromIndex=array.length-1] The index to search from
     *  or `true` to perform a binary search on a sorted array.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.lastIndexOf([1, 2, 1, 2], 2);
     * // => 3
     *
     * // using `fromIndex`
     * _.lastIndexOf([1, 2, 1, 2], 2, 2);
     * // => 1
     *
     * // performing a binary search
     * _.lastIndexOf([1, 1, 2, 2], 2, true);
     * // => 3
     */
    function lastIndexOf(array, value, fromIndex) {
      var length = array ? array.length : 0;
      if (!length) {
        return -1;
      }
      var index = length;
      if (typeof fromIndex == 'number') {
        index = (fromIndex < 0 ? nativeMax(length + fromIndex, 0) : nativeMin(fromIndex || 0, length - 1)) + 1;
      } else if (fromIndex) {
        index = binaryIndex(array, value, true) - 1;
        var other = array[index];
        if (value === value ? (value === other) : (other !== other)) {
          return index;
        }
        return -1;
      }
      if (value !== value) {
        return indexOfNaN(array, index, true);
      }
      while (index--) {
        if (array[index] === value) {
          return index;
        }
      }
      return -1;
    }

    /**
     * Removes all provided values from `array` using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.without`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...*} [values] The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3, 1, 2, 3];
     *
     * _.pull(array, 2, 3);
     * console.log(array);
     * // => [1, 1]
     */
    function pull() {
      var args = arguments,
          array = args[0];

      if (!(array && array.length)) {
        return array;
      }
      var index = 0,
          indexOf = getIndexOf(),
          length = args.length;

      while (++index < length) {
        var fromIndex = 0,
            value = args[index];

        while ((fromIndex = indexOf(array, value, fromIndex)) > -1) {
          splice.call(array, fromIndex, 1);
        }
      }
      return array;
    }

    /**
     * Removes elements from `array` corresponding to the given indexes and returns
     * an array of the removed elements. Indexes may be specified as an array of
     * indexes or as individual arguments.
     *
     * **Note:** Unlike `_.at`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...(number|number[])} [indexes] The indexes of elements to remove,
     *  specified as individual indexes or arrays of indexes.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = [5, 10, 15, 20];
     * var evens = _.pullAt(array, 1, 3);
     *
     * console.log(array);
     * // => [5, 15]
     *
     * console.log(evens);
     * // => [10, 20]
     */
    var pullAt = restParam(function(array, indexes) {
      indexes = baseFlatten(indexes);

      var result = baseAt(array, indexes);
      basePullAt(array, indexes.sort(baseCompareAscending));
      return result;
    });

    /**
     * Removes all elements from `array` that `predicate` returns truthy for
     * and returns an array of the removed elements. The predicate is bound to
     * `thisArg` and invoked with three arguments: (value, index, array).
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * **Note:** Unlike `_.filter`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = [1, 2, 3, 4];
     * var evens = _.remove(array, function(n) {
     *   return n % 2 == 0;
     * });
     *
     * console.log(array);
     * // => [1, 3]
     *
     * console.log(evens);
     * // => [2, 4]
     */
    function remove(array, predicate, thisArg) {
      var result = [];
      if (!(array && array.length)) {
        return result;
      }
      var index = -1,
          indexes = [],
          length = array.length;

      predicate = getCallback(predicate, thisArg, 3);
      while (++index < length) {
        var value = array[index];
        if (predicate(value, index, array)) {
          result.push(value);
          indexes.push(index);
        }
      }
      basePullAt(array, indexes);
      return result;
    }

    /**
     * Gets all but the first element of `array`.
     *
     * @static
     * @memberOf _
     * @alias tail
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.rest([1, 2, 3]);
     * // => [2, 3]
     */
    function rest(array) {
      return drop(array, 1);
    }

    /**
     * Creates a slice of `array` from `start` up to, but not including, `end`.
     *
     * **Note:** This method is used instead of `Array#slice` to support node
     * lists in IE < 9 and to ensure dense arrays are returned.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function slice(array, start, end) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
        start = 0;
        end = length;
      }
      return baseSlice(array, start, end);
    }

    /**
     * Uses a binary search to determine the lowest index at which `value` should
     * be inserted into `array` in order to maintain its sort order. If an iteratee
     * function is provided it is invoked for `value` and each element of `array`
     * to compute their sort ranking. The iteratee is bound to `thisArg` and
     * invoked with one argument; (value).
     *
     * If a property name is provided for `iteratee` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `iteratee` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedIndex([30, 50], 40);
     * // => 1
     *
     * _.sortedIndex([4, 4, 5, 5], 5);
     * // => 2
     *
     * var dict = { 'data': { 'thirty': 30, 'forty': 40, 'fifty': 50 } };
     *
     * // using an iteratee function
     * _.sortedIndex(['thirty', 'fifty'], 'forty', function(word) {
     *   return this.data[word];
     * }, dict);
     * // => 1
     *
     * // using the `_.property` callback shorthand
     * _.sortedIndex([{ 'x': 30 }, { 'x': 50 }], { 'x': 40 }, 'x');
     * // => 1
     */
    var sortedIndex = createSortedIndex();

    /**
     * This method is like `_.sortedIndex` except that it returns the highest
     * index at which `value` should be inserted into `array` in order to
     * maintain its sort order.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedLastIndex([4, 4, 5, 5], 5);
     * // => 4
     */
    var sortedLastIndex = createSortedIndex(true);

    /**
     * Creates a slice of `array` with `n` elements taken from the beginning.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.take([1, 2, 3]);
     * // => [1]
     *
     * _.take([1, 2, 3], 2);
     * // => [1, 2]
     *
     * _.take([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.take([1, 2, 3], 0);
     * // => []
     */
    function take(array, n, guard) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      if (guard ? isIterateeCall(array, n, guard) : n == null) {
        n = 1;
      }
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` with `n` elements taken from the end.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.takeRight([1, 2, 3]);
     * // => [3]
     *
     * _.takeRight([1, 2, 3], 2);
     * // => [2, 3]
     *
     * _.takeRight([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.takeRight([1, 2, 3], 0);
     * // => []
     */
    function takeRight(array, n, guard) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      if (guard ? isIterateeCall(array, n, guard) : n == null) {
        n = 1;
      }
      n = length - (+n || 0);
      return baseSlice(array, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` with elements taken from the end. Elements are
     * taken until `predicate` returns falsey. The predicate is bound to `thisArg`
     * and invoked with three arguments: (value, index, array).
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.takeRightWhile([1, 2, 3], function(n) {
     *   return n > 1;
     * });
     * // => [2, 3]
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * // using the `_.matches` callback shorthand
     * _.pluck(_.takeRightWhile(users, { 'user': 'pebbles', 'active': false }), 'user');
     * // => ['pebbles']
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.pluck(_.takeRightWhile(users, 'active', false), 'user');
     * // => ['fred', 'pebbles']
     *
     * // using the `_.property` callback shorthand
     * _.pluck(_.takeRightWhile(users, 'active'), 'user');
     * // => []
     */
    function takeRightWhile(array, predicate, thisArg) {
      return (array && array.length)
        ? baseWhile(array, getCallback(predicate, thisArg, 3), false, true)
        : [];
    }

    /**
     * Creates a slice of `array` with elements taken from the beginning. Elements
     * are taken until `predicate` returns falsey. The predicate is bound to
     * `thisArg` and invoked with three arguments: (value, index, array).
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.takeWhile([1, 2, 3], function(n) {
     *   return n < 3;
     * });
     * // => [1, 2]
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false},
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * // using the `_.matches` callback shorthand
     * _.pluck(_.takeWhile(users, { 'user': 'barney', 'active': false }), 'user');
     * // => ['barney']
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.pluck(_.takeWhile(users, 'active', false), 'user');
     * // => ['barney', 'fred']
     *
     * // using the `_.property` callback shorthand
     * _.pluck(_.takeWhile(users, 'active'), 'user');
     * // => []
     */
    function takeWhile(array, predicate, thisArg) {
      return (array && array.length)
        ? baseWhile(array, getCallback(predicate, thisArg, 3))
        : [];
    }

    /**
     * Creates an array of unique values, in order, from all of the provided arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.union([1, 2], [4, 2], [2, 1]);
     * // => [1, 2, 4]
     */
    var union = restParam(function(arrays) {
      return baseUniq(baseFlatten(arrays, false, true));
    });

    /**
     * Creates a duplicate-free version of an array, using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * for equality comparisons, in which only the first occurence of each element
     * is kept. Providing `true` for `isSorted` performs a faster search algorithm
     * for sorted arrays. If an iteratee function is provided it is invoked for
     * each element in the array to generate the criterion by which uniqueness
     * is computed. The `iteratee` is bound to `thisArg` and invoked with three
     * arguments: (value, index, array).
     *
     * If a property name is provided for `iteratee` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `iteratee` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @alias unique
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {boolean} [isSorted] Specify the array is sorted.
     * @param {Function|Object|string} [iteratee] The function invoked per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Array} Returns the new duplicate-value-free array.
     * @example
     *
     * _.uniq([2, 1, 2]);
     * // => [2, 1]
     *
     * // using `isSorted`
     * _.uniq([1, 1, 2], true);
     * // => [1, 2]
     *
     * // using an iteratee function
     * _.uniq([1, 2.5, 1.5, 2], function(n) {
     *   return this.floor(n);
     * }, Math);
     * // => [1, 2.5]
     *
     * // using the `_.property` callback shorthand
     * _.uniq([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
    function uniq(array, isSorted, iteratee, thisArg) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      if (isSorted != null && typeof isSorted != 'boolean') {
        thisArg = iteratee;
        iteratee = isIterateeCall(array, isSorted, thisArg) ? undefined : isSorted;
        isSorted = false;
      }
      var callback = getCallback();
      if (!(iteratee == null && callback === baseCallback)) {
        iteratee = callback(iteratee, thisArg, 3);
      }
      return (isSorted && getIndexOf() == baseIndexOf)
        ? sortedUniq(array, iteratee)
        : baseUniq(array, iteratee);
    }

    /**
     * This method is like `_.zip` except that it accepts an array of grouped
     * elements and creates an array regrouping the elements to their pre-zip
     * configuration.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip(['fred', 'barney'], [30, 40], [true, false]);
     * // => [['fred', 30, true], ['barney', 40, false]]
     *
     * _.unzip(zipped);
     * // => [['fred', 'barney'], [30, 40], [true, false]]
     */
    function unzip(array) {
      if (!(array && array.length)) {
        return [];
      }
      var index = -1,
          length = 0;

      array = arrayFilter(array, function(group) {
        if (isArrayLike(group)) {
          length = nativeMax(group.length, length);
          return true;
        }
      });
      var result = Array(length);
      while (++index < length) {
        result[index] = arrayMap(array, baseProperty(index));
      }
      return result;
    }

    /**
     * This method is like `_.unzip` except that it accepts an iteratee to specify
     * how regrouped values should be combined. The `iteratee` is bound to `thisArg`
     * and invoked with four arguments: (accumulator, value, index, group).
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @param {Function} [iteratee] The function to combine regrouped values.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
     * // => [[1, 10, 100], [2, 20, 200]]
     *
     * _.unzipWith(zipped, _.add);
     * // => [3, 30, 300]
     */
    function unzipWith(array, iteratee, thisArg) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      var result = unzip(array);
      if (iteratee == null) {
        return result;
      }
      iteratee = bindCallback(iteratee, thisArg, 4);
      return arrayMap(result, function(group) {
        return arrayReduce(group, iteratee, undefined, true);
      });
    }

    /**
     * Creates an array excluding all provided values using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to filter.
     * @param {...*} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.without([1, 2, 1, 3], 1, 2);
     * // => [3]
     */
    var without = restParam(function(array, values) {
      return isArrayLike(array)
        ? baseDifference(array, values)
        : [];
    });

    /**
     * Creates an array of unique values that is the [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
     * of the provided arrays.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of values.
     * @example
     *
     * _.xor([1, 2], [4, 2]);
     * // => [1, 4]
     */
    function xor() {
      var index = -1,
          length = arguments.length;

      while (++index < length) {
        var array = arguments[index];
        if (isArrayLike(array)) {
          var result = result
            ? arrayPush(baseDifference(result, array), baseDifference(array, result))
            : array;
        }
      }
      return result ? baseUniq(result) : [];
    }

    /**
     * Creates an array of grouped elements, the first of which contains the first
     * elements of the given arrays, the second of which contains the second elements
     * of the given arrays, and so on.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zip(['fred', 'barney'], [30, 40], [true, false]);
     * // => [['fred', 30, true], ['barney', 40, false]]
     */
    var zip = restParam(unzip);

    /**
     * The inverse of `_.pairs`; this method returns an object composed from arrays
     * of property names and values. Provide either a single two dimensional array,
     * e.g. `[[key1, value1], [key2, value2]]` or two arrays, one of property names
     * and one of corresponding values.
     *
     * @static
     * @memberOf _
     * @alias object
     * @category Array
     * @param {Array} props The property names.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObject([['fred', 30], ['barney', 40]]);
     * // => { 'fred': 30, 'barney': 40 }
     *
     * _.zipObject(['fred', 'barney'], [30, 40]);
     * // => { 'fred': 30, 'barney': 40 }
     */
    function zipObject(props, values) {
      var index = -1,
          length = props ? props.length : 0,
          result = {};

      if (length && !values && !isArray(props[0])) {
        values = [];
      }
      while (++index < length) {
        var key = props[index];
        if (values) {
          result[key] = values[index];
        } else if (key) {
          result[key[0]] = key[1];
        }
      }
      return result;
    }

    /**
     * This method is like `_.zip` except that it accepts an iteratee to specify
     * how grouped values should be combined. The `iteratee` is bound to `thisArg`
     * and invoked with four arguments: (accumulator, value, index, group).
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @param {Function} [iteratee] The function to combine grouped values.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zipWith([1, 2], [10, 20], [100, 200], _.add);
     * // => [111, 222]
     */
    var zipWith = restParam(function(arrays) {
      var length = arrays.length,
          iteratee = length > 2 ? arrays[length - 2] : undefined,
          thisArg = length > 1 ? arrays[length - 1] : undefined;

      if (length > 2 && typeof iteratee == 'function') {
        length -= 2;
      } else {
        iteratee = (length > 1 && typeof thisArg == 'function') ? (--length, thisArg) : undefined;
        thisArg = undefined;
      }
      arrays.length = length;
      return unzipWith(arrays, iteratee, thisArg);
    });

    /*------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` object that wraps `value` with explicit method
     * chaining enabled.
     *
     * @static
     * @memberOf _
     * @category Chain
     * @param {*} value The value to wrap.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36 },
     *   { 'user': 'fred',    'age': 40 },
     *   { 'user': 'pebbles', 'age': 1 }
     * ];
     *
     * var youngest = _.chain(users)
     *   .sortBy('age')
     *   .map(function(chr) {
     *     return chr.user + ' is ' + chr.age;
     *   })
     *   .first()
     *   .value();
     * // => 'pebbles is 1'
     */
    function chain(value) {
      var result = lodash(value);
      result.__chain__ = true;
      return result;
    }

    /**
     * This method invokes `interceptor` and returns `value`. The interceptor is
     * bound to `thisArg` and invoked with one argument; (value). The purpose of
     * this method is to "tap into" a method chain in order to perform operations
     * on intermediate results within the chain.
     *
     * @static
     * @memberOf _
     * @category Chain
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @param {*} [thisArg] The `this` binding of `interceptor`.
     * @returns {*} Returns `value`.
     * @example
     *
     * _([1, 2, 3])
     *  .tap(function(array) {
     *    array.pop();
     *  })
     *  .reverse()
     *  .value();
     * // => [2, 1]
     */
    function tap(value, interceptor, thisArg) {
      interceptor.call(thisArg, value);
      return value;
    }

    /**
     * This method is like `_.tap` except that it returns the result of `interceptor`.
     *
     * @static
     * @memberOf _
     * @category Chain
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @param {*} [thisArg] The `this` binding of `interceptor`.
     * @returns {*} Returns the result of `interceptor`.
     * @example
     *
     * _('  abc  ')
     *  .chain()
     *  .trim()
     *  .thru(function(value) {
     *    return [value];
     *  })
     *  .value();
     * // => ['abc']
     */
    function thru(value, interceptor, thisArg) {
      return interceptor.call(thisArg, value);
    }

    /**
     * Enables explicit method chaining on the wrapper object.
     *
     * @name chain
     * @memberOf _
     * @category Chain
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * // without explicit chaining
     * _(users).first();
     * // => { 'user': 'barney', 'age': 36 }
     *
     * // with explicit chaining
     * _(users).chain()
     *   .first()
     *   .pick('user')
     *   .value();
     * // => { 'user': 'barney' }
     */
    function wrapperChain() {
      return chain(this);
    }

    /**
     * Executes the chained sequence and returns the wrapped result.
     *
     * @name commit
     * @memberOf _
     * @category Chain
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2];
     * var wrapped = _(array).push(3);
     *
     * console.log(array);
     * // => [1, 2]
     *
     * wrapped = wrapped.commit();
     * console.log(array);
     * // => [1, 2, 3]
     *
     * wrapped.last();
     * // => 3
     *
     * console.log(array);
     * // => [1, 2, 3]
     */
    function wrapperCommit() {
      return new LodashWrapper(this.value(), this.__chain__);
    }

    /**
     * Creates a new array joining a wrapped array with any additional arrays
     * and/or values.
     *
     * @name concat
     * @memberOf _
     * @category Chain
     * @param {...*} [values] The values to concatenate.
     * @returns {Array} Returns the new concatenated array.
     * @example
     *
     * var array = [1];
     * var wrapped = _(array).concat(2, [3], [[4]]);
     *
     * console.log(wrapped.value());
     * // => [1, 2, 3, [4]]
     *
     * console.log(array);
     * // => [1]
     */
    var wrapperConcat = restParam(function(values) {
      values = baseFlatten(values);
      return this.thru(function(array) {
        return arrayConcat(isArray(array) ? array : [toObject(array)], values);
      });
    });

    /**
     * Creates a clone of the chained sequence planting `value` as the wrapped value.
     *
     * @name plant
     * @memberOf _
     * @category Chain
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2];
     * var wrapped = _(array).map(function(value) {
     *   return Math.pow(value, 2);
     * });
     *
     * var other = [3, 4];
     * var otherWrapped = wrapped.plant(other);
     *
     * otherWrapped.value();
     * // => [9, 16]
     *
     * wrapped.value();
     * // => [1, 4]
     */
    function wrapperPlant(value) {
      var result,
          parent = this;

      while (parent instanceof baseLodash) {
        var clone = wrapperClone(parent);
        if (result) {
          previous.__wrapped__ = clone;
        } else {
          result = clone;
        }
        var previous = clone;
        parent = parent.__wrapped__;
      }
      previous.__wrapped__ = value;
      return result;
    }

    /**
     * Reverses the wrapped array so the first element becomes the last, the
     * second element becomes the second to last, and so on.
     *
     * **Note:** This method mutates the wrapped array.
     *
     * @name reverse
     * @memberOf _
     * @category Chain
     * @returns {Object} Returns the new reversed `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _(array).reverse().value()
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */
    function wrapperReverse() {
      var value = this.__wrapped__;

      var interceptor = function(value) {
        return (wrapped && wrapped.__dir__ < 0) ? value : value.reverse();
      };
      if (value instanceof LazyWrapper) {
        var wrapped = value;
        if (this.__actions__.length) {
          wrapped = new LazyWrapper(this);
        }
        wrapped = wrapped.reverse();
        wrapped.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined });
        return new LodashWrapper(wrapped, this.__chain__);
      }
      return this.thru(interceptor);
    }

    /**
     * Produces the result of coercing the unwrapped value to a string.
     *
     * @name toString
     * @memberOf _
     * @category Chain
     * @returns {string} Returns the coerced string value.
     * @example
     *
     * _([1, 2, 3]).toString();
     * // => '1,2,3'
     */
    function wrapperToString() {
      return (this.value() + '');
    }

    /**
     * Executes the chained sequence to extract the unwrapped value.
     *
     * @name value
     * @memberOf _
     * @alias run, toJSON, valueOf
     * @category Chain
     * @returns {*} Returns the resolved unwrapped value.
     * @example
     *
     * _([1, 2, 3]).value();
     * // => [1, 2, 3]
     */
    function wrapperValue() {
      return baseWrapperValue(this.__wrapped__, this.__actions__);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates an array of elements corresponding to the given keys, or indexes,
     * of `collection`. Keys may be specified as individual arguments or as arrays
     * of keys.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {...(number|number[]|string|string[])} [props] The property names
     *  or indexes of elements to pick, specified individually or in arrays.
     * @returns {Array} Returns the new array of picked elements.
     * @example
     *
     * _.at(['a', 'b', 'c'], [0, 2]);
     * // => ['a', 'c']
     *
     * _.at(['barney', 'fred', 'pebbles'], 0, 2);
     * // => ['barney', 'pebbles']
     */
    var at = restParam(function(collection, props) {
      return baseAt(collection, baseFlatten(props));
    });

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` through `iteratee`. The corresponding value
     * of each key is the number of times the key was returned by `iteratee`.
     * The `iteratee` is bound to `thisArg` and invoked with three arguments:
     * (value, index|key, collection).
     *
     * If a property name is provided for `iteratee` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `iteratee` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.countBy([4.3, 6.1, 6.4], function(n) {
     *   return Math.floor(n);
     * });
     * // => { '4': 1, '6': 2 }
     *
     * _.countBy([4.3, 6.1, 6.4], function(n) {
     *   return this.floor(n);
     * }, Math);
     * // => { '4': 1, '6': 2 }
     *
     * _.countBy(['one', 'two', 'three'], 'length');
     * // => { '3': 2, '5': 1 }
     */
    var countBy = createAggregator(function(result, value, key) {
      hasOwnProperty.call(result, key) ? ++result[key] : (result[key] = 1);
    });

    /**
     * Checks if `predicate` returns truthy for **all** elements of `collection`.
     * The predicate is bound to `thisArg` and invoked with three arguments:
     * (value, index|key, collection).
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @alias all
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`.
     * @example
     *
     * _.every([true, 1, null, 'yes'], Boolean);
     * // => false
     *
     * var users = [
     *   { 'user': 'barney', 'active': false },
     *   { 'user': 'fred',   'active': false }
     * ];
     *
     * // using the `_.matches` callback shorthand
     * _.every(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.every(users, 'active', false);
     * // => true
     *
     * // using the `_.property` callback shorthand
     * _.every(users, 'active');
     * // => false
     */
    function every(collection, predicate, thisArg) {
      var func = isArray(collection) ? arrayEvery : baseEvery;
      if (thisArg && isIterateeCall(collection, predicate, thisArg)) {
        predicate = undefined;
      }
      if (typeof predicate != 'function' || thisArg !== undefined) {
        predicate = getCallback(predicate, thisArg, 3);
      }
      return func(collection, predicate);
    }

    /**
     * Iterates over elements of `collection`, returning an array of all elements
     * `predicate` returns truthy for. The predicate is bound to `thisArg` and
     * invoked with three arguments: (value, index|key, collection).
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @alias select
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {Array} Returns the new filtered array.
     * @example
     *
     * _.filter([4, 5, 6], function(n) {
     *   return n % 2 == 0;
     * });
     * // => [4, 6]
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // using the `_.matches` callback shorthand
     * _.pluck(_.filter(users, { 'age': 36, 'active': true }), 'user');
     * // => ['barney']
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.pluck(_.filter(users, 'active', false), 'user');
     * // => ['fred']
     *
     * // using the `_.property` callback shorthand
     * _.pluck(_.filter(users, 'active'), 'user');
     * // => ['barney']
     */
    function filter(collection, predicate, thisArg) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      predicate = getCallback(predicate, thisArg, 3);
      return func(collection, predicate);
    }

    /**
     * Iterates over elements of `collection`, returning the first element
     * `predicate` returns truthy for. The predicate is bound to `thisArg` and
     * invoked with three arguments: (value, index|key, collection).
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @alias detect
     * @category Collection
     * @param {Array|Object|string} collection The collection to search.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': true },
     *   { 'user': 'fred',    'age': 40, 'active': false },
     *   { 'user': 'pebbles', 'age': 1,  'active': true }
     * ];
     *
     * _.result(_.find(users, function(chr) {
     *   return chr.age < 40;
     * }), 'user');
     * // => 'barney'
     *
     * // using the `_.matches` callback shorthand
     * _.result(_.find(users, { 'age': 1, 'active': true }), 'user');
     * // => 'pebbles'
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.result(_.find(users, 'active', false), 'user');
     * // => 'fred'
     *
     * // using the `_.property` callback shorthand
     * _.result(_.find(users, 'active'), 'user');
     * // => 'barney'
     */
    var find = createFind(baseEach);

    /**
     * This method is like `_.find` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to search.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * _.findLast([1, 2, 3, 4], function(n) {
     *   return n % 2 == 1;
     * });
     * // => 3
     */
    var findLast = createFind(baseEachRight, true);

    /**
     * Performs a deep comparison between each element in `collection` and the
     * source object, returning the first element that has equivalent property
     * values.
     *
     * **Note:** This method supports comparing arrays, booleans, `Date` objects,
     * numbers, `Object` objects, regexes, and strings. Objects are compared by
     * their own, not inherited, enumerable properties. For comparing a single
     * own or inherited property value see `_.matchesProperty`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to search.
     * @param {Object} source The object of property values to match.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * _.result(_.findWhere(users, { 'age': 36, 'active': true }), 'user');
     * // => 'barney'
     *
     * _.result(_.findWhere(users, { 'age': 40, 'active': false }), 'user');
     * // => 'fred'
     */
    function findWhere(collection, source) {
      return find(collection, baseMatches(source));
    }

    /**
     * Iterates over elements of `collection` invoking `iteratee` for each element.
     * The `iteratee` is bound to `thisArg` and invoked with three arguments:
     * (value, index|key, collection). Iteratee functions may exit iteration early
     * by explicitly returning `false`.
     *
     * **Note:** As with other "Collections" methods, objects with a "length" property
     * are iterated like arrays. To avoid this behavior `_.forIn` or `_.forOwn`
     * may be used for object iteration.
     *
     * @static
     * @memberOf _
     * @alias each
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Array|Object|string} Returns `collection`.
     * @example
     *
     * _([1, 2]).forEach(function(n) {
     *   console.log(n);
     * }).value();
     * // => logs each value from left to right and returns the array
     *
     * _.forEach({ 'a': 1, 'b': 2 }, function(n, key) {
     *   console.log(n, key);
     * });
     * // => logs each value-key pair and returns the object (iteration order is not guaranteed)
     */
    var forEach = createForEach(arrayEach, baseEach);

    /**
     * This method is like `_.forEach` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @alias eachRight
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Array|Object|string} Returns `collection`.
     * @example
     *
     * _([1, 2]).forEachRight(function(n) {
     *   console.log(n);
     * }).value();
     * // => logs each value from right to left and returns the array
     */
    var forEachRight = createForEach(arrayEachRight, baseEachRight);

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` through `iteratee`. The corresponding value
     * of each key is an array of the elements responsible for generating the key.
     * The `iteratee` is bound to `thisArg` and invoked with three arguments:
     * (value, index|key, collection).
     *
     * If a property name is provided for `iteratee` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `iteratee` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.groupBy([4.2, 6.1, 6.4], function(n) {
     *   return Math.floor(n);
     * });
     * // => { '4': [4.2], '6': [6.1, 6.4] }
     *
     * _.groupBy([4.2, 6.1, 6.4], function(n) {
     *   return this.floor(n);
     * }, Math);
     * // => { '4': [4.2], '6': [6.1, 6.4] }
     *
     * // using the `_.property` callback shorthand
     * _.groupBy(['one', 'two', 'three'], 'length');
     * // => { '3': ['one', 'two'], '5': ['three'] }
     */
    var groupBy = createAggregator(function(result, value, key) {
      if (hasOwnProperty.call(result, key)) {
        result[key].push(value);
      } else {
        result[key] = [value];
      }
    });

    /**
     * Checks if `value` is in `collection` using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * for equality comparisons. If `fromIndex` is negative, it is used as the offset
     * from the end of `collection`.
     *
     * @static
     * @memberOf _
     * @alias contains, include
     * @category Collection
     * @param {Array|Object|string} collection The collection to search.
     * @param {*} target The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.reduce`.
     * @returns {boolean} Returns `true` if a matching element is found, else `false`.
     * @example
     *
     * _.includes([1, 2, 3], 1);
     * // => true
     *
     * _.includes([1, 2, 3], 1, 2);
     * // => false
     *
     * _.includes({ 'user': 'fred', 'age': 40 }, 'fred');
     * // => true
     *
     * _.includes('pebbles', 'eb');
     * // => true
     */
    function includes(collection, target, fromIndex, guard) {
      var length = collection ? getLength(collection) : 0;
      if (!isLength(length)) {
        collection = values(collection);
        length = collection.length;
      }
      if (typeof fromIndex != 'number' || (guard && isIterateeCall(target, fromIndex, guard))) {
        fromIndex = 0;
      } else {
        fromIndex = fromIndex < 0 ? nativeMax(length + fromIndex, 0) : (fromIndex || 0);
      }
      return (typeof collection == 'string' || !isArray(collection) && isString(collection))
        ? (fromIndex <= length && collection.indexOf(target, fromIndex) > -1)
        : (!!length && getIndexOf(collection, target, fromIndex) > -1);
    }

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` through `iteratee`. The corresponding value
     * of each key is the last element responsible for generating the key. The
     * iteratee function is bound to `thisArg` and invoked with three arguments:
     * (value, index|key, collection).
     *
     * If a property name is provided for `iteratee` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `iteratee` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * var keyData = [
     *   { 'dir': 'left', 'code': 97 },
     *   { 'dir': 'right', 'code': 100 }
     * ];
     *
     * _.indexBy(keyData, 'dir');
     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
     *
     * _.indexBy(keyData, function(object) {
     *   return String.fromCharCode(object.code);
     * });
     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
     *
     * _.indexBy(keyData, function(object) {
     *   return this.fromCharCode(object.code);
     * }, String);
     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
     */
    var indexBy = createAggregator(function(result, value, key) {
      result[key] = value;
    });

    /**
     * Invokes the method at `path` of each element in `collection`, returning
     * an array of the results of each invoked method. Any additional arguments
     * are provided to each invoked method. If `methodName` is a function it is
     * invoked for, and `this` bound to, each element in `collection`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Array|Function|string} path The path of the method to invoke or
     *  the function invoked per iteration.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.invoke([[5, 1, 7], [3, 2, 1]], 'sort');
     * // => [[1, 5, 7], [1, 2, 3]]
     *
     * _.invoke([123, 456], String.prototype.split, '');
     * // => [['1', '2', '3'], ['4', '5', '6']]
     */
    var invoke = restParam(function(collection, path, args) {
      var index = -1,
          isFunc = typeof path == 'function',
          isProp = isKey(path),
          result = isArrayLike(collection) ? Array(collection.length) : [];

      baseEach(collection, function(value) {
        var func = isFunc ? path : ((isProp && value != null) ? value[path] : undefined);
        result[++index] = func ? func.apply(value, args) : invokePath(value, path, args);
      });
      return result;
    });

    /**
     * Creates an array of values by running each element in `collection` through
     * `iteratee`. The `iteratee` is bound to `thisArg` and invoked with three
     * arguments: (value, index|key, collection).
     *
     * If a property name is provided for `iteratee` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `iteratee` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
     *
     * The guarded methods are:
     * `ary`, `callback`, `chunk`, `clone`, `create`, `curry`, `curryRight`,
     * `drop`, `dropRight`, `every`, `fill`, `flatten`, `invert`, `max`, `min`,
     * `parseInt`, `slice`, `sortBy`, `take`, `takeRight`, `template`, `trim`,
     * `trimLeft`, `trimRight`, `trunc`, `random`, `range`, `sample`, `some`,
     * `sum`, `uniq`, and `words`
     *
     * @static
     * @memberOf _
     * @alias collect
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Array} Returns the new mapped array.
     * @example
     *
     * function timesThree(n) {
     *   return n * 3;
     * }
     *
     * _.map([1, 2], timesThree);
     * // => [3, 6]
     *
     * _.map({ 'a': 1, 'b': 2 }, timesThree);
     * // => [3, 6] (iteration order is not guaranteed)
     *
     * var users = [
     *   { 'user': 'barney' },
     *   { 'user': 'fred' }
     * ];
     *
     * // using the `_.property` callback shorthand
     * _.map(users, 'user');
     * // => ['barney', 'fred']
     */
    function map(collection, iteratee, thisArg) {
      var func = isArray(collection) ? arrayMap : baseMap;
      iteratee = getCallback(iteratee, thisArg, 3);
      return func(collection, iteratee);
    }

    /**
     * Creates an array of elements split into two groups, the first of which
     * contains elements `predicate` returns truthy for, while the second of which
     * contains elements `predicate` returns falsey for. The predicate is bound
     * to `thisArg` and invoked with three arguments: (value, index|key, collection).
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {Array} Returns the array of grouped elements.
     * @example
     *
     * _.partition([1, 2, 3], function(n) {
     *   return n % 2;
     * });
     * // => [[1, 3], [2]]
     *
     * _.partition([1.2, 2.3, 3.4], function(n) {
     *   return this.floor(n) % 2;
     * }, Math);
     * // => [[1.2, 3.4], [2.3]]
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': false },
     *   { 'user': 'fred',    'age': 40, 'active': true },
     *   { 'user': 'pebbles', 'age': 1,  'active': false }
     * ];
     *
     * var mapper = function(array) {
     *   return _.pluck(array, 'user');
     * };
     *
     * // using the `_.matches` callback shorthand
     * _.map(_.partition(users, { 'age': 1, 'active': false }), mapper);
     * // => [['pebbles'], ['barney', 'fred']]
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.map(_.partition(users, 'active', false), mapper);
     * // => [['barney', 'pebbles'], ['fred']]
     *
     * // using the `_.property` callback shorthand
     * _.map(_.partition(users, 'active'), mapper);
     * // => [['fred'], ['barney', 'pebbles']]
     */
    var partition = createAggregator(function(result, value, key) {
      result[key ? 0 : 1].push(value);
    }, function() { return [[], []]; });

    /**
     * Gets the property value of `path` from all elements in `collection`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Array|string} path The path of the property to pluck.
     * @returns {Array} Returns the property values.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * _.pluck(users, 'user');
     * // => ['barney', 'fred']
     *
     * var userIndex = _.indexBy(users, 'user');
     * _.pluck(userIndex, 'age');
     * // => [36, 40] (iteration order is not guaranteed)
     */
    function pluck(collection, path) {
      return map(collection, property(path));
    }

    /**
     * Reduces `collection` to a value which is the accumulated result of running
     * each element in `collection` through `iteratee`, where each successive
     * invocation is supplied the return value of the previous. If `accumulator`
     * is not provided the first element of `collection` is used as the initial
     * value. The `iteratee` is bound to `thisArg` and invoked with four arguments:
     * (accumulator, value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.reduce`, `_.reduceRight`, and `_.transform`.
     *
     * The guarded methods are:
     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `sortByAll`,
     * and `sortByOrder`
     *
     * @static
     * @memberOf _
     * @alias foldl, inject
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * _.reduce([1, 2], function(total, n) {
     *   return total + n;
     * });
     * // => 3
     *
     * _.reduce({ 'a': 1, 'b': 2 }, function(result, n, key) {
     *   result[key] = n * 3;
     *   return result;
     * }, {});
     * // => { 'a': 3, 'b': 6 } (iteration order is not guaranteed)
     */
    var reduce = createReduce(arrayReduce, baseEach);

    /**
     * This method is like `_.reduce` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @alias foldr
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * var array = [[0, 1], [2, 3], [4, 5]];
     *
     * _.reduceRight(array, function(flattened, other) {
     *   return flattened.concat(other);
     * }, []);
     * // => [4, 5, 2, 3, 0, 1]
     */
    var reduceRight = createReduce(arrayReduceRight, baseEachRight);

    /**
     * The opposite of `_.filter`; this method returns the elements of `collection`
     * that `predicate` does **not** return truthy for.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {Array} Returns the new filtered array.
     * @example
     *
     * _.reject([1, 2, 3, 4], function(n) {
     *   return n % 2 == 0;
     * });
     * // => [1, 3]
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': true }
     * ];
     *
     * // using the `_.matches` callback shorthand
     * _.pluck(_.reject(users, { 'age': 40, 'active': true }), 'user');
     * // => ['barney']
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.pluck(_.reject(users, 'active', false), 'user');
     * // => ['fred']
     *
     * // using the `_.property` callback shorthand
     * _.pluck(_.reject(users, 'active'), 'user');
     * // => ['barney']
     */
    function reject(collection, predicate, thisArg) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      predicate = getCallback(predicate, thisArg, 3);
      return func(collection, function(value, index, collection) {
        return !predicate(value, index, collection);
      });
    }

    /**
     * Gets a random element or `n` random elements from a collection.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to sample.
     * @param {number} [n] The number of elements to sample.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {*} Returns the random sample(s).
     * @example
     *
     * _.sample([1, 2, 3, 4]);
     * // => 2
     *
     * _.sample([1, 2, 3, 4], 2);
     * // => [3, 1]
     */
    function sample(collection, n, guard) {
      if (guard ? isIterateeCall(collection, n, guard) : n == null) {
        collection = toIterable(collection);
        var length = collection.length;
        return length > 0 ? collection[baseRandom(0, length - 1)] : undefined;
      }
      var index = -1,
          result = toArray(collection),
          length = result.length,
          lastIndex = length - 1;

      n = nativeMin(n < 0 ? 0 : (+n || 0), length);
      while (++index < n) {
        var rand = baseRandom(index, lastIndex),
            value = result[rand];

        result[rand] = result[index];
        result[index] = value;
      }
      result.length = n;
      return result;
    }

    /**
     * Creates an array of shuffled values, using a version of the
     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     * @example
     *
     * _.shuffle([1, 2, 3, 4]);
     * // => [4, 1, 3, 2]
     */
    function shuffle(collection) {
      return sample(collection, POSITIVE_INFINITY);
    }

    /**
     * Gets the size of `collection` by returning its length for array-like
     * values or the number of own enumerable properties for objects.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @returns {number} Returns the size of `collection`.
     * @example
     *
     * _.size([1, 2, 3]);
     * // => 3
     *
     * _.size({ 'a': 1, 'b': 2 });
     * // => 2
     *
     * _.size('pebbles');
     * // => 7
     */
    function size(collection) {
      var length = collection ? getLength(collection) : 0;
      return isLength(length) ? length : keys(collection).length;
    }

    /**
     * Checks if `predicate` returns truthy for **any** element of `collection`.
     * The function returns as soon as it finds a passing value and does not iterate
     * over the entire collection. The predicate is bound to `thisArg` and invoked
     * with three arguments: (value, index|key, collection).
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @alias any
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     * @example
     *
     * _.some([null, 0, 'yes', false], Boolean);
     * // => true
     *
     * var users = [
     *   { 'user': 'barney', 'active': true },
     *   { 'user': 'fred',   'active': false }
     * ];
     *
     * // using the `_.matches` callback shorthand
     * _.some(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.some(users, 'active', false);
     * // => true
     *
     * // using the `_.property` callback shorthand
     * _.some(users, 'active');
     * // => true
     */
    function some(collection, predicate, thisArg) {
      var func = isArray(collection) ? arraySome : baseSome;
      if (thisArg && isIterateeCall(collection, predicate, thisArg)) {
        predicate = undefined;
      }
      if (typeof predicate != 'function' || thisArg !== undefined) {
        predicate = getCallback(predicate, thisArg, 3);
      }
      return func(collection, predicate);
    }

    /**
     * Creates an array of elements, sorted in ascending order by the results of
     * running each element in a collection through `iteratee`. This method performs
     * a stable sort, that is, it preserves the original sort order of equal elements.
     * The `iteratee` is bound to `thisArg` and invoked with three arguments:
     * (value, index|key, collection).
     *
     * If a property name is provided for `iteratee` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `iteratee` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * _.sortBy([1, 2, 3], function(n) {
     *   return Math.sin(n);
     * });
     * // => [3, 1, 2]
     *
     * _.sortBy([1, 2, 3], function(n) {
     *   return this.sin(n);
     * }, Math);
     * // => [3, 1, 2]
     *
     * var users = [
     *   { 'user': 'fred' },
     *   { 'user': 'pebbles' },
     *   { 'user': 'barney' }
     * ];
     *
     * // using the `_.property` callback shorthand
     * _.pluck(_.sortBy(users, 'user'), 'user');
     * // => ['barney', 'fred', 'pebbles']
     */
    function sortBy(collection, iteratee, thisArg) {
      if (collection == null) {
        return [];
      }
      if (thisArg && isIterateeCall(collection, iteratee, thisArg)) {
        iteratee = undefined;
      }
      var index = -1;
      iteratee = getCallback(iteratee, thisArg, 3);

      var result = baseMap(collection, function(value, key, collection) {
        return { 'criteria': iteratee(value, key, collection), 'index': ++index, 'value': value };
      });
      return baseSortBy(result, compareAscending);
    }

    /**
     * This method is like `_.sortBy` except that it can sort by multiple iteratees
     * or property names.
     *
     * If a property name is provided for an iteratee the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If an object is provided for an iteratee the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {...(Function|Function[]|Object|Object[]|string|string[])} iteratees
     *  The iteratees to sort by, specified as individual values or arrays of values.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 42 },
     *   { 'user': 'barney', 'age': 34 }
     * ];
     *
     * _.map(_.sortByAll(users, ['user', 'age']), _.values);
     * // => [['barney', 34], ['barney', 36], ['fred', 42], ['fred', 48]]
     *
     * _.map(_.sortByAll(users, 'user', function(chr) {
     *   return Math.floor(chr.age / 10);
     * }), _.values);
     * // => [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 42]]
     */
    var sortByAll = restParam(function(collection, iteratees) {
      if (collection == null) {
        return [];
      }
      var guard = iteratees[2];
      if (guard && isIterateeCall(iteratees[0], iteratees[1], guard)) {
        iteratees.length = 1;
      }
      return baseSortByOrder(collection, baseFlatten(iteratees), []);
    });

    /**
     * This method is like `_.sortByAll` except that it allows specifying the
     * sort orders of the iteratees to sort by. If `orders` is unspecified, all
     * values are sorted in ascending order. Otherwise, a value is sorted in
     * ascending order if its corresponding order is "asc", and descending if "desc".
     *
     * If a property name is provided for an iteratee the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If an object is provided for an iteratee the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
     * @param {boolean[]} [orders] The sort orders of `iteratees`.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.reduce`.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 34 },
     *   { 'user': 'fred',   'age': 42 },
     *   { 'user': 'barney', 'age': 36 }
     * ];
     *
     * // sort by `user` in ascending order and by `age` in descending order
     * _.map(_.sortByOrder(users, ['user', 'age'], ['asc', 'desc']), _.values);
     * // => [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 42]]
     */
    function sortByOrder(collection, iteratees, orders, guard) {
      if (collection == null) {
        return [];
      }
      if (guard && isIterateeCall(iteratees, orders, guard)) {
        orders = undefined;
      }
      if (!isArray(iteratees)) {
        iteratees = iteratees == null ? [] : [iteratees];
      }
      if (!isArray(orders)) {
        orders = orders == null ? [] : [orders];
      }
      return baseSortByOrder(collection, iteratees, orders);
    }

    /**
     * Performs a deep comparison between each element in `collection` and the
     * source object, returning an array of all elements that have equivalent
     * property values.
     *
     * **Note:** This method supports comparing arrays, booleans, `Date` objects,
     * numbers, `Object` objects, regexes, and strings. Objects are compared by
     * their own, not inherited, enumerable properties. For comparing a single
     * own or inherited property value see `_.matchesProperty`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to search.
     * @param {Object} source The object of property values to match.
     * @returns {Array} Returns the new filtered array.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false, 'pets': ['hoppy'] },
     *   { 'user': 'fred',   'age': 40, 'active': true, 'pets': ['baby puss', 'dino'] }
     * ];
     *
     * _.pluck(_.where(users, { 'age': 36, 'active': false }), 'user');
     * // => ['barney']
     *
     * _.pluck(_.where(users, { 'pets': ['dino'] }), 'user');
     * // => ['fred']
     */
    function where(collection, source) {
      return filter(collection, baseMatches(source));
    }

    /*------------------------------------------------------------------------*/

    /**
     * Gets the number of milliseconds that have elapsed since the Unix epoch
     * (1 January 1970 00:00:00 UTC).
     *
     * @static
     * @memberOf _
     * @category Date
     * @example
     *
     * _.defer(function(stamp) {
     *   console.log(_.now() - stamp);
     * }, _.now());
     * // => logs the number of milliseconds it took for the deferred function to be invoked
     */
    var now = nativeNow || function() {
      return new Date().getTime();
    };

    /*------------------------------------------------------------------------*/

    /**
     * The opposite of `_.before`; this method creates a function that invokes
     * `func` once it is called `n` or more times.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {number} n The number of calls before `func` is invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var saves = ['profile', 'settings'];
     *
     * var done = _.after(saves.length, function() {
     *   console.log('done saving!');
     * });
     *
     * _.forEach(saves, function(type) {
     *   asyncSave({ 'type': type, 'complete': done });
     * });
     * // => logs 'done saving!' after the two async saves have completed
     */
    function after(n, func) {
      if (typeof func != 'function') {
        if (typeof n == 'function') {
          var temp = n;
          n = func;
          func = temp;
        } else {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
      }
      n = nativeIsFinite(n = +n) ? n : 0;
      return function() {
        if (--n < 1) {
          return func.apply(this, arguments);
        }
      };
    }

    /**
     * Creates a function that accepts up to `n` arguments ignoring any
     * additional arguments.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @param {number} [n=func.length] The arity cap.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Function} Returns the new function.
     * @example
     *
     * _.map(['6', '8', '10'], _.ary(parseInt, 1));
     * // => [6, 8, 10]
     */
    function ary(func, n, guard) {
      if (guard && isIterateeCall(func, n, guard)) {
        n = undefined;
      }
      n = (func && n == null) ? func.length : nativeMax(+n || 0, 0);
      return createWrapper(func, ARY_FLAG, undefined, undefined, undefined, undefined, n);
    }

    /**
     * Creates a function that invokes `func`, with the `this` binding and arguments
     * of the created function, while it is called less than `n` times. Subsequent
     * calls to the created function return the result of the last `func` invocation.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {number} n The number of calls at which `func` is no longer invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * jQuery('#add').on('click', _.before(5, addContactToList));
     * // => allows adding up to 4 contacts to the list
     */
    function before(n, func) {
      var result;
      if (typeof func != 'function') {
        if (typeof n == 'function') {
          var temp = n;
          n = func;
          func = temp;
        } else {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
      }
      return function() {
        if (--n > 0) {
          result = func.apply(this, arguments);
        }
        if (n <= 1) {
          func = undefined;
        }
        return result;
      };
    }

    /**
     * Creates a function that invokes `func` with the `this` binding of `thisArg`
     * and prepends any additional `_.bind` arguments to those provided to the
     * bound function.
     *
     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for partially applied arguments.
     *
     * **Note:** Unlike native `Function#bind` this method does not set the "length"
     * property of bound functions.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to bind.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * var greet = function(greeting, punctuation) {
     *   return greeting + ' ' + this.user + punctuation;
     * };
     *
     * var object = { 'user': 'fred' };
     *
     * var bound = _.bind(greet, object, 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * // using placeholders
     * var bound = _.bind(greet, object, _, '!');
     * bound('hi');
     * // => 'hi fred!'
     */
    var bind = restParam(function(func, thisArg, partials) {
      var bitmask = BIND_FLAG;
      if (partials.length) {
        var holders = replaceHolders(partials, bind.placeholder);
        bitmask |= PARTIAL_FLAG;
      }
      return createWrapper(func, bitmask, thisArg, partials, holders);
    });

    /**
     * Binds methods of an object to the object itself, overwriting the existing
     * method. Method names may be specified as individual arguments or as arrays
     * of method names. If no method names are provided all enumerable function
     * properties, own and inherited, of `object` are bound.
     *
     * **Note:** This method does not set the "length" property of bound functions.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Object} object The object to bind and assign the bound methods to.
     * @param {...(string|string[])} [methodNames] The object method names to bind,
     *  specified as individual method names or arrays of method names.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var view = {
     *   'label': 'docs',
     *   'onClick': function() {
     *     console.log('clicked ' + this.label);
     *   }
     * };
     *
     * _.bindAll(view);
     * jQuery('#docs').on('click', view.onClick);
     * // => logs 'clicked docs' when the element is clicked
     */
    var bindAll = restParam(function(object, methodNames) {
      methodNames = methodNames.length ? baseFlatten(methodNames) : functions(object);

      var index = -1,
          length = methodNames.length;

      while (++index < length) {
        var key = methodNames[index];
        object[key] = createWrapper(object[key], BIND_FLAG, object);
      }
      return object;
    });

    /**
     * Creates a function that invokes the method at `object[key]` and prepends
     * any additional `_.bindKey` arguments to those provided to the bound function.
     *
     * This method differs from `_.bind` by allowing bound functions to reference
     * methods that may be redefined or don't yet exist.
     * See [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
     * for more details.
     *
     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Object} object The object the method belongs to.
     * @param {string} key The key of the method.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * var object = {
     *   'user': 'fred',
     *   'greet': function(greeting, punctuation) {
     *     return greeting + ' ' + this.user + punctuation;
     *   }
     * };
     *
     * var bound = _.bindKey(object, 'greet', 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * object.greet = function(greeting, punctuation) {
     *   return greeting + 'ya ' + this.user + punctuation;
     * };
     *
     * bound('!');
     * // => 'hiya fred!'
     *
     * // using placeholders
     * var bound = _.bindKey(object, 'greet', _, '!');
     * bound('hi');
     * // => 'hiya fred!'
     */
    var bindKey = restParam(function(object, key, partials) {
      var bitmask = BIND_FLAG | BIND_KEY_FLAG;
      if (partials.length) {
        var holders = replaceHolders(partials, bindKey.placeholder);
        bitmask |= PARTIAL_FLAG;
      }
      return createWrapper(key, bitmask, object, partials, holders);
    });

    /**
     * Creates a function that accepts one or more arguments of `func` that when
     * called either invokes `func` returning its result, if all `func` arguments
     * have been provided, or returns a function that accepts one or more of the
     * remaining `func` arguments, and so on. The arity of `func` may be specified
     * if `func.length` is not sufficient.
     *
     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for provided arguments.
     *
     * **Note:** This method does not set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curry(abc);
     *
     * curried(1)(2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // using placeholders
     * curried(1)(_, 3)(2);
     * // => [1, 2, 3]
     */
    var curry = createCurry(CURRY_FLAG);

    /**
     * This method is like `_.curry` except that arguments are applied to `func`
     * in the manner of `_.partialRight` instead of `_.partial`.
     *
     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for provided arguments.
     *
     * **Note:** This method does not set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curryRight(abc);
     *
     * curried(3)(2)(1);
     * // => [1, 2, 3]
     *
     * curried(2, 3)(1);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // using placeholders
     * curried(3)(1, _)(2);
     * // => [1, 2, 3]
     */
    var curryRight = createCurry(CURRY_RIGHT_FLAG);

    /**
     * Creates a debounced function that delays invoking `func` until after `wait`
     * milliseconds have elapsed since the last time the debounced function was
     * invoked. The debounced function comes with a `cancel` method to cancel
     * delayed invocations. Provide an options object to indicate that `func`
     * should be invoked on the leading and/or trailing edge of the `wait` timeout.
     * Subsequent calls to the debounced function return the result of the last
     * `func` invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is invoked
     * on the trailing edge of the timeout only if the the debounced function is
     * invoked more than once during the `wait` timeout.
     *
     * See [David Corbacho's article](http://drupalmotion.com/article/debounce-and-throttle-visual-explanation)
     * for details over the differences between `_.debounce` and `_.throttle`.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to debounce.
     * @param {number} [wait=0] The number of milliseconds to delay.
     * @param {Object} [options] The options object.
     * @param {boolean} [options.leading=false] Specify invoking on the leading
     *  edge of the timeout.
     * @param {number} [options.maxWait] The maximum time `func` is allowed to be
     *  delayed before it is invoked.
     * @param {boolean} [options.trailing=true] Specify invoking on the trailing
     *  edge of the timeout.
     * @returns {Function} Returns the new debounced function.
     * @example
     *
     * // avoid costly calculations while the window size is in flux
     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
     *
     * // invoke `sendMail` when the click event is fired, debouncing subsequent calls
     * jQuery('#postbox').on('click', _.debounce(sendMail, 300, {
     *   'leading': true,
     *   'trailing': false
     * }));
     *
     * // ensure `batchLog` is invoked once after 1 second of debounced calls
     * var source = new EventSource('/stream');
     * jQuery(source).on('message', _.debounce(batchLog, 250, {
     *   'maxWait': 1000
     * }));
     *
     * // cancel a debounced call
     * var todoChanges = _.debounce(batchLog, 1000);
     * Object.observe(models.todo, todoChanges);
     *
     * Object.observe(models, function(changes) {
     *   if (_.find(changes, { 'user': 'todo', 'type': 'delete'})) {
     *     todoChanges.cancel();
     *   }
     * }, ['delete']);
     *
     * // ...at some point `models.todo` is changed
     * models.todo.completed = true;
     *
     * // ...before 1 second has passed `models.todo` is deleted
     * // which cancels the debounced `todoChanges` call
     * delete models.todo;
     */
    function debounce(func, wait, options) {
      var args,
          maxTimeoutId,
          result,
          stamp,
          thisArg,
          timeoutId,
          trailingCall,
          lastCalled = 0,
          maxWait = false,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      wait = wait < 0 ? 0 : (+wait || 0);
      if (options === true) {
        var leading = true;
        trailing = false;
      } else if (isObject(options)) {
        leading = !!options.leading;
        maxWait = 'maxWait' in options && nativeMax(+options.maxWait || 0, wait);
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }

      function cancel() {
        if (timeoutId) {
          clearTimeout(timeoutId);
        }
        if (maxTimeoutId) {
          clearTimeout(maxTimeoutId);
        }
        lastCalled = 0;
        maxTimeoutId = timeoutId = trailingCall = undefined;
      }

      function complete(isCalled, id) {
        if (id) {
          clearTimeout(id);
        }
        maxTimeoutId = timeoutId = trailingCall = undefined;
        if (isCalled) {
          lastCalled = now();
          result = func.apply(thisArg, args);
          if (!timeoutId && !maxTimeoutId) {
            args = thisArg = undefined;
          }
        }
      }

      function delayed() {
        var remaining = wait - (now() - stamp);
        if (remaining <= 0 || remaining > wait) {
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }

      function maxDelayed() {
        complete(trailing, timeoutId);
      }

      function debounced() {
        args = arguments;
        stamp = now();
        thisArg = this;
        trailingCall = trailing && (timeoutId || !leading);

        if (maxWait === false) {
          var leadingCall = leading && !timeoutId;
        } else {
          if (!maxTimeoutId && !leading) {
            lastCalled = stamp;
          }
          var remaining = maxWait - (stamp - lastCalled),
              isCalled = remaining <= 0 || remaining > maxWait;

          if (isCalled) {
            if (maxTimeoutId) {
              maxTimeoutId = clearTimeout(maxTimeoutId);
            }
            lastCalled = stamp;
            result = func.apply(thisArg, args);
          }
          else if (!maxTimeoutId) {
            maxTimeoutId = setTimeout(maxDelayed, remaining);
          }
        }
        if (isCalled && timeoutId) {
          timeoutId = clearTimeout(timeoutId);
        }
        else if (!timeoutId && wait !== maxWait) {
          timeoutId = setTimeout(delayed, wait);
        }
        if (leadingCall) {
          isCalled = true;
          result = func.apply(thisArg, args);
        }
        if (isCalled && !timeoutId && !maxTimeoutId) {
          args = thisArg = undefined;
        }
        return result;
      }
      debounced.cancel = cancel;
      return debounced;
    }

    /**
     * Defers invoking the `func` until the current call stack has cleared. Any
     * additional arguments are provided to `func` when it is invoked.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to defer.
     * @param {...*} [args] The arguments to invoke the function with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.defer(function(text) {
     *   console.log(text);
     * }, 'deferred');
     * // logs 'deferred' after one or more milliseconds
     */
    var defer = restParam(function(func, args) {
      return baseDelay(func, 1, args);
    });

    /**
     * Invokes `func` after `wait` milliseconds. Any additional arguments are
     * provided to `func` when it is invoked.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {...*} [args] The arguments to invoke the function with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.delay(function(text) {
     *   console.log(text);
     * }, 1000, 'later');
     * // => logs 'later' after one second
     */
    var delay = restParam(function(func, wait, args) {
      return baseDelay(func, wait, args);
    });

    /**
     * Creates a function that returns the result of invoking the provided
     * functions with the `this` binding of the created function, where each
     * successive invocation is supplied the return value of the previous.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {...Function} [funcs] Functions to invoke.
     * @returns {Function} Returns the new function.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flow(_.add, square);
     * addSquare(1, 2);
     * // => 9
     */
    var flow = createFlow();

    /**
     * This method is like `_.flow` except that it creates a function that
     * invokes the provided functions from right to left.
     *
     * @static
     * @memberOf _
     * @alias backflow, compose
     * @category Function
     * @param {...Function} [funcs] Functions to invoke.
     * @returns {Function} Returns the new function.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flowRight(square, _.add);
     * addSquare(1, 2);
     * // => 9
     */
    var flowRight = createFlow(true);

    /**
     * Creates a function that memoizes the result of `func`. If `resolver` is
     * provided it determines the cache key for storing the result based on the
     * arguments provided to the memoized function. By default, the first argument
     * provided to the memoized function is coerced to a string and used as the
     * cache key. The `func` is invoked with the `this` binding of the memoized
     * function.
     *
     * **Note:** The cache is exposed as the `cache` property on the memoized
     * function. Its creation may be customized by replacing the `_.memoize.Cache`
     * constructor with one whose instances implement the [`Map`](http://ecma-international.org/ecma-262/6.0/#sec-properties-of-the-map-prototype-object)
     * method interface of `get`, `has`, and `set`.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to have its output memoized.
     * @param {Function} [resolver] The function to resolve the cache key.
     * @returns {Function} Returns the new memoizing function.
     * @example
     *
     * var upperCase = _.memoize(function(string) {
     *   return string.toUpperCase();
     * });
     *
     * upperCase('fred');
     * // => 'FRED'
     *
     * // modifying the result cache
     * upperCase.cache.set('fred', 'BARNEY');
     * upperCase('fred');
     * // => 'BARNEY'
     *
     * // replacing `_.memoize.Cache`
     * var object = { 'user': 'fred' };
     * var other = { 'user': 'barney' };
     * var identity = _.memoize(_.identity);
     *
     * identity(object);
     * // => { 'user': 'fred' }
     * identity(other);
     * // => { 'user': 'fred' }
     *
     * _.memoize.Cache = WeakMap;
     * var identity = _.memoize(_.identity);
     *
     * identity(object);
     * // => { 'user': 'fred' }
     * identity(other);
     * // => { 'user': 'barney' }
     */
    function memoize(func, resolver) {
      if (typeof func != 'function' || (resolver && typeof resolver != 'function')) {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var memoized = function() {
        var args = arguments,
            key = resolver ? resolver.apply(this, args) : args[0],
            cache = memoized.cache;

        if (cache.has(key)) {
          return cache.get(key);
        }
        var result = func.apply(this, args);
        memoized.cache = cache.set(key, result);
        return result;
      };
      memoized.cache = new memoize.Cache;
      return memoized;
    }

    /**
     * Creates a function that runs each argument through a corresponding
     * transform function.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to wrap.
     * @param {...(Function|Function[])} [transforms] The functions to transform
     * arguments, specified as individual functions or arrays of functions.
     * @returns {Function} Returns the new function.
     * @example
     *
     * function doubled(n) {
     *   return n * 2;
     * }
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var modded = _.modArgs(function(x, y) {
     *   return [x, y];
     * }, square, doubled);
     *
     * modded(1, 2);
     * // => [1, 4]
     *
     * modded(5, 10);
     * // => [25, 20]
     */
    var modArgs = restParam(function(func, transforms) {
      transforms = baseFlatten(transforms);
      if (typeof func != 'function' || !arrayEvery(transforms, baseIsFunction)) {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var length = transforms.length;
      return restParam(function(args) {
        var index = nativeMin(args.length, length);
        while (index--) {
          args[index] = transforms[index](args[index]);
        }
        return func.apply(this, args);
      });
    });

    /**
     * Creates a function that negates the result of the predicate `func`. The
     * `func` predicate is invoked with the `this` binding and arguments of the
     * created function.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} predicate The predicate to negate.
     * @returns {Function} Returns the new function.
     * @example
     *
     * function isEven(n) {
     *   return n % 2 == 0;
     * }
     *
     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
     * // => [1, 3, 5]
     */
    function negate(predicate) {
      if (typeof predicate != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return function() {
        return !predicate.apply(this, arguments);
      };
    }

    /**
     * Creates a function that is restricted to invoking `func` once. Repeat calls
     * to the function return the value of the first call. The `func` is invoked
     * with the `this` binding and arguments of the created function.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var initialize = _.once(createApplication);
     * initialize();
     * initialize();
     * // `initialize` invokes `createApplication` once
     */
    function once(func) {
      return before(2, func);
    }

    /**
     * Creates a function that invokes `func` with `partial` arguments prepended
     * to those provided to the new function. This method is like `_.bind` except
     * it does **not** alter the `this` binding.
     *
     * The `_.partial.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method does not set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * var greet = function(greeting, name) {
     *   return greeting + ' ' + name;
     * };
     *
     * var sayHelloTo = _.partial(greet, 'hello');
     * sayHelloTo('fred');
     * // => 'hello fred'
     *
     * // using placeholders
     * var greetFred = _.partial(greet, _, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     */
    var partial = createPartial(PARTIAL_FLAG);

    /**
     * This method is like `_.partial` except that partially applied arguments
     * are appended to those provided to the new function.
     *
     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method does not set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * var greet = function(greeting, name) {
     *   return greeting + ' ' + name;
     * };
     *
     * var greetFred = _.partialRight(greet, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     *
     * // using placeholders
     * var sayHelloTo = _.partialRight(greet, 'hello', _);
     * sayHelloTo('fred');
     * // => 'hello fred'
     */
    var partialRight = createPartial(PARTIAL_RIGHT_FLAG);

    /**
     * Creates a function that invokes `func` with arguments arranged according
     * to the specified indexes where the argument value at the first index is
     * provided as the first argument, the argument value at the second index is
     * provided as the second argument, and so on.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to rearrange arguments for.
     * @param {...(number|number[])} indexes The arranged argument indexes,
     *  specified as individual indexes or arrays of indexes.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var rearged = _.rearg(function(a, b, c) {
     *   return [a, b, c];
     * }, 2, 0, 1);
     *
     * rearged('b', 'c', 'a')
     * // => ['a', 'b', 'c']
     *
     * var map = _.rearg(_.map, [1, 0]);
     * map(function(n) {
     *   return n * 3;
     * }, [1, 2, 3]);
     * // => [3, 6, 9]
     */
    var rearg = restParam(function(func, indexes) {
      return createWrapper(func, REARG_FLAG, undefined, undefined, undefined, baseFlatten(indexes));
    });

    /**
     * Creates a function that invokes `func` with the `this` binding of the
     * created function and arguments from `start` and beyond provided as an array.
     *
     * **Note:** This method is based on the [rest parameter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters).
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.restParam(function(what, names) {
     *   return what + ' ' + _.initial(names).join(', ') +
     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
     * });
     *
     * say('hello', 'fred', 'barney', 'pebbles');
     * // => 'hello fred, barney, & pebbles'
     */
    function restParam(func, start) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      start = nativeMax(start === undefined ? (func.length - 1) : (+start || 0), 0);
      return function() {
        var args = arguments,
            index = -1,
            length = nativeMax(args.length - start, 0),
            rest = Array(length);

        while (++index < length) {
          rest[index] = args[start + index];
        }
        switch (start) {
          case 0: return func.call(this, rest);
          case 1: return func.call(this, args[0], rest);
          case 2: return func.call(this, args[0], args[1], rest);
        }
        var otherArgs = Array(start + 1);
        index = -1;
        while (++index < start) {
          otherArgs[index] = args[index];
        }
        otherArgs[start] = rest;
        return func.apply(this, otherArgs);
      };
    }

    /**
     * Creates a function that invokes `func` with the `this` binding of the created
     * function and an array of arguments much like [`Function#apply`](https://es5.github.io/#x15.3.4.3).
     *
     * **Note:** This method is based on the [spread operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_operator).
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to spread arguments over.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.spread(function(who, what) {
     *   return who + ' says ' + what;
     * });
     *
     * say(['fred', 'hello']);
     * // => 'fred says hello'
     *
     * // with a Promise
     * var numbers = Promise.all([
     *   Promise.resolve(40),
     *   Promise.resolve(36)
     * ]);
     *
     * numbers.then(_.spread(function(x, y) {
     *   return x + y;
     * }));
     * // => a Promise of 76
     */
    function spread(func) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return function(array) {
        return func.apply(this, array);
      };
    }

    /**
     * Creates a throttled function that only invokes `func` at most once per
     * every `wait` milliseconds. The throttled function comes with a `cancel`
     * method to cancel delayed invocations. Provide an options object to indicate
     * that `func` should be invoked on the leading and/or trailing edge of the
     * `wait` timeout. Subsequent calls to the throttled function return the
     * result of the last `func` call.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is invoked
     * on the trailing edge of the timeout only if the the throttled function is
     * invoked more than once during the `wait` timeout.
     *
     * See [David Corbacho's article](http://drupalmotion.com/article/debounce-and-throttle-visual-explanation)
     * for details over the differences between `_.throttle` and `_.debounce`.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to throttle.
     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
     * @param {Object} [options] The options object.
     * @param {boolean} [options.leading=true] Specify invoking on the leading
     *  edge of the timeout.
     * @param {boolean} [options.trailing=true] Specify invoking on the trailing
     *  edge of the timeout.
     * @returns {Function} Returns the new throttled function.
     * @example
     *
     * // avoid excessively updating the position while scrolling
     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
     *
     * // invoke `renewToken` when the click event is fired, but not more than once every 5 minutes
     * jQuery('.interactive').on('click', _.throttle(renewToken, 300000, {
     *   'trailing': false
     * }));
     *
     * // cancel a trailing throttled call
     * jQuery(window).on('popstate', throttled.cancel);
     */
    function throttle(func, wait, options) {
      var leading = true,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      if (options === false) {
        leading = false;
      } else if (isObject(options)) {
        leading = 'leading' in options ? !!options.leading : leading;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }
      return debounce(func, wait, { 'leading': leading, 'maxWait': +wait, 'trailing': trailing });
    }

    /**
     * Creates a function that provides `value` to the wrapper function as its
     * first argument. Any additional arguments provided to the function are
     * appended to those provided to the wrapper function. The wrapper is invoked
     * with the `this` binding of the created function.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {*} value The value to wrap.
     * @param {Function} wrapper The wrapper function.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var p = _.wrap(_.escape, function(func, text) {
     *   return '<p>' + func(text) + '</p>';
     * });
     *
     * p('fred, barney, & pebbles');
     * // => '<p>fred, barney, &amp; pebbles</p>'
     */
    function wrap(value, wrapper) {
      wrapper = wrapper == null ? identity : wrapper;
      return createWrapper(wrapper, PARTIAL_FLAG, undefined, [value], []);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates a clone of `value`. If `isDeep` is `true` nested objects are cloned,
     * otherwise they are assigned by reference. If `customizer` is provided it is
     * invoked to produce the cloned values. If `customizer` returns `undefined`
     * cloning is handled by the method instead. The `customizer` is bound to
     * `thisArg` and invoked with two argument; (value [, index|key, object]).
     *
     * **Note:** This method is loosely based on the
     * [structured clone algorithm](http://www.w3.org/TR/html5/infrastructure.html#internal-structured-cloning-algorithm).
     * The enumerable properties of `arguments` objects and objects created by
     * constructors other than `Object` are cloned to plain `Object` objects. An
     * empty object is returned for uncloneable values such as functions, DOM nodes,
     * Maps, Sets, and WeakMaps.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @param {Function} [customizer] The function to customize cloning values.
     * @param {*} [thisArg] The `this` binding of `customizer`.
     * @returns {*} Returns the cloned value.
     * @example
     *
     * var users = [
     *   { 'user': 'barney' },
     *   { 'user': 'fred' }
     * ];
     *
     * var shallow = _.clone(users);
     * shallow[0] === users[0];
     * // => true
     *
     * var deep = _.clone(users, true);
     * deep[0] === users[0];
     * // => false
     *
     * // using a customizer callback
     * var el = _.clone(document.body, function(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(false);
     *   }
     * });
     *
     * el === document.body
     * // => false
     * el.nodeName
     * // => BODY
     * el.childNodes.length;
     * // => 0
     */
    function clone(value, isDeep, customizer, thisArg) {
      if (isDeep && typeof isDeep != 'boolean' && isIterateeCall(value, isDeep, customizer)) {
        isDeep = false;
      }
      else if (typeof isDeep == 'function') {
        thisArg = customizer;
        customizer = isDeep;
        isDeep = false;
      }
      return typeof customizer == 'function'
        ? baseClone(value, isDeep, bindCallback(customizer, thisArg, 1))
        : baseClone(value, isDeep);
    }

    /**
     * Creates a deep clone of `value`. If `customizer` is provided it is invoked
     * to produce the cloned values. If `customizer` returns `undefined` cloning
     * is handled by the method instead. The `customizer` is bound to `thisArg`
     * and invoked with two argument; (value [, index|key, object]).
     *
     * **Note:** This method is loosely based on the
     * [structured clone algorithm](http://www.w3.org/TR/html5/infrastructure.html#internal-structured-cloning-algorithm).
     * The enumerable properties of `arguments` objects and objects created by
     * constructors other than `Object` are cloned to plain `Object` objects. An
     * empty object is returned for uncloneable values such as functions, DOM nodes,
     * Maps, Sets, and WeakMaps.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to deep clone.
     * @param {Function} [customizer] The function to customize cloning values.
     * @param {*} [thisArg] The `this` binding of `customizer`.
     * @returns {*} Returns the deep cloned value.
     * @example
     *
     * var users = [
     *   { 'user': 'barney' },
     *   { 'user': 'fred' }
     * ];
     *
     * var deep = _.cloneDeep(users);
     * deep[0] === users[0];
     * // => false
     *
     * // using a customizer callback
     * var el = _.cloneDeep(document.body, function(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(true);
     *   }
     * });
     *
     * el === document.body
     * // => false
     * el.nodeName
     * // => BODY
     * el.childNodes.length;
     * // => 20
     */
    function cloneDeep(value, customizer, thisArg) {
      return typeof customizer == 'function'
        ? baseClone(value, true, bindCallback(customizer, thisArg, 1))
        : baseClone(value, true);
    }

    /**
     * Checks if `value` is greater than `other`.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`, else `false`.
     * @example
     *
     * _.gt(3, 1);
     * // => true
     *
     * _.gt(3, 3);
     * // => false
     *
     * _.gt(1, 3);
     * // => false
     */
    function gt(value, other) {
      return value > other;
    }

    /**
     * Checks if `value` is greater than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than or equal to `other`, else `false`.
     * @example
     *
     * _.gte(3, 1);
     * // => true
     *
     * _.gte(3, 3);
     * // => true
     *
     * _.gte(1, 3);
     * // => false
     */
    function gte(value, other) {
      return value >= other;
    }

    /**
     * Checks if `value` is classified as an `arguments` object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isArguments(function() { return arguments; }());
     * // => true
     *
     * _.isArguments([1, 2, 3]);
     * // => false
     */
    function isArguments(value) {
      return isObjectLike(value) && isArrayLike(value) &&
        hasOwnProperty.call(value, 'callee') && !propertyIsEnumerable.call(value, 'callee');
    }

    /**
     * Checks if `value` is classified as an `Array` object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isArray([1, 2, 3]);
     * // => true
     *
     * _.isArray(function() { return arguments; }());
     * // => false
     */
    var isArray = nativeIsArray || function(value) {
      return isObjectLike(value) && isLength(value.length) && objToString.call(value) == arrayTag;
    };

    /**
     * Checks if `value` is classified as a boolean primitive or object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isBoolean(false);
     * // => true
     *
     * _.isBoolean(null);
     * // => false
     */
    function isBoolean(value) {
      return value === true || value === false || (isObjectLike(value) && objToString.call(value) == boolTag);
    }

    /**
     * Checks if `value` is classified as a `Date` object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isDate(new Date);
     * // => true
     *
     * _.isDate('Mon April 23 2012');
     * // => false
     */
    function isDate(value) {
      return isObjectLike(value) && objToString.call(value) == dateTag;
    }

    /**
     * Checks if `value` is a DOM element.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
     * @example
     *
     * _.isElement(document.body);
     * // => true
     *
     * _.isElement('<body>');
     * // => false
     */
    function isElement(value) {
      return !!value && value.nodeType === 1 && isObjectLike(value) && !isPlainObject(value);
    }

    /**
     * Checks if `value` is empty. A value is considered empty unless it is an
     * `arguments` object, array, string, or jQuery-like collection with a length
     * greater than `0` or an object with own enumerable properties.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {Array|Object|string} value The value to inspect.
     * @returns {boolean} Returns `true` if `value` is empty, else `false`.
     * @example
     *
     * _.isEmpty(null);
     * // => true
     *
     * _.isEmpty(true);
     * // => true
     *
     * _.isEmpty(1);
     * // => true
     *
     * _.isEmpty([1, 2, 3]);
     * // => false
     *
     * _.isEmpty({ 'a': 1 });
     * // => false
     */
    function isEmpty(value) {
      if (value == null) {
        return true;
      }
      if (isArrayLike(value) && (isArray(value) || isString(value) || isArguments(value) ||
          (isObjectLike(value) && isFunction(value.splice)))) {
        return !value.length;
      }
      return !keys(value).length;
    }

    /**
     * Performs a deep comparison between two values to determine if they are
     * equivalent. If `customizer` is provided it is invoked to compare values.
     * If `customizer` returns `undefined` comparisons are handled by the method
     * instead. The `customizer` is bound to `thisArg` and invoked with three
     * arguments: (value, other [, index|key]).
     *
     * **Note:** This method supports comparing arrays, booleans, `Date` objects,
     * numbers, `Object` objects, regexes, and strings. Objects are compared by
     * their own, not inherited, enumerable properties. Functions and DOM nodes
     * are **not** supported. Provide a customizer function to extend support
     * for comparing other values.
     *
     * @static
     * @memberOf _
     * @alias eq
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {Function} [customizer] The function to customize value comparisons.
     * @param {*} [thisArg] The `this` binding of `customizer`.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'user': 'fred' };
     * var other = { 'user': 'fred' };
     *
     * object == other;
     * // => false
     *
     * _.isEqual(object, other);
     * // => true
     *
     * // using a customizer callback
     * var array = ['hello', 'goodbye'];
     * var other = ['hi', 'goodbye'];
     *
     * _.isEqual(array, other, function(value, other) {
     *   if (_.every([value, other], RegExp.prototype.test, /^h(?:i|ello)$/)) {
     *     return true;
     *   }
     * });
     * // => true
     */
    function isEqual(value, other, customizer, thisArg) {
      customizer = typeof customizer == 'function' ? bindCallback(customizer, thisArg, 3) : undefined;
      var result = customizer ? customizer(value, other) : undefined;
      return  result === undefined ? baseIsEqual(value, other, customizer) : !!result;
    }

    /**
     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
     * `SyntaxError`, `TypeError`, or `URIError` object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
     * @example
     *
     * _.isError(new Error);
     * // => true
     *
     * _.isError(Error);
     * // => false
     */
    function isError(value) {
      return isObjectLike(value) && typeof value.message == 'string' && objToString.call(value) == errorTag;
    }

    /**
     * Checks if `value` is a finite primitive number.
     *
     * **Note:** This method is based on [`Number.isFinite`](http://ecma-international.org/ecma-262/6.0/#sec-number.isfinite).
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
     * @example
     *
     * _.isFinite(10);
     * // => true
     *
     * _.isFinite('10');
     * // => false
     *
     * _.isFinite(true);
     * // => false
     *
     * _.isFinite(Object(10));
     * // => false
     *
     * _.isFinite(Infinity);
     * // => false
     */
    function isFinite(value) {
      return typeof value == 'number' && nativeIsFinite(value);
    }

    /**
     * Checks if `value` is classified as a `Function` object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isFunction(_);
     * // => true
     *
     * _.isFunction(/abc/);
     * // => false
     */
    function isFunction(value) {
      // The use of `Object#toString` avoids issues with the `typeof` operator
      // in older versions of Chrome and Safari which return 'function' for regexes
      // and Safari 8 equivalents which return 'object' for typed array constructors.
      return isObject(value) && objToString.call(value) == funcTag;
    }

    /**
     * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.
     * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
     * @example
     *
     * _.isObject({});
     * // => true
     *
     * _.isObject([1, 2, 3]);
     * // => true
     *
     * _.isObject(1);
     * // => false
     */
    function isObject(value) {
      // Avoid a V8 JIT bug in Chrome 19-20.
      // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.
      var type = typeof value;
      return !!value && (type == 'object' || type == 'function');
    }

    /**
     * Performs a deep comparison between `object` and `source` to determine if
     * `object` contains equivalent property values. If `customizer` is provided
     * it is invoked to compare values. If `customizer` returns `undefined`
     * comparisons are handled by the method instead. The `customizer` is bound
     * to `thisArg` and invoked with three arguments: (value, other, index|key).
     *
     * **Note:** This method supports comparing properties of arrays, booleans,
     * `Date` objects, numbers, `Object` objects, regexes, and strings. Functions
     * and DOM nodes are **not** supported. Provide a customizer function to extend
     * support for comparing other values.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Function} [customizer] The function to customize value comparisons.
     * @param {*} [thisArg] The `this` binding of `customizer`.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * var object = { 'user': 'fred', 'age': 40 };
     *
     * _.isMatch(object, { 'age': 40 });
     * // => true
     *
     * _.isMatch(object, { 'age': 36 });
     * // => false
     *
     * // using a customizer callback
     * var object = { 'greeting': 'hello' };
     * var source = { 'greeting': 'hi' };
     *
     * _.isMatch(object, source, function(value, other) {
     *   return _.every([value, other], RegExp.prototype.test, /^h(?:i|ello)$/) || undefined;
     * });
     * // => true
     */
    function isMatch(object, source, customizer, thisArg) {
      customizer = typeof customizer == 'function' ? bindCallback(customizer, thisArg, 3) : undefined;
      return baseIsMatch(object, getMatchData(source), customizer);
    }

    /**
     * Checks if `value` is `NaN`.
     *
     * **Note:** This method is not the same as [`isNaN`](https://es5.github.io/#x15.1.2.4)
     * which returns `true` for `undefined` and other non-numeric values.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
     * @example
     *
     * _.isNaN(NaN);
     * // => true
     *
     * _.isNaN(new Number(NaN));
     * // => true
     *
     * isNaN(undefined);
     * // => true
     *
     * _.isNaN(undefined);
     * // => false
     */
    function isNaN(value) {
      // An `NaN` primitive is the only value that is not equal to itself.
      // Perform the `toStringTag` check first to avoid errors with some host objects in IE.
      return isNumber(value) && value != +value;
    }

    /**
     * Checks if `value` is a native function.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function, else `false`.
     * @example
     *
     * _.isNative(Array.prototype.push);
     * // => true
     *
     * _.isNative(_);
     * // => false
     */
    function isNative(value) {
      if (value == null) {
        return false;
      }
      if (isFunction(value)) {
        return reIsNative.test(fnToString.call(value));
      }
      return isObjectLike(value) && reIsHostCtor.test(value);
    }

    /**
     * Checks if `value` is `null`.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
     * @example
     *
     * _.isNull(null);
     * // => true
     *
     * _.isNull(void 0);
     * // => false
     */
    function isNull(value) {
      return value === null;
    }

    /**
     * Checks if `value` is classified as a `Number` primitive or object.
     *
     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are classified
     * as numbers, use the `_.isFinite` method.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isNumber(8.4);
     * // => true
     *
     * _.isNumber(NaN);
     * // => true
     *
     * _.isNumber('8.4');
     * // => false
     */
    function isNumber(value) {
      return typeof value == 'number' || (isObjectLike(value) && objToString.call(value) == numberTag);
    }

    /**
     * Checks if `value` is a plain object, that is, an object created by the
     * `Object` constructor or one with a `[[Prototype]]` of `null`.
     *
     * **Note:** This method assumes objects created by the `Object` constructor
     * have no inherited enumerable properties.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * _.isPlainObject(new Foo);
     * // => false
     *
     * _.isPlainObject([1, 2, 3]);
     * // => false
     *
     * _.isPlainObject({ 'x': 0, 'y': 0 });
     * // => true
     *
     * _.isPlainObject(Object.create(null));
     * // => true
     */
    function isPlainObject(value) {
      var Ctor;

      // Exit early for non `Object` objects.
      if (!(isObjectLike(value) && objToString.call(value) == objectTag && !isArguments(value)) ||
          (!hasOwnProperty.call(value, 'constructor') && (Ctor = value.constructor, typeof Ctor == 'function' && !(Ctor instanceof Ctor)))) {
        return false;
      }
      // IE < 9 iterates inherited properties before own properties. If the first
      // iterated property is an object's own property then there are no inherited
      // enumerable properties.
      var result;
      // In most environments an object's own properties are iterated before
      // its inherited properties. If the last iterated property is an object's
      // own property then there are no inherited enumerable properties.
      baseForIn(value, function(subValue, key) {
        result = key;
      });
      return result === undefined || hasOwnProperty.call(value, result);
    }

    /**
     * Checks if `value` is classified as a `RegExp` object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isRegExp(/abc/);
     * // => true
     *
     * _.isRegExp('/abc/');
     * // => false
     */
    function isRegExp(value) {
      return isObject(value) && objToString.call(value) == regexpTag;
    }

    /**
     * Checks if `value` is classified as a `String` primitive or object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isString('abc');
     * // => true
     *
     * _.isString(1);
     * // => false
     */
    function isString(value) {
      return typeof value == 'string' || (isObjectLike(value) && objToString.call(value) == stringTag);
    }

    /**
     * Checks if `value` is classified as a typed array.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isTypedArray(new Uint8Array);
     * // => true
     *
     * _.isTypedArray([]);
     * // => false
     */
    function isTypedArray(value) {
      return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[objToString.call(value)];
    }

    /**
     * Checks if `value` is `undefined`.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
     * @example
     *
     * _.isUndefined(void 0);
     * // => true
     *
     * _.isUndefined(null);
     * // => false
     */
    function isUndefined(value) {
      return value === undefined;
    }

    /**
     * Checks if `value` is less than `other`.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`, else `false`.
     * @example
     *
     * _.lt(1, 3);
     * // => true
     *
     * _.lt(3, 3);
     * // => false
     *
     * _.lt(3, 1);
     * // => false
     */
    function lt(value, other) {
      return value < other;
    }

    /**
     * Checks if `value` is less than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than or equal to `other`, else `false`.
     * @example
     *
     * _.lte(1, 3);
     * // => true
     *
     * _.lte(3, 3);
     * // => true
     *
     * _.lte(3, 1);
     * // => false
     */
    function lte(value, other) {
      return value <= other;
    }

    /**
     * Converts `value` to an array.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Array} Returns the converted array.
     * @example
     *
     * (function() {
     *   return _.toArray(arguments).slice(1);
     * }(1, 2, 3));
     * // => [2, 3]
     */
    function toArray(value) {
      var length = value ? getLength(value) : 0;
      if (!isLength(length)) {
        return values(value);
      }
      if (!length) {
        return [];
      }
      return arrayCopy(value);
    }

    /**
     * Converts `value` to a plain object flattening inherited enumerable
     * properties of `value` to own properties of the plain object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Object} Returns the converted plain object.
     * @example
     *
     * function Foo() {
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.assign({ 'a': 1 }, new Foo);
     * // => { 'a': 1, 'b': 2 }
     *
     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
     * // => { 'a': 1, 'b': 2, 'c': 3 }
     */
    function toPlainObject(value) {
      return baseCopy(value, keysIn(value));
    }

    /*------------------------------------------------------------------------*/

    /**
     * Recursively merges own enumerable properties of the source object(s), that
     * don't resolve to `undefined` into the destination object. Subsequent sources
     * overwrite property assignments of previous sources. If `customizer` is
     * provided it is invoked to produce the merged values of the destination and
     * source properties. If `customizer` returns `undefined` merging is handled
     * by the method instead. The `customizer` is bound to `thisArg` and invoked
     * with five arguments: (objectValue, sourceValue, key, object, source).
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @param {*} [thisArg] The `this` binding of `customizer`.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var users = {
     *   'data': [{ 'user': 'barney' }, { 'user': 'fred' }]
     * };
     *
     * var ages = {
     *   'data': [{ 'age': 36 }, { 'age': 40 }]
     * };
     *
     * _.merge(users, ages);
     * // => { 'data': [{ 'user': 'barney', 'age': 36 }, { 'user': 'fred', 'age': 40 }] }
     *
     * // using a customizer callback
     * var object = {
     *   'fruits': ['apple'],
     *   'vegetables': ['beet']
     * };
     *
     * var other = {
     *   'fruits': ['banana'],
     *   'vegetables': ['carrot']
     * };
     *
     * _.merge(object, other, function(a, b) {
     *   if (_.isArray(a)) {
     *     return a.concat(b);
     *   }
     * });
     * // => { 'fruits': ['apple', 'banana'], 'vegetables': ['beet', 'carrot'] }
     */
    var merge = createAssigner(baseMerge);

    /**
     * Assigns own enumerable properties of source object(s) to the destination
     * object. Subsequent sources overwrite property assignments of previous sources.
     * If `customizer` is provided it is invoked to produce the assigned values.
     * The `customizer` is bound to `thisArg` and invoked with five arguments:
     * (objectValue, sourceValue, key, object, source).
     *
     * **Note:** This method mutates `object` and is based on
     * [`Object.assign`](http://ecma-international.org/ecma-262/6.0/#sec-object.assign).
     *
     * @static
     * @memberOf _
     * @alias extend
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @param {*} [thisArg] The `this` binding of `customizer`.
     * @returns {Object} Returns `object`.
     * @example
     *
     * _.assign({ 'user': 'barney' }, { 'age': 40 }, { 'user': 'fred' });
     * // => { 'user': 'fred', 'age': 40 }
     *
     * // using a customizer callback
     * var defaults = _.partialRight(_.assign, function(value, other) {
     *   return _.isUndefined(value) ? other : value;
     * });
     *
     * defaults({ 'user': 'barney' }, { 'age': 36 }, { 'user': 'fred' });
     * // => { 'user': 'barney', 'age': 36 }
     */
    var assign = createAssigner(function(object, source, customizer) {
      return customizer
        ? assignWith(object, source, customizer)
        : baseAssign(object, source);
    });

    /**
     * Creates an object that inherits from the given `prototype` object. If a
     * `properties` object is provided its own enumerable properties are assigned
     * to the created object.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} prototype The object to inherit from.
     * @param {Object} [properties] The properties to assign to the object.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Object} Returns the new object.
     * @example
     *
     * function Shape() {
     *   this.x = 0;
     *   this.y = 0;
     * }
     *
     * function Circle() {
     *   Shape.call(this);
     * }
     *
     * Circle.prototype = _.create(Shape.prototype, {
     *   'constructor': Circle
     * });
     *
     * var circle = new Circle;
     * circle instanceof Circle;
     * // => true
     *
     * circle instanceof Shape;
     * // => true
     */
    function create(prototype, properties, guard) {
      var result = baseCreate(prototype);
      if (guard && isIterateeCall(prototype, properties, guard)) {
        properties = undefined;
      }
      return properties ? baseAssign(result, properties) : result;
    }

    /**
     * Assigns own enumerable properties of source object(s) to the destination
     * object for all destination properties that resolve to `undefined`. Once a
     * property is set, additional values of the same property are ignored.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @example
     *
     * _.defaults({ 'user': 'barney' }, { 'age': 36 }, { 'user': 'fred' });
     * // => { 'user': 'barney', 'age': 36 }
     */
    var defaults = createDefaults(assign, assignDefaults);

    /**
     * This method is like `_.defaults` except that it recursively assigns
     * default properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @example
     *
     * _.defaultsDeep({ 'user': { 'name': 'barney' } }, { 'user': { 'name': 'fred', 'age': 36 } });
     * // => { 'user': { 'name': 'barney', 'age': 36 } }
     *
     */
    var defaultsDeep = createDefaults(merge, mergeDefaults);

    /**
     * This method is like `_.find` except that it returns the key of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to search.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {string|undefined} Returns the key of the matched element, else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findKey(users, function(chr) {
     *   return chr.age < 40;
     * });
     * // => 'barney' (iteration order is not guaranteed)
     *
     * // using the `_.matches` callback shorthand
     * _.findKey(users, { 'age': 1, 'active': true });
     * // => 'pebbles'
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.findKey(users, 'active', false);
     * // => 'fred'
     *
     * // using the `_.property` callback shorthand
     * _.findKey(users, 'active');
     * // => 'barney'
     */
    var findKey = createFindKey(baseForOwn);

    /**
     * This method is like `_.findKey` except that it iterates over elements of
     * a collection in the opposite order.
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to search.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {string|undefined} Returns the key of the matched element, else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findLastKey(users, function(chr) {
     *   return chr.age < 40;
     * });
     * // => returns `pebbles` assuming `_.findKey` returns `barney`
     *
     * // using the `_.matches` callback shorthand
     * _.findLastKey(users, { 'age': 36, 'active': true });
     * // => 'barney'
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.findLastKey(users, 'active', false);
     * // => 'fred'
     *
     * // using the `_.property` callback shorthand
     * _.findLastKey(users, 'active');
     * // => 'pebbles'
     */
    var findLastKey = createFindKey(baseForOwnRight);

    /**
     * Iterates over own and inherited enumerable properties of an object invoking
     * `iteratee` for each property. The `iteratee` is bound to `thisArg` and invoked
     * with three arguments: (value, key, object). Iteratee functions may exit
     * iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forIn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => logs 'a', 'b', and 'c' (iteration order is not guaranteed)
     */
    var forIn = createForIn(baseFor);

    /**
     * This method is like `_.forIn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forInRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => logs 'c', 'b', and 'a' assuming `_.forIn ` logs 'a', 'b', and 'c'
     */
    var forInRight = createForIn(baseForRight);

    /**
     * Iterates over own enumerable properties of an object invoking `iteratee`
     * for each property. The `iteratee` is bound to `thisArg` and invoked with
     * three arguments: (value, key, object). Iteratee functions may exit iteration
     * early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => logs 'a' and 'b' (iteration order is not guaranteed)
     */
    var forOwn = createForOwn(baseForOwn);

    /**
     * This method is like `_.forOwn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwnRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => logs 'b' and 'a' assuming `_.forOwn` logs 'a' and 'b'
     */
    var forOwnRight = createForOwn(baseForOwnRight);

    /**
     * Creates an array of function property names from all enumerable properties,
     * own and inherited, of `object`.
     *
     * @static
     * @memberOf _
     * @alias methods
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the new array of property names.
     * @example
     *
     * _.functions(_);
     * // => ['after', 'ary', 'assign', ...]
     */
    function functions(object) {
      return baseFunctions(object, keysIn(object));
    }

    /**
     * Gets the property value at `path` of `object`. If the resolved value is
     * `undefined` the `defaultValue` is used in its place.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @param {*} [defaultValue] The value returned if the resolved value is `undefined`.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.get(object, 'a[0].b.c');
     * // => 3
     *
     * _.get(object, ['a', '0', 'b', 'c']);
     * // => 3
     *
     * _.get(object, 'a.b.c', 'default');
     * // => 'default'
     */
    function get(object, path, defaultValue) {
      var result = object == null ? undefined : baseGet(object, toPath(path), path + '');
      return result === undefined ? defaultValue : result;
    }

    /**
     * Checks if `path` is a direct property.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` is a direct property, else `false`.
     * @example
     *
     * var object = { 'a': { 'b': { 'c': 3 } } };
     *
     * _.has(object, 'a');
     * // => true
     *
     * _.has(object, 'a.b.c');
     * // => true
     *
     * _.has(object, ['a', 'b', 'c']);
     * // => true
     */
    function has(object, path) {
      if (object == null) {
        return false;
      }
      var result = hasOwnProperty.call(object, path);
      if (!result && !isKey(path)) {
        path = toPath(path);
        object = path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));
        if (object == null) {
          return false;
        }
        path = last(path);
        result = hasOwnProperty.call(object, path);
      }
      return result || (isLength(object.length) && isIndex(path, object.length) &&
        (isArray(object) || isArguments(object)));
    }

    /**
     * Creates an object composed of the inverted keys and values of `object`.
     * If `object` contains duplicate values, subsequent values overwrite property
     * assignments of previous values unless `multiValue` is `true`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to invert.
     * @param {boolean} [multiValue] Allow multiple values per key.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invert(object);
     * // => { '1': 'c', '2': 'b' }
     *
     * // with `multiValue`
     * _.invert(object, true);
     * // => { '1': ['a', 'c'], '2': ['b'] }
     */
    function invert(object, multiValue, guard) {
      if (guard && isIterateeCall(object, multiValue, guard)) {
        multiValue = undefined;
      }
      var index = -1,
          props = keys(object),
          length = props.length,
          result = {};

      while (++index < length) {
        var key = props[index],
            value = object[key];

        if (multiValue) {
          if (hasOwnProperty.call(result, value)) {
            result[value].push(key);
          } else {
            result[value] = [key];
          }
        }
        else {
          result[value] = key;
        }
      }
      return result;
    }

    /**
     * Creates an array of the own enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects. See the
     * [ES spec](http://ecma-international.org/ecma-262/6.0/#sec-object.keys)
     * for more details.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keys(new Foo);
     * // => ['a', 'b'] (iteration order is not guaranteed)
     *
     * _.keys('hi');
     * // => ['0', '1']
     */
    var keys = !nativeKeys ? shimKeys : function(object) {
      var Ctor = object == null ? undefined : object.constructor;
      if ((typeof Ctor == 'function' && Ctor.prototype === object) ||
          (typeof object != 'function' && isArrayLike(object))) {
        return shimKeys(object);
      }
      return isObject(object) ? nativeKeys(object) : [];
    };

    /**
     * Creates an array of the own and inherited enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keysIn(new Foo);
     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
     */
    function keysIn(object) {
      if (object == null) {
        return [];
      }
      if (!isObject(object)) {
        object = Object(object);
      }
      var length = object.length;
      length = (length && isLength(length) &&
        (isArray(object) || isArguments(object)) && length) || 0;

      var Ctor = object.constructor,
          index = -1,
          isProto = typeof Ctor == 'function' && Ctor.prototype === object,
          result = Array(length),
          skipIndexes = length > 0;

      while (++index < length) {
        result[index] = (index + '');
      }
      for (var key in object) {
        if (!(skipIndexes && isIndex(key, length)) &&
            !(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * The opposite of `_.mapValues`; this method creates an object with the
     * same values as `object` and keys generated by running each own enumerable
     * property of `object` through `iteratee`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Object} Returns the new mapped object.
     * @example
     *
     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
     *   return key + value;
     * });
     * // => { 'a1': 1, 'b2': 2 }
     */
    var mapKeys = createObjectMapper(true);

    /**
     * Creates an object with the same keys as `object` and values generated by
     * running each own enumerable property of `object` through `iteratee`. The
     * iteratee function is bound to `thisArg` and invoked with three arguments:
     * (value, key, object).
     *
     * If a property name is provided for `iteratee` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `iteratee` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Object} Returns the new mapped object.
     * @example
     *
     * _.mapValues({ 'a': 1, 'b': 2 }, function(n) {
     *   return n * 3;
     * });
     * // => { 'a': 3, 'b': 6 }
     *
     * var users = {
     *   'fred':    { 'user': 'fred',    'age': 40 },
     *   'pebbles': { 'user': 'pebbles', 'age': 1 }
     * };
     *
     * // using the `_.property` callback shorthand
     * _.mapValues(users, 'age');
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     */
    var mapValues = createObjectMapper();

    /**
     * The opposite of `_.pick`; this method creates an object composed of the
     * own and inherited enumerable properties of `object` that are not omitted.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {Function|...(string|string[])} [predicate] The function invoked per
     *  iteration or property names to omit, specified as individual property
     *  names or arrays of property names.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'user': 'fred', 'age': 40 };
     *
     * _.omit(object, 'age');
     * // => { 'user': 'fred' }
     *
     * _.omit(object, _.isNumber);
     * // => { 'user': 'fred' }
     */
    var omit = restParam(function(object, props) {
      if (object == null) {
        return {};
      }
      if (typeof props[0] != 'function') {
        var props = arrayMap(baseFlatten(props), String);
        return pickByArray(object, baseDifference(keysIn(object), props));
      }
      var predicate = bindCallback(props[0], props[1], 3);
      return pickByCallback(object, function(value, key, object) {
        return !predicate(value, key, object);
      });
    });

    /**
     * Creates a two dimensional array of the key-value pairs for `object`,
     * e.g. `[[key1, value1], [key2, value2]]`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the new array of key-value pairs.
     * @example
     *
     * _.pairs({ 'barney': 36, 'fred': 40 });
     * // => [['barney', 36], ['fred', 40]] (iteration order is not guaranteed)
     */
    function pairs(object) {
      object = toObject(object);

      var index = -1,
          props = keys(object),
          length = props.length,
          result = Array(length);

      while (++index < length) {
        var key = props[index];
        result[index] = [key, object[key]];
      }
      return result;
    }

    /**
     * Creates an object composed of the picked `object` properties. Property
     * names may be specified as individual arguments or as arrays of property
     * names. If `predicate` is provided it is invoked for each property of `object`
     * picking the properties `predicate` returns truthy for. The predicate is
     * bound to `thisArg` and invoked with three arguments: (value, key, object).
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {Function|...(string|string[])} [predicate] The function invoked per
     *  iteration or property names to pick, specified as individual property
     *  names or arrays of property names.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'user': 'fred', 'age': 40 };
     *
     * _.pick(object, 'user');
     * // => { 'user': 'fred' }
     *
     * _.pick(object, _.isString);
     * // => { 'user': 'fred' }
     */
    var pick = restParam(function(object, props) {
      if (object == null) {
        return {};
      }
      return typeof props[0] == 'function'
        ? pickByCallback(object, bindCallback(props[0], props[1], 3))
        : pickByArray(object, baseFlatten(props));
    });

    /**
     * This method is like `_.get` except that if the resolved value is a function
     * it is invoked with the `this` binding of its parent object and its result
     * is returned.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to resolve.
     * @param {*} [defaultValue] The value returned if the resolved value is `undefined`.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
     *
     * _.result(object, 'a[0].b.c1');
     * // => 3
     *
     * _.result(object, 'a[0].b.c2');
     * // => 4
     *
     * _.result(object, 'a.b.c', 'default');
     * // => 'default'
     *
     * _.result(object, 'a.b.c', _.constant('default'));
     * // => 'default'
     */
    function result(object, path, defaultValue) {
      var result = object == null ? undefined : object[path];
      if (result === undefined) {
        if (object != null && !isKey(path, object)) {
          path = toPath(path);
          object = path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));
          result = object == null ? undefined : object[last(path)];
        }
        result = result === undefined ? defaultValue : result;
      }
      return isFunction(result) ? result.call(object) : result;
    }

    /**
     * Sets the property value of `path` on `object`. If a portion of `path`
     * does not exist it is created.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to augment.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.set(object, 'a[0].b.c', 4);
     * console.log(object.a[0].b.c);
     * // => 4
     *
     * _.set(object, 'x[0].y.z', 5);
     * console.log(object.x[0].y.z);
     * // => 5
     */
    function set(object, path, value) {
      if (object == null) {
        return object;
      }
      var pathKey = (path + '');
      path = (object[pathKey] != null || isKey(path, object)) ? [pathKey] : toPath(path);

      var index = -1,
          length = path.length,
          lastIndex = length - 1,
          nested = object;

      while (nested != null && ++index < length) {
        var key = path[index];
        if (isObject(nested)) {
          if (index == lastIndex) {
            nested[key] = value;
          } else if (nested[key] == null) {
            nested[key] = isIndex(path[index + 1]) ? [] : {};
          }
        }
        nested = nested[key];
      }
      return object;
    }

    /**
     * An alternative to `_.reduce`; this method transforms `object` to a new
     * `accumulator` object which is the result of running each of its own enumerable
     * properties through `iteratee`, with each invocation potentially mutating
     * the `accumulator` object. The `iteratee` is bound to `thisArg` and invoked
     * with four arguments: (accumulator, value, key, object). Iteratee functions
     * may exit iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Array|Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The custom accumulator value.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * _.transform([2, 3, 4], function(result, n) {
     *   result.push(n *= n);
     *   return n % 2 == 0;
     * });
     * // => [4, 9]
     *
     * _.transform({ 'a': 1, 'b': 2 }, function(result, n, key) {
     *   result[key] = n * 3;
     * });
     * // => { 'a': 3, 'b': 6 }
     */
    function transform(object, iteratee, accumulator, thisArg) {
      var isArr = isArray(object) || isTypedArray(object);
      iteratee = getCallback(iteratee, thisArg, 4);

      if (accumulator == null) {
        if (isArr || isObject(object)) {
          var Ctor = object.constructor;
          if (isArr) {
            accumulator = isArray(object) ? new Ctor : [];
          } else {
            accumulator = baseCreate(isFunction(Ctor) ? Ctor.prototype : undefined);
          }
        } else {
          accumulator = {};
        }
      }
      (isArr ? arrayEach : baseForOwn)(object, function(value, index, object) {
        return iteratee(accumulator, value, index, object);
      });
      return accumulator;
    }

    /**
     * Creates an array of the own enumerable property values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.values(new Foo);
     * // => [1, 2] (iteration order is not guaranteed)
     *
     * _.values('hi');
     * // => ['h', 'i']
     */
    function values(object) {
      return baseValues(object, keys(object));
    }

    /**
     * Creates an array of the own and inherited enumerable property values
     * of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.valuesIn(new Foo);
     * // => [1, 2, 3] (iteration order is not guaranteed)
     */
    function valuesIn(object) {
      return baseValues(object, keysIn(object));
    }

    /*------------------------------------------------------------------------*/

    /**
     * Checks if `n` is between `start` and up to but not including, `end`. If
     * `end` is not specified it is set to `start` with `start` then set to `0`.
     *
     * @static
     * @memberOf _
     * @category Number
     * @param {number} n The number to check.
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `n` is in the range, else `false`.
     * @example
     *
     * _.inRange(3, 2, 4);
     * // => true
     *
     * _.inRange(4, 8);
     * // => true
     *
     * _.inRange(4, 2);
     * // => false
     *
     * _.inRange(2, 2);
     * // => false
     *
     * _.inRange(1.2, 2);
     * // => true
     *
     * _.inRange(5.2, 4);
     * // => false
     */
    function inRange(value, start, end) {
      start = +start || 0;
      if (end === undefined) {
        end = start;
        start = 0;
      } else {
        end = +end || 0;
      }
      return value >= nativeMin(start, end) && value < nativeMax(start, end);
    }

    /**
     * Produces a random number between `min` and `max` (inclusive). If only one
     * argument is provided a number between `0` and the given number is returned.
     * If `floating` is `true`, or either `min` or `max` are floats, a floating-point
     * number is returned instead of an integer.
     *
     * @static
     * @memberOf _
     * @category Number
     * @param {number} [min=0] The minimum possible value.
     * @param {number} [max=1] The maximum possible value.
     * @param {boolean} [floating] Specify returning a floating-point number.
     * @returns {number} Returns the random number.
     * @example
     *
     * _.random(0, 5);
     * // => an integer between 0 and 5
     *
     * _.random(5);
     * // => also an integer between 0 and 5
     *
     * _.random(5, true);
     * // => a floating-point number between 0 and 5
     *
     * _.random(1.2, 5.2);
     * // => a floating-point number between 1.2 and 5.2
     */
    function random(min, max, floating) {
      if (floating && isIterateeCall(min, max, floating)) {
        max = floating = undefined;
      }
      var noMin = min == null,
          noMax = max == null;

      if (floating == null) {
        if (noMax && typeof min == 'boolean') {
          floating = min;
          min = 1;
        }
        else if (typeof max == 'boolean') {
          floating = max;
          noMax = true;
        }
      }
      if (noMin && noMax) {
        max = 1;
        noMax = false;
      }
      min = +min || 0;
      if (noMax) {
        max = min;
        min = 0;
      } else {
        max = +max || 0;
      }
      if (floating || min % 1 || max % 1) {
        var rand = nativeRandom();
        return nativeMin(min + (rand * (max - min + parseFloat('1e-' + ((rand + '').length - 1)))), max);
      }
      return baseRandom(min, max);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the camel cased string.
     * @example
     *
     * _.camelCase('Foo Bar');
     * // => 'fooBar'
     *
     * _.camelCase('--foo-bar');
     * // => 'fooBar'
     *
     * _.camelCase('__foo_bar__');
     * // => 'fooBar'
     */
    var camelCase = createCompounder(function(result, word, index) {
      word = word.toLowerCase();
      return result + (index ? (word.charAt(0).toUpperCase() + word.slice(1)) : word);
    });

    /**
     * Capitalizes the first character of `string`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to capitalize.
     * @returns {string} Returns the capitalized string.
     * @example
     *
     * _.capitalize('fred');
     * // => 'Fred'
     */
    function capitalize(string) {
      string = baseToString(string);
      return string && (string.charAt(0).toUpperCase() + string.slice(1));
    }

    /**
     * Deburrs `string` by converting [latin-1 supplementary letters](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
     * to basic latin letters and removing [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to deburr.
     * @returns {string} Returns the deburred string.
     * @example
     *
     * _.deburr('déjà vu');
     * // => 'deja vu'
     */
    function deburr(string) {
      string = baseToString(string);
      return string && string.replace(reLatin1, deburrLetter).replace(reComboMark, '');
    }

    /**
     * Checks if `string` ends with the given target string.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to search.
     * @param {string} [target] The string to search for.
     * @param {number} [position=string.length] The position to search from.
     * @returns {boolean} Returns `true` if `string` ends with `target`, else `false`.
     * @example
     *
     * _.endsWith('abc', 'c');
     * // => true
     *
     * _.endsWith('abc', 'b');
     * // => false
     *
     * _.endsWith('abc', 'b', 2);
     * // => true
     */
    function endsWith(string, target, position) {
      string = baseToString(string);
      target = (target + '');

      var length = string.length;
      position = position === undefined
        ? length
        : nativeMin(position < 0 ? 0 : (+position || 0), length);

      position -= target.length;
      return position >= 0 && string.indexOf(target, position) == position;
    }

    /**
     * Converts the characters "&", "<", ">", '"', "'", and "\`", in `string` to
     * their corresponding HTML entities.
     *
     * **Note:** No other characters are escaped. To escape additional characters
     * use a third-party library like [_he_](https://mths.be/he).
     *
     * Though the ">" character is escaped for symmetry, characters like
     * ">" and "/" don't need escaping in HTML and have no special meaning
     * unless they're part of a tag or unquoted attribute value.
     * See [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
     * (under "semi-related fun fact") for more details.
     *
     * Backticks are escaped because in Internet Explorer < 9, they can break out
     * of attribute values or HTML comments. See [#59](https://html5sec.org/#59),
     * [#102](https://html5sec.org/#102), [#108](https://html5sec.org/#108), and
     * [#133](https://html5sec.org/#133) of the [HTML5 Security Cheatsheet](https://html5sec.org/)
     * for more details.
     *
     * When working with HTML you should always [quote attribute values](http://wonko.com/post/html-escaping)
     * to reduce XSS vectors.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escape('fred, barney, & pebbles');
     * // => 'fred, barney, &amp; pebbles'
     */
    function escape(string) {
      // Reset `lastIndex` because in IE < 9 `String#replace` does not.
      string = baseToString(string);
      return (string && reHasUnescapedHtml.test(string))
        ? string.replace(reUnescapedHtml, escapeHtmlChar)
        : string;
    }

    /**
     * Escapes the `RegExp` special characters "\", "/", "^", "$", ".", "|", "?",
     * "*", "+", "(", ")", "[", "]", "{" and "}" in `string`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escapeRegExp('[lodash](https://lodash.com/)');
     * // => '\[lodash\]\(https:\/\/lodash\.com\/\)'
     */
    function escapeRegExp(string) {
      string = baseToString(string);
      return (string && reHasRegExpChars.test(string))
        ? string.replace(reRegExpChars, escapeRegExpChar)
        : (string || '(?:)');
    }

    /**
     * Converts `string` to [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the kebab cased string.
     * @example
     *
     * _.kebabCase('Foo Bar');
     * // => 'foo-bar'
     *
     * _.kebabCase('fooBar');
     * // => 'foo-bar'
     *
     * _.kebabCase('__foo_bar__');
     * // => 'foo-bar'
     */
    var kebabCase = createCompounder(function(result, word, index) {
      return result + (index ? '-' : '') + word.toLowerCase();
    });

    /**
     * Pads `string` on the left and right sides if it's shorter than `length`.
     * Padding characters are truncated if they can't be evenly divided by `length`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.pad('abc', 8);
     * // => '  abc   '
     *
     * _.pad('abc', 8, '_-');
     * // => '_-abc_-_'
     *
     * _.pad('abc', 3);
     * // => 'abc'
     */
    function pad(string, length, chars) {
      string = baseToString(string);
      length = +length;

      var strLength = string.length;
      if (strLength >= length || !nativeIsFinite(length)) {
        return string;
      }
      var mid = (length - strLength) / 2,
          leftLength = nativeFloor(mid),
          rightLength = nativeCeil(mid);

      chars = createPadding('', rightLength, chars);
      return chars.slice(0, leftLength) + string + chars;
    }

    /**
     * Pads `string` on the left side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padLeft('abc', 6);
     * // => '   abc'
     *
     * _.padLeft('abc', 6, '_-');
     * // => '_-_abc'
     *
     * _.padLeft('abc', 3);
     * // => 'abc'
     */
    var padLeft = createPadDir();

    /**
     * Pads `string` on the right side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padRight('abc', 6);
     * // => 'abc   '
     *
     * _.padRight('abc', 6, '_-');
     * // => 'abc_-_'
     *
     * _.padRight('abc', 3);
     * // => 'abc'
     */
    var padRight = createPadDir(true);

    /**
     * Converts `string` to an integer of the specified radix. If `radix` is
     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a hexadecimal,
     * in which case a `radix` of `16` is used.
     *
     * **Note:** This method aligns with the [ES5 implementation](https://es5.github.io/#E)
     * of `parseInt`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} string The string to convert.
     * @param {number} [radix] The radix to interpret `value` by.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.parseInt('08');
     * // => 8
     *
     * _.map(['6', '08', '10'], _.parseInt);
     * // => [6, 8, 10]
     */
    function parseInt(string, radix, guard) {
      // Firefox < 21 and Opera < 15 follow ES3 for `parseInt`.
      // Chrome fails to trim leading <BOM> whitespace characters.
      // See https://code.google.com/p/v8/issues/detail?id=3109 for more details.
      if (guard ? isIterateeCall(string, radix, guard) : radix == null) {
        radix = 0;
      } else if (radix) {
        radix = +radix;
      }
      string = trim(string);
      return nativeParseInt(string, radix || (reHasHexPrefix.test(string) ? 16 : 10));
    }

    /**
     * Repeats the given string `n` times.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to repeat.
     * @param {number} [n=0] The number of times to repeat the string.
     * @returns {string} Returns the repeated string.
     * @example
     *
     * _.repeat('*', 3);
     * // => '***'
     *
     * _.repeat('abc', 2);
     * // => 'abcabc'
     *
     * _.repeat('abc', 0);
     * // => ''
     */
    function repeat(string, n) {
      var result = '';
      string = baseToString(string);
      n = +n;
      if (n < 1 || !string || !nativeIsFinite(n)) {
        return result;
      }
      // Leverage the exponentiation by squaring algorithm for a faster repeat.
      // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
      do {
        if (n % 2) {
          result += string;
        }
        n = nativeFloor(n / 2);
        string += string;
      } while (n);

      return result;
    }

    /**
     * Converts `string` to [snake case](https://en.wikipedia.org/wiki/Snake_case).
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the snake cased string.
     * @example
     *
     * _.snakeCase('Foo Bar');
     * // => 'foo_bar'
     *
     * _.snakeCase('fooBar');
     * // => 'foo_bar'
     *
     * _.snakeCase('--foo-bar');
     * // => 'foo_bar'
     */
    var snakeCase = createCompounder(function(result, word, index) {
      return result + (index ? '_' : '') + word.toLowerCase();
    });

    /**
     * Converts `string` to [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the start cased string.
     * @example
     *
     * _.startCase('--foo-bar');
     * // => 'Foo Bar'
     *
     * _.startCase('fooBar');
     * // => 'Foo Bar'
     *
     * _.startCase('__foo_bar__');
     * // => 'Foo Bar'
     */
    var startCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + (word.charAt(0).toUpperCase() + word.slice(1));
    });

    /**
     * Checks if `string` starts with the given target string.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to search.
     * @param {string} [target] The string to search for.
     * @param {number} [position=0] The position to search from.
     * @returns {boolean} Returns `true` if `string` starts with `target`, else `false`.
     * @example
     *
     * _.startsWith('abc', 'a');
     * // => true
     *
     * _.startsWith('abc', 'b');
     * // => false
     *
     * _.startsWith('abc', 'b', 1);
     * // => true
     */
    function startsWith(string, target, position) {
      string = baseToString(string);
      position = position == null
        ? 0
        : nativeMin(position < 0 ? 0 : (+position || 0), string.length);

      return string.lastIndexOf(target, position) == position;
    }

    /**
     * Creates a compiled template function that can interpolate data properties
     * in "interpolate" delimiters, HTML-escape interpolated data properties in
     * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
     * properties may be accessed as free variables in the template. If a setting
     * object is provided it takes precedence over `_.templateSettings` values.
     *
     * **Note:** In the development build `_.template` utilizes
     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
     * for easier debugging.
     *
     * For more information on precompiling templates see
     * [lodash's custom builds documentation](https://lodash.com/custom-builds).
     *
     * For more information on Chrome extension sandboxes see
     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The template string.
     * @param {Object} [options] The options object.
     * @param {RegExp} [options.escape] The HTML "escape" delimiter.
     * @param {RegExp} [options.evaluate] The "evaluate" delimiter.
     * @param {Object} [options.imports] An object to import into the template as free variables.
     * @param {RegExp} [options.interpolate] The "interpolate" delimiter.
     * @param {string} [options.sourceURL] The sourceURL of the template's compiled source.
     * @param {string} [options.variable] The data object variable name.
     * @param- {Object} [otherOptions] Enables the legacy `options` param signature.
     * @returns {Function} Returns the compiled template function.
     * @example
     *
     * // using the "interpolate" delimiter to create a compiled template
     * var compiled = _.template('hello <%= user %>!');
     * compiled({ 'user': 'fred' });
     * // => 'hello fred!'
     *
     * // using the HTML "escape" delimiter to escape data property values
     * var compiled = _.template('<b><%- value %></b>');
     * compiled({ 'value': '<script>' });
     * // => '<b>&lt;script&gt;</b>'
     *
     * // using the "evaluate" delimiter to execute JavaScript and generate HTML
     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // using the internal `print` function in "evaluate" delimiters
     * var compiled = _.template('<% print("hello " + user); %>!');
     * compiled({ 'user': 'barney' });
     * // => 'hello barney!'
     *
     * // using the ES delimiter as an alternative to the default "interpolate" delimiter
     * var compiled = _.template('hello ${ user }!');
     * compiled({ 'user': 'pebbles' });
     * // => 'hello pebbles!'
     *
     * // using custom template delimiters
     * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
     * var compiled = _.template('hello {{ user }}!');
     * compiled({ 'user': 'mustache' });
     * // => 'hello mustache!'
     *
     * // using backslashes to treat delimiters as plain text
     * var compiled = _.template('<%= "\\<%- value %\\>" %>');
     * compiled({ 'value': 'ignored' });
     * // => '<%- value %>'
     *
     * // using the `imports` option to import `jQuery` as `jq`
     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // using the `sourceURL` option to specify a custom sourceURL for the template
     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
     * compiled(data);
     * // => find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector
     *
     * // using the `variable` option to ensure a with-statement isn't used in the compiled template
     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
     * compiled.source;
     * // => function(data) {
     * //   var __t, __p = '';
     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
     * //   return __p;
     * // }
     *
     * // using the `source` property to inline compiled templates for meaningful
     * // line numbers in error messages and a stack trace
     * fs.writeFileSync(path.join(cwd, 'jst.js'), '\
     *   var JST = {\
     *     "main": ' + _.template(mainText).source + '\
     *   };\
     * ');
     */
    function template(string, options, otherOptions) {
      // Based on John Resig's `tmpl` implementation (http://ejohn.org/blog/javascript-micro-templating/)
      // and Laura Doktorova's doT.js (https://github.com/olado/doT).
      var settings = lodash.templateSettings;

      if (otherOptions && isIterateeCall(string, options, otherOptions)) {
        options = otherOptions = undefined;
      }
      string = baseToString(string);
      options = assignWith(baseAssign({}, otherOptions || options), settings, assignOwnDefaults);

      var imports = assignWith(baseAssign({}, options.imports), settings.imports, assignOwnDefaults),
          importsKeys = keys(imports),
          importsValues = baseValues(imports, importsKeys);

      var isEscaping,
          isEvaluating,
          index = 0,
          interpolate = options.interpolate || reNoMatch,
          source = "__p += '";

      // Compile the regexp to match each delimiter.
      var reDelimiters = RegExp(
        (options.escape || reNoMatch).source + '|' +
        interpolate.source + '|' +
        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +
        (options.evaluate || reNoMatch).source + '|$'
      , 'g');

      // Use a sourceURL for easier debugging.
      var sourceURL = '//# sourceURL=' +
        ('sourceURL' in options
          ? options.sourceURL
          : ('lodash.templateSources[' + (++templateCounter) + ']')
        ) + '\n';

      string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
        interpolateValue || (interpolateValue = esTemplateValue);

        // Escape characters that can't be included in string literals.
        source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);

        // Replace delimiters with snippets.
        if (escapeValue) {
          isEscaping = true;
          source += "' +\n__e(" + escapeValue + ") +\n'";
        }
        if (evaluateValue) {
          isEvaluating = true;
          source += "';\n" + evaluateValue + ";\n__p += '";
        }
        if (interpolateValue) {
          source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
        }
        index = offset + match.length;

        // The JS engine embedded in Adobe products requires returning the `match`
        // string in order to produce the correct `offset` value.
        return match;
      });

      source += "';\n";

      // If `variable` is not specified wrap a with-statement around the generated
      // code to add the data object to the top of the scope chain.
      var variable = options.variable;
      if (!variable) {
        source = 'with (obj) {\n' + source + '\n}\n';
      }
      // Cleanup code by stripping empty strings.
      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
        .replace(reEmptyStringMiddle, '$1')
        .replace(reEmptyStringTrailing, '$1;');

      // Frame code as the function body.
      source = 'function(' + (variable || 'obj') + ') {\n' +
        (variable
          ? ''
          : 'obj || (obj = {});\n'
        ) +
        "var __t, __p = ''" +
        (isEscaping
           ? ', __e = _.escape'
           : ''
        ) +
        (isEvaluating
          ? ', __j = Array.prototype.join;\n' +
            "function print() { __p += __j.call(arguments, '') }\n"
          : ';\n'
        ) +
        source +
        'return __p\n}';

      var result = attempt(function() {
        return Function(importsKeys, sourceURL + 'return ' + source).apply(undefined, importsValues);
      });

      // Provide the compiled function's source by its `toString` method or
      // the `source` property as a convenience for inlining compiled templates.
      result.source = source;
      if (isError(result)) {
        throw result;
      }
      return result;
    }

    /**
     * Removes leading and trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trim('  abc  ');
     * // => 'abc'
     *
     * _.trim('-_-abc-_-', '_-');
     * // => 'abc'
     *
     * _.map(['  foo  ', '  bar  '], _.trim);
     * // => ['foo', 'bar']
     */
    function trim(string, chars, guard) {
      var value = string;
      string = baseToString(string);
      if (!string) {
        return string;
      }
      if (guard ? isIterateeCall(value, chars, guard) : chars == null) {
        return string.slice(trimmedLeftIndex(string), trimmedRightIndex(string) + 1);
      }
      chars = (chars + '');
      return string.slice(charsLeftIndex(string, chars), charsRightIndex(string, chars) + 1);
    }

    /**
     * Removes leading whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimLeft('  abc  ');
     * // => 'abc  '
     *
     * _.trimLeft('-_-abc-_-', '_-');
     * // => 'abc-_-'
     */
    function trimLeft(string, chars, guard) {
      var value = string;
      string = baseToString(string);
      if (!string) {
        return string;
      }
      if (guard ? isIterateeCall(value, chars, guard) : chars == null) {
        return string.slice(trimmedLeftIndex(string));
      }
      return string.slice(charsLeftIndex(string, (chars + '')));
    }

    /**
     * Removes trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimRight('  abc  ');
     * // => '  abc'
     *
     * _.trimRight('-_-abc-_-', '_-');
     * // => '-_-abc'
     */
    function trimRight(string, chars, guard) {
      var value = string;
      string = baseToString(string);
      if (!string) {
        return string;
      }
      if (guard ? isIterateeCall(value, chars, guard) : chars == null) {
        return string.slice(0, trimmedRightIndex(string) + 1);
      }
      return string.slice(0, charsRightIndex(string, (chars + '')) + 1);
    }

    /**
     * Truncates `string` if it's longer than the given maximum string length.
     * The last characters of the truncated string are replaced with the omission
     * string which defaults to "...".
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to truncate.
     * @param {Object|number} [options] The options object or maximum string length.
     * @param {number} [options.length=30] The maximum string length.
     * @param {string} [options.omission='...'] The string to indicate text is omitted.
     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {string} Returns the truncated string.
     * @example
     *
     * _.trunc('hi-diddly-ho there, neighborino');
     * // => 'hi-diddly-ho there, neighbo...'
     *
     * _.trunc('hi-diddly-ho there, neighborino', 24);
     * // => 'hi-diddly-ho there, n...'
     *
     * _.trunc('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': ' '
     * });
     * // => 'hi-diddly-ho there,...'
     *
     * _.trunc('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': /,? +/
     * });
     * // => 'hi-diddly-ho there...'
     *
     * _.trunc('hi-diddly-ho there, neighborino', {
     *   'omission': ' [...]'
     * });
     * // => 'hi-diddly-ho there, neig [...]'
     */
    function trunc(string, options, guard) {
      if (guard && isIterateeCall(string, options, guard)) {
        options = undefined;
      }
      var length = DEFAULT_TRUNC_LENGTH,
          omission = DEFAULT_TRUNC_OMISSION;

      if (options != null) {
        if (isObject(options)) {
          var separator = 'separator' in options ? options.separator : separator;
          length = 'length' in options ? (+options.length || 0) : length;
          omission = 'omission' in options ? baseToString(options.omission) : omission;
        } else {
          length = +options || 0;
        }
      }
      string = baseToString(string);
      if (length >= string.length) {
        return string;
      }
      var end = length - omission.length;
      if (end < 1) {
        return omission;
      }
      var result = string.slice(0, end);
      if (separator == null) {
        return result + omission;
      }
      if (isRegExp(separator)) {
        if (string.slice(end).search(separator)) {
          var match,
              newEnd,
              substring = string.slice(0, end);

          if (!separator.global) {
            separator = RegExp(separator.source, (reFlags.exec(separator) || '') + 'g');
          }
          separator.lastIndex = 0;
          while ((match = separator.exec(substring))) {
            newEnd = match.index;
          }
          result = result.slice(0, newEnd == null ? end : newEnd);
        }
      } else if (string.indexOf(separator, end) != end) {
        var index = result.lastIndexOf(separator);
        if (index > -1) {
          result = result.slice(0, index);
        }
      }
      return result + omission;
    }

    /**
     * The inverse of `_.escape`; this method converts the HTML entities
     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, `&#39;`, and `&#96;` in `string` to their
     * corresponding characters.
     *
     * **Note:** No other HTML entities are unescaped. To unescape additional HTML
     * entities use a third-party library like [_he_](https://mths.be/he).
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to unescape.
     * @returns {string} Returns the unescaped string.
     * @example
     *
     * _.unescape('fred, barney, &amp; pebbles');
     * // => 'fred, barney, & pebbles'
     */
    function unescape(string) {
      string = baseToString(string);
      return (string && reHasEscapedHtml.test(string))
        ? string.replace(reEscapedHtml, unescapeHtmlChar)
        : string;
    }

    /**
     * Splits `string` into an array of its words.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {RegExp|string} [pattern] The pattern to match words.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Array} Returns the words of `string`.
     * @example
     *
     * _.words('fred, barney, & pebbles');
     * // => ['fred', 'barney', 'pebbles']
     *
     * _.words('fred, barney, & pebbles', /[^, ]+/g);
     * // => ['fred', 'barney', '&', 'pebbles']
     */
    function words(string, pattern, guard) {
      if (guard && isIterateeCall(string, pattern, guard)) {
        pattern = undefined;
      }
      string = baseToString(string);
      return string.match(pattern || reWords) || [];
    }

    /*------------------------------------------------------------------------*/

    /**
     * Attempts to invoke `func`, returning either the result or the caught error
     * object. Any additional arguments are provided to `func` when it is invoked.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {Function} func The function to attempt.
     * @returns {*} Returns the `func` result or error object.
     * @example
     *
     * // avoid throwing errors for invalid selectors
     * var elements = _.attempt(function(selector) {
     *   return document.querySelectorAll(selector);
     * }, '>_>');
     *
     * if (_.isError(elements)) {
     *   elements = [];
     * }
     */
    var attempt = restParam(function(func, args) {
      try {
        return func.apply(undefined, args);
      } catch(e) {
        return isError(e) ? e : new Error(e);
      }
    });

    /**
     * Creates a function that invokes `func` with the `this` binding of `thisArg`
     * and arguments of the created function. If `func` is a property name the
     * created callback returns the property value for a given element. If `func`
     * is an object the created callback returns `true` for elements that contain
     * the equivalent object properties, otherwise it returns `false`.
     *
     * @static
     * @memberOf _
     * @alias iteratee
     * @category Utility
     * @param {*} [func=_.identity] The value to convert to a callback.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Function} Returns the callback.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * // wrap to create custom callback shorthands
     * _.callback = _.wrap(_.callback, function(callback, func, thisArg) {
     *   var match = /^(.+?)__([gl]t)(.+)$/.exec(func);
     *   if (!match) {
     *     return callback(func, thisArg);
     *   }
     *   return function(object) {
     *     return match[2] == 'gt'
     *       ? object[match[1]] > match[3]
     *       : object[match[1]] < match[3];
     *   };
     * });
     *
     * _.filter(users, 'age__gt36');
     * // => [{ 'user': 'fred', 'age': 40 }]
     */
    function callback(func, thisArg, guard) {
      if (guard && isIterateeCall(func, thisArg, guard)) {
        thisArg = undefined;
      }
      return isObjectLike(func)
        ? matches(func)
        : baseCallback(func, thisArg);
    }

    /**
     * Creates a function that returns `value`.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {*} value The value to return from the new function.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var object = { 'user': 'fred' };
     * var getter = _.constant(object);
     *
     * getter() === object;
     * // => true
     */
    function constant(value) {
      return function() {
        return value;
      };
    }

    /**
     * This method returns the first argument provided to it.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {*} value Any value.
     * @returns {*} Returns `value`.
     * @example
     *
     * var object = { 'user': 'fred' };
     *
     * _.identity(object) === object;
     * // => true
     */
    function identity(value) {
      return value;
    }

    /**
     * Creates a function that performs a deep comparison between a given object
     * and `source`, returning `true` if the given object has equivalent property
     * values, else `false`.
     *
     * **Note:** This method supports comparing arrays, booleans, `Date` objects,
     * numbers, `Object` objects, regexes, and strings. Objects are compared by
     * their own, not inherited, enumerable properties. For comparing a single
     * own or inherited property value see `_.matchesProperty`.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * _.filter(users, _.matches({ 'age': 40, 'active': false }));
     * // => [{ 'user': 'fred', 'age': 40, 'active': false }]
     */
    function matches(source) {
      return baseMatches(baseClone(source, true));
    }

    /**
     * Creates a function that compares the property value of `path` on a given
     * object to `value`.
     *
     * **Note:** This method supports comparing arrays, booleans, `Date` objects,
     * numbers, `Object` objects, regexes, and strings. Objects are compared by
     * their own, not inherited, enumerable properties.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {Array|string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var users = [
     *   { 'user': 'barney' },
     *   { 'user': 'fred' }
     * ];
     *
     * _.find(users, _.matchesProperty('user', 'fred'));
     * // => { 'user': 'fred' }
     */
    function matchesProperty(path, srcValue) {
      return baseMatchesProperty(path, baseClone(srcValue, true));
    }

    /**
     * Creates a function that invokes the method at `path` on a given object.
     * Any additional arguments are provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': { 'c': _.constant(2) } } },
     *   { 'a': { 'b': { 'c': _.constant(1) } } }
     * ];
     *
     * _.map(objects, _.method('a.b.c'));
     * // => [2, 1]
     *
     * _.invoke(_.sortBy(objects, _.method(['a', 'b', 'c'])), 'a.b.c');
     * // => [1, 2]
     */
    var method = restParam(function(path, args) {
      return function(object) {
        return invokePath(object, path, args);
      };
    });

    /**
     * The opposite of `_.method`; this method creates a function that invokes
     * the method at a given path on `object`. Any additional arguments are
     * provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {Object} object The object to query.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var array = _.times(3, _.constant),
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.methodOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
     * // => [2, 0]
     */
    var methodOf = restParam(function(object, args) {
      return function(path) {
        return invokePath(object, path, args);
      };
    });

    /**
     * Adds all own enumerable function properties of a source object to the
     * destination object. If `object` is a function then methods are added to
     * its prototype as well.
     *
     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
     * avoid conflicts caused by modifying the original.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {Function|Object} [object=lodash] The destination object.
     * @param {Object} source The object of functions to add.
     * @param {Object} [options] The options object.
     * @param {boolean} [options.chain=true] Specify whether the functions added
     *  are chainable.
     * @returns {Function|Object} Returns `object`.
     * @example
     *
     * function vowels(string) {
     *   return _.filter(string, function(v) {
     *     return /[aeiou]/i.test(v);
     *   });
     * }
     *
     * _.mixin({ 'vowels': vowels });
     * _.vowels('fred');
     * // => ['e']
     *
     * _('fred').vowels().value();
     * // => ['e']
     *
     * _.mixin({ 'vowels': vowels }, { 'chain': false });
     * _('fred').vowels();
     * // => ['e']
     */
    function mixin(object, source, options) {
      if (options == null) {
        var isObj = isObject(source),
            props = isObj ? keys(source) : undefined,
            methodNames = (props && props.length) ? baseFunctions(source, props) : undefined;

        if (!(methodNames ? methodNames.length : isObj)) {
          methodNames = false;
          options = source;
          source = object;
          object = this;
        }
      }
      if (!methodNames) {
        methodNames = baseFunctions(source, keys(source));
      }
      var chain = true,
          index = -1,
          isFunc = isFunction(object),
          length = methodNames.length;

      if (options === false) {
        chain = false;
      } else if (isObject(options) && 'chain' in options) {
        chain = options.chain;
      }
      while (++index < length) {
        var methodName = methodNames[index],
            func = source[methodName];

        object[methodName] = func;
        if (isFunc) {
          object.prototype[methodName] = (function(func) {
            return function() {
              var chainAll = this.__chain__;
              if (chain || chainAll) {
                var result = object(this.__wrapped__),
                    actions = result.__actions__ = arrayCopy(this.__actions__);

                actions.push({ 'func': func, 'args': arguments, 'thisArg': object });
                result.__chain__ = chainAll;
                return result;
              }
              return func.apply(object, arrayPush([this.value()], arguments));
            };
          }(func));
        }
      }
      return object;
    }

    /**
     * Reverts the `_` variable to its previous value and returns a reference to
     * the `lodash` function.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @returns {Function} Returns the `lodash` function.
     * @example
     *
     * var lodash = _.noConflict();
     */
    function noConflict() {
      root._ = oldDash;
      return this;
    }

    /**
     * A no-operation function that returns `undefined` regardless of the
     * arguments it receives.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @example
     *
     * var object = { 'user': 'fred' };
     *
     * _.noop(object) === undefined;
     * // => true
     */
    function noop() {
      // No operation performed.
    }

    /**
     * Creates a function that returns the property value at `path` on a
     * given object.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': { 'c': 2 } } },
     *   { 'a': { 'b': { 'c': 1 } } }
     * ];
     *
     * _.map(objects, _.property('a.b.c'));
     * // => [2, 1]
     *
     * _.pluck(_.sortBy(objects, _.property(['a', 'b', 'c'])), 'a.b.c');
     * // => [1, 2]
     */
    function property(path) {
      return isKey(path) ? baseProperty(path) : basePropertyDeep(path);
    }

    /**
     * The opposite of `_.property`; this method creates a function that returns
     * the property value at a given path on `object`.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {Object} object The object to query.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var array = [0, 1, 2],
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
     * // => [2, 0]
     */
    function propertyOf(object) {
      return function(path) {
        return baseGet(object, toPath(path), path + '');
      };
    }

    /**
     * Creates an array of numbers (positive and/or negative) progressing from
     * `start` up to, but not including, `end`. If `end` is not specified it is
     * set to `start` with `start` then set to `0`. If `end` is less than `start`
     * a zero-length range is created unless a negative `step` is specified.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the new array of numbers.
     * @example
     *
     * _.range(4);
     * // => [0, 1, 2, 3]
     *
     * _.range(1, 5);
     * // => [1, 2, 3, 4]
     *
     * _.range(0, 20, 5);
     * // => [0, 5, 10, 15]
     *
     * _.range(0, -4, -1);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.range(0);
     * // => []
     */
    function range(start, end, step) {
      if (step && isIterateeCall(start, end, step)) {
        end = step = undefined;
      }
      start = +start || 0;
      step = step == null ? 1 : (+step || 0);

      if (end == null) {
        end = start;
        start = 0;
      } else {
        end = +end || 0;
      }
      // Use `Array(length)` so engines like Chakra and V8 avoid slower modes.
      // See https://youtu.be/XAqIpGU8ZZk#t=17m25s for more details.
      var index = -1,
          length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
          result = Array(length);

      while (++index < length) {
        result[index] = start;
        start += step;
      }
      return result;
    }

    /**
     * Invokes the iteratee function `n` times, returning an array of the results
     * of each invocation. The `iteratee` is bound to `thisArg` and invoked with
     * one argument; (index).
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {number} n The number of times to invoke `iteratee`.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * var diceRolls = _.times(3, _.partial(_.random, 1, 6, false));
     * // => [3, 6, 4]
     *
     * _.times(3, function(n) {
     *   mage.castSpell(n);
     * });
     * // => invokes `mage.castSpell(n)` three times with `n` of `0`, `1`, and `2`
     *
     * _.times(3, function(n) {
     *   this.cast(n);
     * }, mage);
     * // => also invokes `mage.castSpell(n)` three times
     */
    function times(n, iteratee, thisArg) {
      n = nativeFloor(n);

      // Exit early to avoid a JSC JIT bug in Safari 8
      // where `Array(0)` is treated as `Array(1)`.
      if (n < 1 || !nativeIsFinite(n)) {
        return [];
      }
      var index = -1,
          result = Array(nativeMin(n, MAX_ARRAY_LENGTH));

      iteratee = bindCallback(iteratee, thisArg, 1);
      while (++index < n) {
        if (index < MAX_ARRAY_LENGTH) {
          result[index] = iteratee(index);
        } else {
          iteratee(index);
        }
      }
      return result;
    }

    /**
     * Generates a unique ID. If `prefix` is provided the ID is appended to it.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {string} [prefix] The value to prefix the ID with.
     * @returns {string} Returns the unique ID.
     * @example
     *
     * _.uniqueId('contact_');
     * // => 'contact_104'
     *
     * _.uniqueId();
     * // => '105'
     */
    function uniqueId(prefix) {
      var id = ++idCounter;
      return baseToString(prefix) + id;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Adds two numbers.
     *
     * @static
     * @memberOf _
     * @category Math
     * @param {number} augend The first number to add.
     * @param {number} addend The second number to add.
     * @returns {number} Returns the sum.
     * @example
     *
     * _.add(6, 4);
     * // => 10
     */
    function add(augend, addend) {
      return (+augend || 0) + (+addend || 0);
    }

    /**
     * Calculates `n` rounded up to `precision`.
     *
     * @static
     * @memberOf _
     * @category Math
     * @param {number} n The number to round up.
     * @param {number} [precision=0] The precision to round up to.
     * @returns {number} Returns the rounded up number.
     * @example
     *
     * _.ceil(4.006);
     * // => 5
     *
     * _.ceil(6.004, 2);
     * // => 6.01
     *
     * _.ceil(6040, -2);
     * // => 6100
     */
    var ceil = createRound('ceil');

    /**
     * Calculates `n` rounded down to `precision`.
     *
     * @static
     * @memberOf _
     * @category Math
     * @param {number} n The number to round down.
     * @param {number} [precision=0] The precision to round down to.
     * @returns {number} Returns the rounded down number.
     * @example
     *
     * _.floor(4.006);
     * // => 4
     *
     * _.floor(0.046, 2);
     * // => 0.04
     *
     * _.floor(4060, -2);
     * // => 4000
     */
    var floor = createRound('floor');

    /**
     * Gets the maximum value of `collection`. If `collection` is empty or falsey
     * `-Infinity` is returned. If an iteratee function is provided it is invoked
     * for each value in `collection` to generate the criterion by which the value
     * is ranked. The `iteratee` is bound to `thisArg` and invoked with three
     * arguments: (value, index, collection).
     *
     * If a property name is provided for `iteratee` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `iteratee` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Math
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [iteratee] The function invoked per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * _.max([4, 2, 8, 6]);
     * // => 8
     *
     * _.max([]);
     * // => -Infinity
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * _.max(users, function(chr) {
     *   return chr.age;
     * });
     * // => { 'user': 'fred', 'age': 40 }
     *
     * // using the `_.property` callback shorthand
     * _.max(users, 'age');
     * // => { 'user': 'fred', 'age': 40 }
     */
    var max = createExtremum(gt, NEGATIVE_INFINITY);

    /**
     * Gets the minimum value of `collection`. If `collection` is empty or falsey
     * `Infinity` is returned. If an iteratee function is provided it is invoked
     * for each value in `collection` to generate the criterion by which the value
     * is ranked. The `iteratee` is bound to `thisArg` and invoked with three
     * arguments: (value, index, collection).
     *
     * If a property name is provided for `iteratee` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `iteratee` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Math
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [iteratee] The function invoked per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * _.min([4, 2, 8, 6]);
     * // => 2
     *
     * _.min([]);
     * // => Infinity
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * _.min(users, function(chr) {
     *   return chr.age;
     * });
     * // => { 'user': 'barney', 'age': 36 }
     *
     * // using the `_.property` callback shorthand
     * _.min(users, 'age');
     * // => { 'user': 'barney', 'age': 36 }
     */
    var min = createExtremum(lt, POSITIVE_INFINITY);

    /**
     * Calculates `n` rounded to `precision`.
     *
     * @static
     * @memberOf _
     * @category Math
     * @param {number} n The number to round.
     * @param {number} [precision=0] The precision to round to.
     * @returns {number} Returns the rounded number.
     * @example
     *
     * _.round(4.006);
     * // => 4
     *
     * _.round(4.006, 2);
     * // => 4.01
     *
     * _.round(4060, -2);
     * // => 4100
     */
    var round = createRound('round');

    /**
     * Gets the sum of the values in `collection`.
     *
     * @static
     * @memberOf _
     * @category Math
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [iteratee] The function invoked per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {number} Returns the sum.
     * @example
     *
     * _.sum([4, 6]);
     * // => 10
     *
     * _.sum({ 'a': 4, 'b': 6 });
     * // => 10
     *
     * var objects = [
     *   { 'n': 4 },
     *   { 'n': 6 }
     * ];
     *
     * _.sum(objects, function(object) {
     *   return object.n;
     * });
     * // => 10
     *
     * // using the `_.property` callback shorthand
     * _.sum(objects, 'n');
     * // => 10
     */
    function sum(collection, iteratee, thisArg) {
      if (thisArg && isIterateeCall(collection, iteratee, thisArg)) {
        iteratee = undefined;
      }
      iteratee = getCallback(iteratee, thisArg, 3);
      return iteratee.length == 1
        ? arraySum(isArray(collection) ? collection : toIterable(collection), iteratee)
        : baseSum(collection, iteratee);
    }

    /*------------------------------------------------------------------------*/

    // Ensure wrappers are instances of `baseLodash`.
    lodash.prototype = baseLodash.prototype;

    LodashWrapper.prototype = baseCreate(baseLodash.prototype);
    LodashWrapper.prototype.constructor = LodashWrapper;

    LazyWrapper.prototype = baseCreate(baseLodash.prototype);
    LazyWrapper.prototype.constructor = LazyWrapper;

    // Add functions to the `Map` cache.
    MapCache.prototype['delete'] = mapDelete;
    MapCache.prototype.get = mapGet;
    MapCache.prototype.has = mapHas;
    MapCache.prototype.set = mapSet;

    // Add functions to the `Set` cache.
    SetCache.prototype.push = cachePush;

    // Assign cache to `_.memoize`.
    memoize.Cache = MapCache;

    // Add functions that return wrapped values when chaining.
    lodash.after = after;
    lodash.ary = ary;
    lodash.assign = assign;
    lodash.at = at;
    lodash.before = before;
    lodash.bind = bind;
    lodash.bindAll = bindAll;
    lodash.bindKey = bindKey;
    lodash.callback = callback;
    lodash.chain = chain;
    lodash.chunk = chunk;
    lodash.compact = compact;
    lodash.constant = constant;
    lodash.countBy = countBy;
    lodash.create = create;
    lodash.curry = curry;
    lodash.curryRight = curryRight;
    lodash.debounce = debounce;
    lodash.defaults = defaults;
    lodash.defaultsDeep = defaultsDeep;
    lodash.defer = defer;
    lodash.delay = delay;
    lodash.difference = difference;
    lodash.drop = drop;
    lodash.dropRight = dropRight;
    lodash.dropRightWhile = dropRightWhile;
    lodash.dropWhile = dropWhile;
    lodash.fill = fill;
    lodash.filter = filter;
    lodash.flatten = flatten;
    lodash.flattenDeep = flattenDeep;
    lodash.flow = flow;
    lodash.flowRight = flowRight;
    lodash.forEach = forEach;
    lodash.forEachRight = forEachRight;
    lodash.forIn = forIn;
    lodash.forInRight = forInRight;
    lodash.forOwn = forOwn;
    lodash.forOwnRight = forOwnRight;
    lodash.functions = functions;
    lodash.groupBy = groupBy;
    lodash.indexBy = indexBy;
    lodash.initial = initial;
    lodash.intersection = intersection;
    lodash.invert = invert;
    lodash.invoke = invoke;
    lodash.keys = keys;
    lodash.keysIn = keysIn;
    lodash.map = map;
    lodash.mapKeys = mapKeys;
    lodash.mapValues = mapValues;
    lodash.matches = matches;
    lodash.matchesProperty = matchesProperty;
    lodash.memoize = memoize;
    lodash.merge = merge;
    lodash.method = method;
    lodash.methodOf = methodOf;
    lodash.mixin = mixin;
    lodash.modArgs = modArgs;
    lodash.negate = negate;
    lodash.omit = omit;
    lodash.once = once;
    lodash.pairs = pairs;
    lodash.partial = partial;
    lodash.partialRight = partialRight;
    lodash.partition = partition;
    lodash.pick = pick;
    lodash.pluck = pluck;
    lodash.property = property;
    lodash.propertyOf = propertyOf;
    lodash.pull = pull;
    lodash.pullAt = pullAt;
    lodash.range = range;
    lodash.rearg = rearg;
    lodash.reject = reject;
    lodash.remove = remove;
    lodash.rest = rest;
    lodash.restParam = restParam;
    lodash.set = set;
    lodash.shuffle = shuffle;
    lodash.slice = slice;
    lodash.sortBy = sortBy;
    lodash.sortByAll = sortByAll;
    lodash.sortByOrder = sortByOrder;
    lodash.spread = spread;
    lodash.take = take;
    lodash.takeRight = takeRight;
    lodash.takeRightWhile = takeRightWhile;
    lodash.takeWhile = takeWhile;
    lodash.tap = tap;
    lodash.throttle = throttle;
    lodash.thru = thru;
    lodash.times = times;
    lodash.toArray = toArray;
    lodash.toPlainObject = toPlainObject;
    lodash.transform = transform;
    lodash.union = union;
    lodash.uniq = uniq;
    lodash.unzip = unzip;
    lodash.unzipWith = unzipWith;
    lodash.values = values;
    lodash.valuesIn = valuesIn;
    lodash.where = where;
    lodash.without = without;
    lodash.wrap = wrap;
    lodash.xor = xor;
    lodash.zip = zip;
    lodash.zipObject = zipObject;
    lodash.zipWith = zipWith;

    // Add aliases.
    lodash.backflow = flowRight;
    lodash.collect = map;
    lodash.compose = flowRight;
    lodash.each = forEach;
    lodash.eachRight = forEachRight;
    lodash.extend = assign;
    lodash.iteratee = callback;
    lodash.methods = functions;
    lodash.object = zipObject;
    lodash.select = filter;
    lodash.tail = rest;
    lodash.unique = uniq;

    // Add functions to `lodash.prototype`.
    mixin(lodash, lodash);

    /*------------------------------------------------------------------------*/

    // Add functions that return unwrapped values when chaining.
    lodash.add = add;
    lodash.attempt = attempt;
    lodash.camelCase = camelCase;
    lodash.capitalize = capitalize;
    lodash.ceil = ceil;
    lodash.clone = clone;
    lodash.cloneDeep = cloneDeep;
    lodash.deburr = deburr;
    lodash.endsWith = endsWith;
    lodash.escape = escape;
    lodash.escapeRegExp = escapeRegExp;
    lodash.every = every;
    lodash.find = find;
    lodash.findIndex = findIndex;
    lodash.findKey = findKey;
    lodash.findLast = findLast;
    lodash.findLastIndex = findLastIndex;
    lodash.findLastKey = findLastKey;
    lodash.findWhere = findWhere;
    lodash.first = first;
    lodash.floor = floor;
    lodash.get = get;
    lodash.gt = gt;
    lodash.gte = gte;
    lodash.has = has;
    lodash.identity = identity;
    lodash.includes = includes;
    lodash.indexOf = indexOf;
    lodash.inRange = inRange;
    lodash.isArguments = isArguments;
    lodash.isArray = isArray;
    lodash.isBoolean = isBoolean;
    lodash.isDate = isDate;
    lodash.isElement = isElement;
    lodash.isEmpty = isEmpty;
    lodash.isEqual = isEqual;
    lodash.isError = isError;
    lodash.isFinite = isFinite;
    lodash.isFunction = isFunction;
    lodash.isMatch = isMatch;
    lodash.isNaN = isNaN;
    lodash.isNative = isNative;
    lodash.isNull = isNull;
    lodash.isNumber = isNumber;
    lodash.isObject = isObject;
    lodash.isPlainObject = isPlainObject;
    lodash.isRegExp = isRegExp;
    lodash.isString = isString;
    lodash.isTypedArray = isTypedArray;
    lodash.isUndefined = isUndefined;
    lodash.kebabCase = kebabCase;
    lodash.last = last;
    lodash.lastIndexOf = lastIndexOf;
    lodash.lt = lt;
    lodash.lte = lte;
    lodash.max = max;
    lodash.min = min;
    lodash.noConflict = noConflict;
    lodash.noop = noop;
    lodash.now = now;
    lodash.pad = pad;
    lodash.padLeft = padLeft;
    lodash.padRight = padRight;
    lodash.parseInt = parseInt;
    lodash.random = random;
    lodash.reduce = reduce;
    lodash.reduceRight = reduceRight;
    lodash.repeat = repeat;
    lodash.result = result;
    lodash.round = round;
    lodash.runInContext = runInContext;
    lodash.size = size;
    lodash.snakeCase = snakeCase;
    lodash.some = some;
    lodash.sortedIndex = sortedIndex;
    lodash.sortedLastIndex = sortedLastIndex;
    lodash.startCase = startCase;
    lodash.startsWith = startsWith;
    lodash.sum = sum;
    lodash.template = template;
    lodash.trim = trim;
    lodash.trimLeft = trimLeft;
    lodash.trimRight = trimRight;
    lodash.trunc = trunc;
    lodash.unescape = unescape;
    lodash.uniqueId = uniqueId;
    lodash.words = words;

    // Add aliases.
    lodash.all = every;
    lodash.any = some;
    lodash.contains = includes;
    lodash.eq = isEqual;
    lodash.detect = find;
    lodash.foldl = reduce;
    lodash.foldr = reduceRight;
    lodash.head = first;
    lodash.include = includes;
    lodash.inject = reduce;

    mixin(lodash, (function() {
      var source = {};
      baseForOwn(lodash, function(func, methodName) {
        if (!lodash.prototype[methodName]) {
          source[methodName] = func;
        }
      });
      return source;
    }()), false);

    /*------------------------------------------------------------------------*/

    // Add functions capable of returning wrapped and unwrapped values when chaining.
    lodash.sample = sample;

    lodash.prototype.sample = function(n) {
      if (!this.__chain__ && n == null) {
        return sample(this.value());
      }
      return this.thru(function(value) {
        return sample(value, n);
      });
    };

    /*------------------------------------------------------------------------*/

    /**
     * The semantic version number.
     *
     * @static
     * @memberOf _
     * @type string
     */
    lodash.VERSION = VERSION;

    // Assign default placeholders.
    arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {
      lodash[methodName].placeholder = lodash;
    });

    // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
    arrayEach(['drop', 'take'], function(methodName, index) {
      LazyWrapper.prototype[methodName] = function(n) {
        var filtered = this.__filtered__;
        if (filtered && !index) {
          return new LazyWrapper(this);
        }
        n = n == null ? 1 : nativeMax(nativeFloor(n) || 0, 0);

        var result = this.clone();
        if (filtered) {
          result.__takeCount__ = nativeMin(result.__takeCount__, n);
        } else {
          result.__views__.push({ 'size': n, 'type': methodName + (result.__dir__ < 0 ? 'Right' : '') });
        }
        return result;
      };

      LazyWrapper.prototype[methodName + 'Right'] = function(n) {
        return this.reverse()[methodName](n).reverse();
      };
    });

    // Add `LazyWrapper` methods that accept an `iteratee` value.
    arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {
      var type = index + 1,
          isFilter = type != LAZY_MAP_FLAG;

      LazyWrapper.prototype[methodName] = function(iteratee, thisArg) {
        var result = this.clone();
        result.__iteratees__.push({ 'iteratee': getCallback(iteratee, thisArg, 1), 'type': type });
        result.__filtered__ = result.__filtered__ || isFilter;
        return result;
      };
    });

    // Add `LazyWrapper` methods for `_.first` and `_.last`.
    arrayEach(['first', 'last'], function(methodName, index) {
      var takeName = 'take' + (index ? 'Right' : '');

      LazyWrapper.prototype[methodName] = function() {
        return this[takeName](1).value()[0];
      };
    });

    // Add `LazyWrapper` methods for `_.initial` and `_.rest`.
    arrayEach(['initial', 'rest'], function(methodName, index) {
      var dropName = 'drop' + (index ? '' : 'Right');

      LazyWrapper.prototype[methodName] = function() {
        return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
      };
    });

    // Add `LazyWrapper` methods for `_.pluck` and `_.where`.
    arrayEach(['pluck', 'where'], function(methodName, index) {
      var operationName = index ? 'filter' : 'map',
          createCallback = index ? baseMatches : property;

      LazyWrapper.prototype[methodName] = function(value) {
        return this[operationName](createCallback(value));
      };
    });

    LazyWrapper.prototype.compact = function() {
      return this.filter(identity);
    };

    LazyWrapper.prototype.reject = function(predicate, thisArg) {
      predicate = getCallback(predicate, thisArg, 1);
      return this.filter(function(value) {
        return !predicate(value);
      });
    };

    LazyWrapper.prototype.slice = function(start, end) {
      start = start == null ? 0 : (+start || 0);

      var result = this;
      if (result.__filtered__ && (start > 0 || end < 0)) {
        return new LazyWrapper(result);
      }
      if (start < 0) {
        result = result.takeRight(-start);
      } else if (start) {
        result = result.drop(start);
      }
      if (end !== undefined) {
        end = (+end || 0);
        result = end < 0 ? result.dropRight(-end) : result.take(end - start);
      }
      return result;
    };

    LazyWrapper.prototype.takeRightWhile = function(predicate, thisArg) {
      return this.reverse().takeWhile(predicate, thisArg).reverse();
    };

    LazyWrapper.prototype.toArray = function() {
      return this.take(POSITIVE_INFINITY);
    };

    // Add `LazyWrapper` methods to `lodash.prototype`.
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
      var checkIteratee = /^(?:filter|map|reject)|While$/.test(methodName),
          retUnwrapped = /^(?:first|last)$/.test(methodName),
          lodashFunc = lodash[retUnwrapped ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName];

      if (!lodashFunc) {
        return;
      }
      lodash.prototype[methodName] = function() {
        var args = retUnwrapped ? [1] : arguments,
            chainAll = this.__chain__,
            value = this.__wrapped__,
            isHybrid = !!this.__actions__.length,
            isLazy = value instanceof LazyWrapper,
            iteratee = args[0],
            useLazy = isLazy || isArray(value);

        if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
          // Avoid lazy use if the iteratee has a "length" value other than `1`.
          isLazy = useLazy = false;
        }
        var interceptor = function(value) {
          return (retUnwrapped && chainAll)
            ? lodashFunc(value, 1)[0]
            : lodashFunc.apply(undefined, arrayPush([value], args));
        };

        var action = { 'func': thru, 'args': [interceptor], 'thisArg': undefined },
            onlyLazy = isLazy && !isHybrid;

        if (retUnwrapped && !chainAll) {
          if (onlyLazy) {
            value = value.clone();
            value.__actions__.push(action);
            return func.call(value);
          }
          return lodashFunc.call(undefined, this.value())[0];
        }
        if (!retUnwrapped && useLazy) {
          value = onlyLazy ? value : new LazyWrapper(this);
          var result = func.apply(value, args);
          result.__actions__.push(action);
          return new LodashWrapper(result, chainAll);
        }
        return this.thru(interceptor);
      };
    });

    // Add `Array` and `String` methods to `lodash.prototype`.
    arrayEach(['join', 'pop', 'push', 'replace', 'shift', 'sort', 'splice', 'split', 'unshift'], function(methodName) {
      var func = (/^(?:replace|split)$/.test(methodName) ? stringProto : arrayProto)[methodName],
          chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
          retUnwrapped = /^(?:join|pop|replace|shift)$/.test(methodName);

      lodash.prototype[methodName] = function() {
        var args = arguments;
        if (retUnwrapped && !this.__chain__) {
          return func.apply(this.value(), args);
        }
        return this[chainName](function(value) {
          return func.apply(value, args);
        });
      };
    });

    // Map minified function names to their real names.
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
      var lodashFunc = lodash[methodName];
      if (lodashFunc) {
        var key = lodashFunc.name,
            names = realNames[key] || (realNames[key] = []);

        names.push({ 'name': methodName, 'func': lodashFunc });
      }
    });

    realNames[createHybridWrapper(undefined, BIND_KEY_FLAG).name] = [{ 'name': 'wrapper', 'func': undefined }];

    // Add functions to the lazy wrapper.
    LazyWrapper.prototype.clone = lazyClone;
    LazyWrapper.prototype.reverse = lazyReverse;
    LazyWrapper.prototype.value = lazyValue;

    // Add chaining functions to the `lodash` wrapper.
    lodash.prototype.chain = wrapperChain;
    lodash.prototype.commit = wrapperCommit;
    lodash.prototype.concat = wrapperConcat;
    lodash.prototype.plant = wrapperPlant;
    lodash.prototype.reverse = wrapperReverse;
    lodash.prototype.toString = wrapperToString;
    lodash.prototype.run = lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;

    // Add function aliases to the `lodash` wrapper.
    lodash.prototype.collect = lodash.prototype.map;
    lodash.prototype.head = lodash.prototype.first;
    lodash.prototype.select = lodash.prototype.filter;
    lodash.prototype.tail = lodash.prototype.rest;

    return lodash;
  }

  /*--------------------------------------------------------------------------*/

  // Export lodash.
  var _ = runInContext();

  // Some AMD build optimizers like r.js check for condition patterns like the following:
  if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {
    // Expose lodash to the global object when an AMD loader is present to avoid
    // errors in cases where lodash is loaded by a script tag and not intended
    // as an AMD module. See http://requirejs.org/docs/errors.html#mismatch for
    // more details.
    root._ = _;

    // Define as an anonymous module so, through path mapping, it can be
    // referenced as the "underscore" module.
    define(function() {
      return _;
    });
  }
  // Check for `exports` after `define` in case a build optimizer adds an `exports` object.
  else if (freeExports && freeModule) {
    // Export for Node.js or RingoJS.
    if (moduleExports) {
      (freeModule.exports = _)._ = _;
    }
    // Export for Rhino with CommonJS support.
    else {
      freeExports._ = _;
    }
  }
  else {
    // Export for a browser or Rhino.
    root._ = _;
  }
}.call(this));

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\loglevel\\lib\\loglevel.js":[function(require,module,exports){
/*
* loglevel - https://github.com/pimterry/loglevel
*
* Copyright (c) 2013 Tim Perry
* Licensed under the MIT license.
*/
(function (root, definition) {
    if (typeof module === 'object' && module.exports && typeof require === 'function') {
        module.exports = definition();
    } else if (typeof define === 'function' && typeof define.amd === 'object') {
        define(definition);
    } else {
        root.log = definition();
    }
}(this, function () {
    var self = {};
    var noop = function() {};
    var undefinedType = "undefined";

    function realMethod(methodName) {
        if (typeof console === undefinedType) {
            return false; // We can't build a real method without a console to log to
        } else if (console[methodName] !== undefined) {
            return bindMethod(console, methodName);
        } else if (console.log !== undefined) {
            return bindMethod(console, 'log');
        } else {
            return noop;
        }
    }

    function bindMethod(obj, methodName) {
        var method = obj[methodName];
        if (typeof method.bind === 'function') {
            return method.bind(obj);
        } else {
            try {
                return Function.prototype.bind.call(method, obj);
            } catch (e) {
                // Missing bind shim or IE8 + Modernizr, fallback to wrapping
                return function() {
                    return Function.prototype.apply.apply(method, [obj, arguments]);
                };
            }
        }
    }

    function enableLoggingWhenConsoleArrives(methodName, level) {
        return function () {
            if (typeof console !== undefinedType) {
                replaceLoggingMethods(level);
                self[methodName].apply(self, arguments);
            }
        };
    }

    var logMethods = [
        "trace",
        "debug",
        "info",
        "warn",
        "error"
    ];

    function replaceLoggingMethods(level) {
        for (var i = 0; i < logMethods.length; i++) {
            var methodName = logMethods[i];
            self[methodName] = (i < level) ? noop : self.methodFactory(methodName, level);
        }
    }

    function persistLevelIfPossible(levelNum) {
        var levelName = (logMethods[levelNum] || 'silent').toUpperCase();

        // Use localStorage if available
        try {
            window.localStorage['loglevel'] = levelName;
            return;
        } catch (ignore) {}

        // Use session cookie as fallback
        try {
            window.document.cookie = "loglevel=" + levelName + ";";
        } catch (ignore) {}
    }

    function loadPersistedLevel() {
        var storedLevel;

        try {
            storedLevel = window.localStorage['loglevel'];
        } catch (ignore) {}

        if (typeof storedLevel === undefinedType) {
            try {
                storedLevel = /loglevel=([^;]+)/.exec(window.document.cookie)[1];
            } catch (ignore) {}
        }
        
        if (self.levels[storedLevel] === undefined) {
            storedLevel = "WARN";
        }

        self.setLevel(self.levels[storedLevel], false);
    }

    /*
     *
     * Public API
     *
     */

    self.levels = { "TRACE": 0, "DEBUG": 1, "INFO": 2, "WARN": 3,
        "ERROR": 4, "SILENT": 5};

    self.methodFactory = function (methodName, level) {
        return realMethod(methodName) ||
               enableLoggingWhenConsoleArrives(methodName, level);
    };

    self.setLevel = function (level, persist) {
        if (typeof level === "string" && self.levels[level.toUpperCase()] !== undefined) {
            level = self.levels[level.toUpperCase()];
        }
        if (typeof level === "number" && level >= 0 && level <= self.levels.SILENT) {
            if (persist !== false) {  // defaults to true
                persistLevelIfPossible(level);
            }
            replaceLoggingMethods(level);
            if (typeof console === undefinedType && level < self.levels.SILENT) {
                return "No console available for logging";
            }
        } else {
            throw "log.setLevel() called with invalid level: " + level;
        }
    };

    self.enableAll = function(persist) {
        self.setLevel(self.levels.TRACE, persist);
    };

    self.disableAll = function(persist) {
        self.setLevel(self.levels.SILENT, persist);
    };

    // Grab the current global log variable in case of overwrite
    var _log = (typeof window !== undefinedType) ? window.log : undefined;
    self.noConflict = function() {
        if (typeof window !== undefinedType &&
               window.log === self) {
            window.log = _log;
        }

        return self;
    };

    loadPersistedLevel();
    return self;
}));

},{}],"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\moment\\moment.js":[function(require,module,exports){
//! moment.js
//! version : 2.10.6
//! authors : Tim Wood, Iskren Chernev, Moment.js contributors
//! license : MIT
//! momentjs.com

(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
    typeof define === 'function' && define.amd ? define(factory) :
    global.moment = factory()
}(this, function () { 'use strict';

    var hookCallback;

    function utils_hooks__hooks () {
        return hookCallback.apply(null, arguments);
    }

    // This is done to register the method called with moment()
    // without creating circular dependencies.
    function setHookCallback (callback) {
        hookCallback = callback;
    }

    function isArray(input) {
        return Object.prototype.toString.call(input) === '[object Array]';
    }

    function isDate(input) {
        return input instanceof Date || Object.prototype.toString.call(input) === '[object Date]';
    }

    function map(arr, fn) {
        var res = [], i;
        for (i = 0; i < arr.length; ++i) {
            res.push(fn(arr[i], i));
        }
        return res;
    }

    function hasOwnProp(a, b) {
        return Object.prototype.hasOwnProperty.call(a, b);
    }

    function extend(a, b) {
        for (var i in b) {
            if (hasOwnProp(b, i)) {
                a[i] = b[i];
            }
        }

        if (hasOwnProp(b, 'toString')) {
            a.toString = b.toString;
        }

        if (hasOwnProp(b, 'valueOf')) {
            a.valueOf = b.valueOf;
        }

        return a;
    }

    function create_utc__createUTC (input, format, locale, strict) {
        return createLocalOrUTC(input, format, locale, strict, true).utc();
    }

    function defaultParsingFlags() {
        // We need to deep clone this object.
        return {
            empty           : false,
            unusedTokens    : [],
            unusedInput     : [],
            overflow        : -2,
            charsLeftOver   : 0,
            nullInput       : false,
            invalidMonth    : null,
            invalidFormat   : false,
            userInvalidated : false,
            iso             : false
        };
    }

    function getParsingFlags(m) {
        if (m._pf == null) {
            m._pf = defaultParsingFlags();
        }
        return m._pf;
    }

    function valid__isValid(m) {
        if (m._isValid == null) {
            var flags = getParsingFlags(m);
            m._isValid = !isNaN(m._d.getTime()) &&
                flags.overflow < 0 &&
                !flags.empty &&
                !flags.invalidMonth &&
                !flags.invalidWeekday &&
                !flags.nullInput &&
                !flags.invalidFormat &&
                !flags.userInvalidated;

            if (m._strict) {
                m._isValid = m._isValid &&
                    flags.charsLeftOver === 0 &&
                    flags.unusedTokens.length === 0 &&
                    flags.bigHour === undefined;
            }
        }
        return m._isValid;
    }

    function valid__createInvalid (flags) {
        var m = create_utc__createUTC(NaN);
        if (flags != null) {
            extend(getParsingFlags(m), flags);
        }
        else {
            getParsingFlags(m).userInvalidated = true;
        }

        return m;
    }

    var momentProperties = utils_hooks__hooks.momentProperties = [];

    function copyConfig(to, from) {
        var i, prop, val;

        if (typeof from._isAMomentObject !== 'undefined') {
            to._isAMomentObject = from._isAMomentObject;
        }
        if (typeof from._i !== 'undefined') {
            to._i = from._i;
        }
        if (typeof from._f !== 'undefined') {
            to._f = from._f;
        }
        if (typeof from._l !== 'undefined') {
            to._l = from._l;
        }
        if (typeof from._strict !== 'undefined') {
            to._strict = from._strict;
        }
        if (typeof from._tzm !== 'undefined') {
            to._tzm = from._tzm;
        }
        if (typeof from._isUTC !== 'undefined') {
            to._isUTC = from._isUTC;
        }
        if (typeof from._offset !== 'undefined') {
            to._offset = from._offset;
        }
        if (typeof from._pf !== 'undefined') {
            to._pf = getParsingFlags(from);
        }
        if (typeof from._locale !== 'undefined') {
            to._locale = from._locale;
        }

        if (momentProperties.length > 0) {
            for (i in momentProperties) {
                prop = momentProperties[i];
                val = from[prop];
                if (typeof val !== 'undefined') {
                    to[prop] = val;
                }
            }
        }

        return to;
    }

    var updateInProgress = false;

    // Moment prototype object
    function Moment(config) {
        copyConfig(this, config);
        this._d = new Date(config._d != null ? config._d.getTime() : NaN);
        // Prevent infinite loop in case updateOffset creates new moment
        // objects.
        if (updateInProgress === false) {
            updateInProgress = true;
            utils_hooks__hooks.updateOffset(this);
            updateInProgress = false;
        }
    }

    function isMoment (obj) {
        return obj instanceof Moment || (obj != null && obj._isAMomentObject != null);
    }

    function absFloor (number) {
        if (number < 0) {
            return Math.ceil(number);
        } else {
            return Math.floor(number);
        }
    }

    function toInt(argumentForCoercion) {
        var coercedNumber = +argumentForCoercion,
            value = 0;

        if (coercedNumber !== 0 && isFinite(coercedNumber)) {
            value = absFloor(coercedNumber);
        }

        return value;
    }

    function compareArrays(array1, array2, dontConvert) {
        var len = Math.min(array1.length, array2.length),
            lengthDiff = Math.abs(array1.length - array2.length),
            diffs = 0,
            i;
        for (i = 0; i < len; i++) {
            if ((dontConvert && array1[i] !== array2[i]) ||
                (!dontConvert && toInt(array1[i]) !== toInt(array2[i]))) {
                diffs++;
            }
        }
        return diffs + lengthDiff;
    }

    function Locale() {
    }

    var locales = {};
    var globalLocale;

    function normalizeLocale(key) {
        return key ? key.toLowerCase().replace('_', '-') : key;
    }

    // pick the locale from the array
    // try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each
    // substring from most specific to least, but move to the next array item if it's a more specific variant than the current root
    function chooseLocale(names) {
        var i = 0, j, next, locale, split;

        while (i < names.length) {
            split = normalizeLocale(names[i]).split('-');
            j = split.length;
            next = normalizeLocale(names[i + 1]);
            next = next ? next.split('-') : null;
            while (j > 0) {
                locale = loadLocale(split.slice(0, j).join('-'));
                if (locale) {
                    return locale;
                }
                if (next && next.length >= j && compareArrays(split, next, true) >= j - 1) {
                    //the next array item is better than a shallower substring of this one
                    break;
                }
                j--;
            }
            i++;
        }
        return null;
    }

    function loadLocale(name) {
        var oldLocale = null;
        // TODO: Find a better way to register and load all the locales in Node
        if (!locales[name] && typeof module !== 'undefined' &&
                module && module.exports) {
            try {
                oldLocale = globalLocale._abbr;
                require('./locale/' + name);
                // because defineLocale currently also sets the global locale, we
                // want to undo that for lazy loaded locales
                locale_locales__getSetGlobalLocale(oldLocale);
            } catch (e) { }
        }
        return locales[name];
    }

    // This function will load locale and then set the global locale.  If
    // no arguments are passed in, it will simply return the current global
    // locale key.
    function locale_locales__getSetGlobalLocale (key, values) {
        var data;
        if (key) {
            if (typeof values === 'undefined') {
                data = locale_locales__getLocale(key);
            }
            else {
                data = defineLocale(key, values);
            }

            if (data) {
                // moment.duration._locale = moment._locale = data;
                globalLocale = data;
            }
        }

        return globalLocale._abbr;
    }

    function defineLocale (name, values) {
        if (values !== null) {
            values.abbr = name;
            locales[name] = locales[name] || new Locale();
            locales[name].set(values);

            // backwards compat for now: also set the locale
            locale_locales__getSetGlobalLocale(name);

            return locales[name];
        } else {
            // useful for testing
            delete locales[name];
            return null;
        }
    }

    // returns locale data
    function locale_locales__getLocale (key) {
        var locale;

        if (key && key._locale && key._locale._abbr) {
            key = key._locale._abbr;
        }

        if (!key) {
            return globalLocale;
        }

        if (!isArray(key)) {
            //short-circuit everything else
            locale = loadLocale(key);
            if (locale) {
                return locale;
            }
            key = [key];
        }

        return chooseLocale(key);
    }

    var aliases = {};

    function addUnitAlias (unit, shorthand) {
        var lowerCase = unit.toLowerCase();
        aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit;
    }

    function normalizeUnits(units) {
        return typeof units === 'string' ? aliases[units] || aliases[units.toLowerCase()] : undefined;
    }

    function normalizeObjectUnits(inputObject) {
        var normalizedInput = {},
            normalizedProp,
            prop;

        for (prop in inputObject) {
            if (hasOwnProp(inputObject, prop)) {
                normalizedProp = normalizeUnits(prop);
                if (normalizedProp) {
                    normalizedInput[normalizedProp] = inputObject[prop];
                }
            }
        }

        return normalizedInput;
    }

    function makeGetSet (unit, keepTime) {
        return function (value) {
            if (value != null) {
                get_set__set(this, unit, value);
                utils_hooks__hooks.updateOffset(this, keepTime);
                return this;
            } else {
                return get_set__get(this, unit);
            }
        };
    }

    function get_set__get (mom, unit) {
        return mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]();
    }

    function get_set__set (mom, unit, value) {
        return mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);
    }

    // MOMENTS

    function getSet (units, value) {
        var unit;
        if (typeof units === 'object') {
            for (unit in units) {
                this.set(unit, units[unit]);
            }
        } else {
            units = normalizeUnits(units);
            if (typeof this[units] === 'function') {
                return this[units](value);
            }
        }
        return this;
    }

    function zeroFill(number, targetLength, forceSign) {
        var absNumber = '' + Math.abs(number),
            zerosToFill = targetLength - absNumber.length,
            sign = number >= 0;
        return (sign ? (forceSign ? '+' : '') : '-') +
            Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;
    }

    var formattingTokens = /(\[[^\[]*\])|(\\)?(Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Q|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g;

    var localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g;

    var formatFunctions = {};

    var formatTokenFunctions = {};

    // token:    'M'
    // padded:   ['MM', 2]
    // ordinal:  'Mo'
    // callback: function () { this.month() + 1 }
    function addFormatToken (token, padded, ordinal, callback) {
        var func = callback;
        if (typeof callback === 'string') {
            func = function () {
                return this[callback]();
            };
        }
        if (token) {
            formatTokenFunctions[token] = func;
        }
        if (padded) {
            formatTokenFunctions[padded[0]] = function () {
                return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
            };
        }
        if (ordinal) {
            formatTokenFunctions[ordinal] = function () {
                return this.localeData().ordinal(func.apply(this, arguments), token);
            };
        }
    }

    function removeFormattingTokens(input) {
        if (input.match(/\[[\s\S]/)) {
            return input.replace(/^\[|\]$/g, '');
        }
        return input.replace(/\\/g, '');
    }

    function makeFormatFunction(format) {
        var array = format.match(formattingTokens), i, length;

        for (i = 0, length = array.length; i < length; i++) {
            if (formatTokenFunctions[array[i]]) {
                array[i] = formatTokenFunctions[array[i]];
            } else {
                array[i] = removeFormattingTokens(array[i]);
            }
        }

        return function (mom) {
            var output = '';
            for (i = 0; i < length; i++) {
                output += array[i] instanceof Function ? array[i].call(mom, format) : array[i];
            }
            return output;
        };
    }

    // format date using native date object
    function formatMoment(m, format) {
        if (!m.isValid()) {
            return m.localeData().invalidDate();
        }

        format = expandFormat(format, m.localeData());
        formatFunctions[format] = formatFunctions[format] || makeFormatFunction(format);

        return formatFunctions[format](m);
    }

    function expandFormat(format, locale) {
        var i = 5;

        function replaceLongDateFormatTokens(input) {
            return locale.longDateFormat(input) || input;
        }

        localFormattingTokens.lastIndex = 0;
        while (i >= 0 && localFormattingTokens.test(format)) {
            format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);
            localFormattingTokens.lastIndex = 0;
            i -= 1;
        }

        return format;
    }

    var match1         = /\d/;            //       0 - 9
    var match2         = /\d\d/;          //      00 - 99
    var match3         = /\d{3}/;         //     000 - 999
    var match4         = /\d{4}/;         //    0000 - 9999
    var match6         = /[+-]?\d{6}/;    // -999999 - 999999
    var match1to2      = /\d\d?/;         //       0 - 99
    var match1to3      = /\d{1,3}/;       //       0 - 999
    var match1to4      = /\d{1,4}/;       //       0 - 9999
    var match1to6      = /[+-]?\d{1,6}/;  // -999999 - 999999

    var matchUnsigned  = /\d+/;           //       0 - inf
    var matchSigned    = /[+-]?\d+/;      //    -inf - inf

    var matchOffset    = /Z|[+-]\d\d:?\d\d/gi; // +00:00 -00:00 +0000 -0000 or Z

    var matchTimestamp = /[+-]?\d+(\.\d{1,3})?/; // 123456789 123456789.123

    // any word (or two) characters or numbers including two/three word month in arabic.
    var matchWord = /[0-9]*['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i;

    var regexes = {};

    function isFunction (sth) {
        // https://github.com/moment/moment/issues/2325
        return typeof sth === 'function' &&
            Object.prototype.toString.call(sth) === '[object Function]';
    }


    function addRegexToken (token, regex, strictRegex) {
        regexes[token] = isFunction(regex) ? regex : function (isStrict) {
            return (isStrict && strictRegex) ? strictRegex : regex;
        };
    }

    function getParseRegexForToken (token, config) {
        if (!hasOwnProp(regexes, token)) {
            return new RegExp(unescapeFormat(token));
        }

        return regexes[token](config._strict, config._locale);
    }

    // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript
    function unescapeFormat(s) {
        return s.replace('\\', '').replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function (matched, p1, p2, p3, p4) {
            return p1 || p2 || p3 || p4;
        }).replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
    }

    var tokens = {};

    function addParseToken (token, callback) {
        var i, func = callback;
        if (typeof token === 'string') {
            token = [token];
        }
        if (typeof callback === 'number') {
            func = function (input, array) {
                array[callback] = toInt(input);
            };
        }
        for (i = 0; i < token.length; i++) {
            tokens[token[i]] = func;
        }
    }

    function addWeekParseToken (token, callback) {
        addParseToken(token, function (input, array, config, token) {
            config._w = config._w || {};
            callback(input, config._w, config, token);
        });
    }

    function addTimeToArrayFromToken(token, input, config) {
        if (input != null && hasOwnProp(tokens, token)) {
            tokens[token](input, config._a, config, token);
        }
    }

    var YEAR = 0;
    var MONTH = 1;
    var DATE = 2;
    var HOUR = 3;
    var MINUTE = 4;
    var SECOND = 5;
    var MILLISECOND = 6;

    function daysInMonth(year, month) {
        return new Date(Date.UTC(year, month + 1, 0)).getUTCDate();
    }

    // FORMATTING

    addFormatToken('M', ['MM', 2], 'Mo', function () {
        return this.month() + 1;
    });

    addFormatToken('MMM', 0, 0, function (format) {
        return this.localeData().monthsShort(this, format);
    });

    addFormatToken('MMMM', 0, 0, function (format) {
        return this.localeData().months(this, format);
    });

    // ALIASES

    addUnitAlias('month', 'M');

    // PARSING

    addRegexToken('M',    match1to2);
    addRegexToken('MM',   match1to2, match2);
    addRegexToken('MMM',  matchWord);
    addRegexToken('MMMM', matchWord);

    addParseToken(['M', 'MM'], function (input, array) {
        array[MONTH] = toInt(input) - 1;
    });

    addParseToken(['MMM', 'MMMM'], function (input, array, config, token) {
        var month = config._locale.monthsParse(input, token, config._strict);
        // if we didn't find a month name, mark the date as invalid.
        if (month != null) {
            array[MONTH] = month;
        } else {
            getParsingFlags(config).invalidMonth = input;
        }
    });

    // LOCALES

    var defaultLocaleMonths = 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_');
    function localeMonths (m) {
        return this._months[m.month()];
    }

    var defaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_');
    function localeMonthsShort (m) {
        return this._monthsShort[m.month()];
    }

    function localeMonthsParse (monthName, format, strict) {
        var i, mom, regex;

        if (!this._monthsParse) {
            this._monthsParse = [];
            this._longMonthsParse = [];
            this._shortMonthsParse = [];
        }

        for (i = 0; i < 12; i++) {
            // make the regex if we don't have it already
            mom = create_utc__createUTC([2000, i]);
            if (strict && !this._longMonthsParse[i]) {
                this._longMonthsParse[i] = new RegExp('^' + this.months(mom, '').replace('.', '') + '$', 'i');
                this._shortMonthsParse[i] = new RegExp('^' + this.monthsShort(mom, '').replace('.', '') + '$', 'i');
            }
            if (!strict && !this._monthsParse[i]) {
                regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
                this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');
            }
            // test the regex
            if (strict && format === 'MMMM' && this._longMonthsParse[i].test(monthName)) {
                return i;
            } else if (strict && format === 'MMM' && this._shortMonthsParse[i].test(monthName)) {
                return i;
            } else if (!strict && this._monthsParse[i].test(monthName)) {
                return i;
            }
        }
    }

    // MOMENTS

    function setMonth (mom, value) {
        var dayOfMonth;

        // TODO: Move this out of here!
        if (typeof value === 'string') {
            value = mom.localeData().monthsParse(value);
            // TODO: Another silent failure?
            if (typeof value !== 'number') {
                return mom;
            }
        }

        dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));
        mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);
        return mom;
    }

    function getSetMonth (value) {
        if (value != null) {
            setMonth(this, value);
            utils_hooks__hooks.updateOffset(this, true);
            return this;
        } else {
            return get_set__get(this, 'Month');
        }
    }

    function getDaysInMonth () {
        return daysInMonth(this.year(), this.month());
    }

    function checkOverflow (m) {
        var overflow;
        var a = m._a;

        if (a && getParsingFlags(m).overflow === -2) {
            overflow =
                a[MONTH]       < 0 || a[MONTH]       > 11  ? MONTH :
                a[DATE]        < 1 || a[DATE]        > daysInMonth(a[YEAR], a[MONTH]) ? DATE :
                a[HOUR]        < 0 || a[HOUR]        > 24 || (a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0)) ? HOUR :
                a[MINUTE]      < 0 || a[MINUTE]      > 59  ? MINUTE :
                a[SECOND]      < 0 || a[SECOND]      > 59  ? SECOND :
                a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND :
                -1;

            if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {
                overflow = DATE;
            }

            getParsingFlags(m).overflow = overflow;
        }

        return m;
    }

    function warn(msg) {
        if (utils_hooks__hooks.suppressDeprecationWarnings === false && typeof console !== 'undefined' && console.warn) {
            console.warn('Deprecation warning: ' + msg);
        }
    }

    function deprecate(msg, fn) {
        var firstTime = true;

        return extend(function () {
            if (firstTime) {
                warn(msg + '\n' + (new Error()).stack);
                firstTime = false;
            }
            return fn.apply(this, arguments);
        }, fn);
    }

    var deprecations = {};

    function deprecateSimple(name, msg) {
        if (!deprecations[name]) {
            warn(msg);
            deprecations[name] = true;
        }
    }

    utils_hooks__hooks.suppressDeprecationWarnings = false;

    var from_string__isoRegex = /^\s*(?:[+-]\d{6}|\d{4})-(?:(\d\d-\d\d)|(W\d\d$)|(W\d\d-\d)|(\d\d\d))((T| )(\d\d(:\d\d(:\d\d(\.\d+)?)?)?)?([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;

    var isoDates = [
        ['YYYYYY-MM-DD', /[+-]\d{6}-\d{2}-\d{2}/],
        ['YYYY-MM-DD', /\d{4}-\d{2}-\d{2}/],
        ['GGGG-[W]WW-E', /\d{4}-W\d{2}-\d/],
        ['GGGG-[W]WW', /\d{4}-W\d{2}/],
        ['YYYY-DDD', /\d{4}-\d{3}/]
    ];

    // iso time formats and regexes
    var isoTimes = [
        ['HH:mm:ss.SSSS', /(T| )\d\d:\d\d:\d\d\.\d+/],
        ['HH:mm:ss', /(T| )\d\d:\d\d:\d\d/],
        ['HH:mm', /(T| )\d\d:\d\d/],
        ['HH', /(T| )\d\d/]
    ];

    var aspNetJsonRegex = /^\/?Date\((\-?\d+)/i;

    // date from iso format
    function configFromISO(config) {
        var i, l,
            string = config._i,
            match = from_string__isoRegex.exec(string);

        if (match) {
            getParsingFlags(config).iso = true;
            for (i = 0, l = isoDates.length; i < l; i++) {
                if (isoDates[i][1].exec(string)) {
                    config._f = isoDates[i][0];
                    break;
                }
            }
            for (i = 0, l = isoTimes.length; i < l; i++) {
                if (isoTimes[i][1].exec(string)) {
                    // match[6] should be 'T' or space
                    config._f += (match[6] || ' ') + isoTimes[i][0];
                    break;
                }
            }
            if (string.match(matchOffset)) {
                config._f += 'Z';
            }
            configFromStringAndFormat(config);
        } else {
            config._isValid = false;
        }
    }

    // date from iso format or fallback
    function configFromString(config) {
        var matched = aspNetJsonRegex.exec(config._i);

        if (matched !== null) {
            config._d = new Date(+matched[1]);
            return;
        }

        configFromISO(config);
        if (config._isValid === false) {
            delete config._isValid;
            utils_hooks__hooks.createFromInputFallback(config);
        }
    }

    utils_hooks__hooks.createFromInputFallback = deprecate(
        'moment construction falls back to js Date. This is ' +
        'discouraged and will be removed in upcoming major ' +
        'release. Please refer to ' +
        'https://github.com/moment/moment/issues/1407 for more info.',
        function (config) {
            config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));
        }
    );

    function createDate (y, m, d, h, M, s, ms) {
        //can't just apply() to create a date:
        //http://stackoverflow.com/questions/181348/instantiating-a-javascript-object-by-calling-prototype-constructor-apply
        var date = new Date(y, m, d, h, M, s, ms);

        //the date constructor doesn't accept years < 1970
        if (y < 1970) {
            date.setFullYear(y);
        }
        return date;
    }

    function createUTCDate (y) {
        var date = new Date(Date.UTC.apply(null, arguments));
        if (y < 1970) {
            date.setUTCFullYear(y);
        }
        return date;
    }

    addFormatToken(0, ['YY', 2], 0, function () {
        return this.year() % 100;
    });

    addFormatToken(0, ['YYYY',   4],       0, 'year');
    addFormatToken(0, ['YYYYY',  5],       0, 'year');
    addFormatToken(0, ['YYYYYY', 6, true], 0, 'year');

    // ALIASES

    addUnitAlias('year', 'y');

    // PARSING

    addRegexToken('Y',      matchSigned);
    addRegexToken('YY',     match1to2, match2);
    addRegexToken('YYYY',   match1to4, match4);
    addRegexToken('YYYYY',  match1to6, match6);
    addRegexToken('YYYYYY', match1to6, match6);

    addParseToken(['YYYYY', 'YYYYYY'], YEAR);
    addParseToken('YYYY', function (input, array) {
        array[YEAR] = input.length === 2 ? utils_hooks__hooks.parseTwoDigitYear(input) : toInt(input);
    });
    addParseToken('YY', function (input, array) {
        array[YEAR] = utils_hooks__hooks.parseTwoDigitYear(input);
    });

    // HELPERS

    function daysInYear(year) {
        return isLeapYear(year) ? 366 : 365;
    }

    function isLeapYear(year) {
        return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;
    }

    // HOOKS

    utils_hooks__hooks.parseTwoDigitYear = function (input) {
        return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
    };

    // MOMENTS

    var getSetYear = makeGetSet('FullYear', false);

    function getIsLeapYear () {
        return isLeapYear(this.year());
    }

    addFormatToken('w', ['ww', 2], 'wo', 'week');
    addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek');

    // ALIASES

    addUnitAlias('week', 'w');
    addUnitAlias('isoWeek', 'W');

    // PARSING

    addRegexToken('w',  match1to2);
    addRegexToken('ww', match1to2, match2);
    addRegexToken('W',  match1to2);
    addRegexToken('WW', match1to2, match2);

    addWeekParseToken(['w', 'ww', 'W', 'WW'], function (input, week, config, token) {
        week[token.substr(0, 1)] = toInt(input);
    });

    // HELPERS

    // firstDayOfWeek       0 = sun, 6 = sat
    //                      the day of the week that starts the week
    //                      (usually sunday or monday)
    // firstDayOfWeekOfYear 0 = sun, 6 = sat
    //                      the first week is the week that contains the first
    //                      of this day of the week
    //                      (eg. ISO weeks use thursday (4))
    function weekOfYear(mom, firstDayOfWeek, firstDayOfWeekOfYear) {
        var end = firstDayOfWeekOfYear - firstDayOfWeek,
            daysToDayOfWeek = firstDayOfWeekOfYear - mom.day(),
            adjustedMoment;


        if (daysToDayOfWeek > end) {
            daysToDayOfWeek -= 7;
        }

        if (daysToDayOfWeek < end - 7) {
            daysToDayOfWeek += 7;
        }

        adjustedMoment = local__createLocal(mom).add(daysToDayOfWeek, 'd');
        return {
            week: Math.ceil(adjustedMoment.dayOfYear() / 7),
            year: adjustedMoment.year()
        };
    }

    // LOCALES

    function localeWeek (mom) {
        return weekOfYear(mom, this._week.dow, this._week.doy).week;
    }

    var defaultLocaleWeek = {
        dow : 0, // Sunday is the first day of the week.
        doy : 6  // The week that contains Jan 1st is the first week of the year.
    };

    function localeFirstDayOfWeek () {
        return this._week.dow;
    }

    function localeFirstDayOfYear () {
        return this._week.doy;
    }

    // MOMENTS

    function getSetWeek (input) {
        var week = this.localeData().week(this);
        return input == null ? week : this.add((input - week) * 7, 'd');
    }

    function getSetISOWeek (input) {
        var week = weekOfYear(this, 1, 4).week;
        return input == null ? week : this.add((input - week) * 7, 'd');
    }

    addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear');

    // ALIASES

    addUnitAlias('dayOfYear', 'DDD');

    // PARSING

    addRegexToken('DDD',  match1to3);
    addRegexToken('DDDD', match3);
    addParseToken(['DDD', 'DDDD'], function (input, array, config) {
        config._dayOfYear = toInt(input);
    });

    // HELPERS

    //http://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday
    function dayOfYearFromWeeks(year, week, weekday, firstDayOfWeekOfYear, firstDayOfWeek) {
        var week1Jan = 6 + firstDayOfWeek - firstDayOfWeekOfYear, janX = createUTCDate(year, 0, 1 + week1Jan), d = janX.getUTCDay(), dayOfYear;
        if (d < firstDayOfWeek) {
            d += 7;
        }

        weekday = weekday != null ? 1 * weekday : firstDayOfWeek;

        dayOfYear = 1 + week1Jan + 7 * (week - 1) - d + weekday;

        return {
            year: dayOfYear > 0 ? year : year - 1,
            dayOfYear: dayOfYear > 0 ?  dayOfYear : daysInYear(year - 1) + dayOfYear
        };
    }

    // MOMENTS

    function getSetDayOfYear (input) {
        var dayOfYear = Math.round((this.clone().startOf('day') - this.clone().startOf('year')) / 864e5) + 1;
        return input == null ? dayOfYear : this.add((input - dayOfYear), 'd');
    }

    // Pick the first defined of two or three arguments.
    function defaults(a, b, c) {
        if (a != null) {
            return a;
        }
        if (b != null) {
            return b;
        }
        return c;
    }

    function currentDateArray(config) {
        var now = new Date();
        if (config._useUTC) {
            return [now.getUTCFullYear(), now.getUTCMonth(), now.getUTCDate()];
        }
        return [now.getFullYear(), now.getMonth(), now.getDate()];
    }

    // convert an array to a date.
    // the array should mirror the parameters below
    // note: all values past the year are optional and will default to the lowest possible value.
    // [year, month, day , hour, minute, second, millisecond]
    function configFromArray (config) {
        var i, date, input = [], currentDate, yearToUse;

        if (config._d) {
            return;
        }

        currentDate = currentDateArray(config);

        //compute day of the year from weeks and weekdays
        if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
            dayOfYearFromWeekInfo(config);
        }

        //if the day of the year is set, figure out what it is
        if (config._dayOfYear) {
            yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);

            if (config._dayOfYear > daysInYear(yearToUse)) {
                getParsingFlags(config)._overflowDayOfYear = true;
            }

            date = createUTCDate(yearToUse, 0, config._dayOfYear);
            config._a[MONTH] = date.getUTCMonth();
            config._a[DATE] = date.getUTCDate();
        }

        // Default to current date.
        // * if no year, month, day of month are given, default to today
        // * if day of month is given, default month and year
        // * if month is given, default only year
        // * if year is given, don't default anything
        for (i = 0; i < 3 && config._a[i] == null; ++i) {
            config._a[i] = input[i] = currentDate[i];
        }

        // Zero out whatever was not defaulted, including time
        for (; i < 7; i++) {
            config._a[i] = input[i] = (config._a[i] == null) ? (i === 2 ? 1 : 0) : config._a[i];
        }

        // Check for 24:00:00.000
        if (config._a[HOUR] === 24 &&
                config._a[MINUTE] === 0 &&
                config._a[SECOND] === 0 &&
                config._a[MILLISECOND] === 0) {
            config._nextDay = true;
            config._a[HOUR] = 0;
        }

        config._d = (config._useUTC ? createUTCDate : createDate).apply(null, input);
        // Apply timezone offset from input. The actual utcOffset can be changed
        // with parseZone.
        if (config._tzm != null) {
            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
        }

        if (config._nextDay) {
            config._a[HOUR] = 24;
        }
    }

    function dayOfYearFromWeekInfo(config) {
        var w, weekYear, week, weekday, dow, doy, temp;

        w = config._w;
        if (w.GG != null || w.W != null || w.E != null) {
            dow = 1;
            doy = 4;

            // TODO: We need to take the current isoWeekYear, but that depends on
            // how we interpret now (local, utc, fixed offset). So create
            // a now version of current config (take local/utc/offset flags, and
            // create now).
            weekYear = defaults(w.GG, config._a[YEAR], weekOfYear(local__createLocal(), 1, 4).year);
            week = defaults(w.W, 1);
            weekday = defaults(w.E, 1);
        } else {
            dow = config._locale._week.dow;
            doy = config._locale._week.doy;

            weekYear = defaults(w.gg, config._a[YEAR], weekOfYear(local__createLocal(), dow, doy).year);
            week = defaults(w.w, 1);

            if (w.d != null) {
                // weekday -- low day numbers are considered next week
                weekday = w.d;
                if (weekday < dow) {
                    ++week;
                }
            } else if (w.e != null) {
                // local weekday -- counting starts from begining of week
                weekday = w.e + dow;
            } else {
                // default to begining of week
                weekday = dow;
            }
        }
        temp = dayOfYearFromWeeks(weekYear, week, weekday, doy, dow);

        config._a[YEAR] = temp.year;
        config._dayOfYear = temp.dayOfYear;
    }

    utils_hooks__hooks.ISO_8601 = function () {};

    // date from string and format string
    function configFromStringAndFormat(config) {
        // TODO: Move this to another part of the creation flow to prevent circular deps
        if (config._f === utils_hooks__hooks.ISO_8601) {
            configFromISO(config);
            return;
        }

        config._a = [];
        getParsingFlags(config).empty = true;

        // This array is used to make a Date, either with `new Date` or `Date.UTC`
        var string = '' + config._i,
            i, parsedInput, tokens, token, skipped,
            stringLength = string.length,
            totalParsedInputLength = 0;

        tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [];

        for (i = 0; i < tokens.length; i++) {
            token = tokens[i];
            parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0];
            if (parsedInput) {
                skipped = string.substr(0, string.indexOf(parsedInput));
                if (skipped.length > 0) {
                    getParsingFlags(config).unusedInput.push(skipped);
                }
                string = string.slice(string.indexOf(parsedInput) + parsedInput.length);
                totalParsedInputLength += parsedInput.length;
            }
            // don't parse if it's not a known token
            if (formatTokenFunctions[token]) {
                if (parsedInput) {
                    getParsingFlags(config).empty = false;
                }
                else {
                    getParsingFlags(config).unusedTokens.push(token);
                }
                addTimeToArrayFromToken(token, parsedInput, config);
            }
            else if (config._strict && !parsedInput) {
                getParsingFlags(config).unusedTokens.push(token);
            }
        }

        // add remaining unparsed input length to the string
        getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;
        if (string.length > 0) {
            getParsingFlags(config).unusedInput.push(string);
        }

        // clear _12h flag if hour is <= 12
        if (getParsingFlags(config).bigHour === true &&
                config._a[HOUR] <= 12 &&
                config._a[HOUR] > 0) {
            getParsingFlags(config).bigHour = undefined;
        }
        // handle meridiem
        config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR], config._meridiem);

        configFromArray(config);
        checkOverflow(config);
    }


    function meridiemFixWrap (locale, hour, meridiem) {
        var isPm;

        if (meridiem == null) {
            // nothing to do
            return hour;
        }
        if (locale.meridiemHour != null) {
            return locale.meridiemHour(hour, meridiem);
        } else if (locale.isPM != null) {
            // Fallback
            isPm = locale.isPM(meridiem);
            if (isPm && hour < 12) {
                hour += 12;
            }
            if (!isPm && hour === 12) {
                hour = 0;
            }
            return hour;
        } else {
            // this is not supposed to happen
            return hour;
        }
    }

    function configFromStringAndArray(config) {
        var tempConfig,
            bestMoment,

            scoreToBeat,
            i,
            currentScore;

        if (config._f.length === 0) {
            getParsingFlags(config).invalidFormat = true;
            config._d = new Date(NaN);
            return;
        }

        for (i = 0; i < config._f.length; i++) {
            currentScore = 0;
            tempConfig = copyConfig({}, config);
            if (config._useUTC != null) {
                tempConfig._useUTC = config._useUTC;
            }
            tempConfig._f = config._f[i];
            configFromStringAndFormat(tempConfig);

            if (!valid__isValid(tempConfig)) {
                continue;
            }

            // if there is any input that was not parsed add a penalty for that format
            currentScore += getParsingFlags(tempConfig).charsLeftOver;

            //or tokens
            currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;

            getParsingFlags(tempConfig).score = currentScore;

            if (scoreToBeat == null || currentScore < scoreToBeat) {
                scoreToBeat = currentScore;
                bestMoment = tempConfig;
            }
        }

        extend(config, bestMoment || tempConfig);
    }

    function configFromObject(config) {
        if (config._d) {
            return;
        }

        var i = normalizeObjectUnits(config._i);
        config._a = [i.year, i.month, i.day || i.date, i.hour, i.minute, i.second, i.millisecond];

        configFromArray(config);
    }

    function createFromConfig (config) {
        var res = new Moment(checkOverflow(prepareConfig(config)));
        if (res._nextDay) {
            // Adding is smart enough around DST
            res.add(1, 'd');
            res._nextDay = undefined;
        }

        return res;
    }

    function prepareConfig (config) {
        var input = config._i,
            format = config._f;

        config._locale = config._locale || locale_locales__getLocale(config._l);

        if (input === null || (format === undefined && input === '')) {
            return valid__createInvalid({nullInput: true});
        }

        if (typeof input === 'string') {
            config._i = input = config._locale.preparse(input);
        }

        if (isMoment(input)) {
            return new Moment(checkOverflow(input));
        } else if (isArray(format)) {
            configFromStringAndArray(config);
        } else if (format) {
            configFromStringAndFormat(config);
        } else if (isDate(input)) {
            config._d = input;
        } else {
            configFromInput(config);
        }

        return config;
    }

    function configFromInput(config) {
        var input = config._i;
        if (input === undefined) {
            config._d = new Date();
        } else if (isDate(input)) {
            config._d = new Date(+input);
        } else if (typeof input === 'string') {
            configFromString(config);
        } else if (isArray(input)) {
            config._a = map(input.slice(0), function (obj) {
                return parseInt(obj, 10);
            });
            configFromArray(config);
        } else if (typeof(input) === 'object') {
            configFromObject(config);
        } else if (typeof(input) === 'number') {
            // from milliseconds
            config._d = new Date(input);
        } else {
            utils_hooks__hooks.createFromInputFallback(config);
        }
    }

    function createLocalOrUTC (input, format, locale, strict, isUTC) {
        var c = {};

        if (typeof(locale) === 'boolean') {
            strict = locale;
            locale = undefined;
        }
        // object construction must be done this way.
        // https://github.com/moment/moment/issues/1423
        c._isAMomentObject = true;
        c._useUTC = c._isUTC = isUTC;
        c._l = locale;
        c._i = input;
        c._f = format;
        c._strict = strict;

        return createFromConfig(c);
    }

    function local__createLocal (input, format, locale, strict) {
        return createLocalOrUTC(input, format, locale, strict, false);
    }

    var prototypeMin = deprecate(
         'moment().min is deprecated, use moment.min instead. https://github.com/moment/moment/issues/1548',
         function () {
             var other = local__createLocal.apply(null, arguments);
             return other < this ? this : other;
         }
     );

    var prototypeMax = deprecate(
        'moment().max is deprecated, use moment.max instead. https://github.com/moment/moment/issues/1548',
        function () {
            var other = local__createLocal.apply(null, arguments);
            return other > this ? this : other;
        }
    );

    // Pick a moment m from moments so that m[fn](other) is true for all
    // other. This relies on the function fn to be transitive.
    //
    // moments should either be an array of moment objects or an array, whose
    // first element is an array of moment objects.
    function pickBy(fn, moments) {
        var res, i;
        if (moments.length === 1 && isArray(moments[0])) {
            moments = moments[0];
        }
        if (!moments.length) {
            return local__createLocal();
        }
        res = moments[0];
        for (i = 1; i < moments.length; ++i) {
            if (!moments[i].isValid() || moments[i][fn](res)) {
                res = moments[i];
            }
        }
        return res;
    }

    // TODO: Use [].sort instead?
    function min () {
        var args = [].slice.call(arguments, 0);

        return pickBy('isBefore', args);
    }

    function max () {
        var args = [].slice.call(arguments, 0);

        return pickBy('isAfter', args);
    }

    function Duration (duration) {
        var normalizedInput = normalizeObjectUnits(duration),
            years = normalizedInput.year || 0,
            quarters = normalizedInput.quarter || 0,
            months = normalizedInput.month || 0,
            weeks = normalizedInput.week || 0,
            days = normalizedInput.day || 0,
            hours = normalizedInput.hour || 0,
            minutes = normalizedInput.minute || 0,
            seconds = normalizedInput.second || 0,
            milliseconds = normalizedInput.millisecond || 0;

        // representation for dateAddRemove
        this._milliseconds = +milliseconds +
            seconds * 1e3 + // 1000
            minutes * 6e4 + // 1000 * 60
            hours * 36e5; // 1000 * 60 * 60
        // Because of dateAddRemove treats 24 hours as different from a
        // day when working around DST, we need to store them separately
        this._days = +days +
            weeks * 7;
        // It is impossible translate months into days without knowing
        // which months you are are talking about, so we have to store
        // it separately.
        this._months = +months +
            quarters * 3 +
            years * 12;

        this._data = {};

        this._locale = locale_locales__getLocale();

        this._bubble();
    }

    function isDuration (obj) {
        return obj instanceof Duration;
    }

    function offset (token, separator) {
        addFormatToken(token, 0, 0, function () {
            var offset = this.utcOffset();
            var sign = '+';
            if (offset < 0) {
                offset = -offset;
                sign = '-';
            }
            return sign + zeroFill(~~(offset / 60), 2) + separator + zeroFill(~~(offset) % 60, 2);
        });
    }

    offset('Z', ':');
    offset('ZZ', '');

    // PARSING

    addRegexToken('Z',  matchOffset);
    addRegexToken('ZZ', matchOffset);
    addParseToken(['Z', 'ZZ'], function (input, array, config) {
        config._useUTC = true;
        config._tzm = offsetFromString(input);
    });

    // HELPERS

    // timezone chunker
    // '+10:00' > ['10',  '00']
    // '-1530'  > ['-15', '30']
    var chunkOffset = /([\+\-]|\d\d)/gi;

    function offsetFromString(string) {
        var matches = ((string || '').match(matchOffset) || []);
        var chunk   = matches[matches.length - 1] || [];
        var parts   = (chunk + '').match(chunkOffset) || ['-', 0, 0];
        var minutes = +(parts[1] * 60) + toInt(parts[2]);

        return parts[0] === '+' ? minutes : -minutes;
    }

    // Return a moment from input, that is local/utc/zone equivalent to model.
    function cloneWithOffset(input, model) {
        var res, diff;
        if (model._isUTC) {
            res = model.clone();
            diff = (isMoment(input) || isDate(input) ? +input : +local__createLocal(input)) - (+res);
            // Use low-level api, because this fn is low-level api.
            res._d.setTime(+res._d + diff);
            utils_hooks__hooks.updateOffset(res, false);
            return res;
        } else {
            return local__createLocal(input).local();
        }
    }

    function getDateOffset (m) {
        // On Firefox.24 Date#getTimezoneOffset returns a floating point.
        // https://github.com/moment/moment/pull/1871
        return -Math.round(m._d.getTimezoneOffset() / 15) * 15;
    }

    // HOOKS

    // This function will be called whenever a moment is mutated.
    // It is intended to keep the offset in sync with the timezone.
    utils_hooks__hooks.updateOffset = function () {};

    // MOMENTS

    // keepLocalTime = true means only change the timezone, without
    // affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->
    // 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset
    // +0200, so we adjust the time as needed, to be valid.
    //
    // Keeping the time actually adds/subtracts (one hour)
    // from the actual represented time. That is why we call updateOffset
    // a second time. In case it wants us to change the offset again
    // _changeInProgress == true case, then we have to adjust, because
    // there is no such time in the given timezone.
    function getSetOffset (input, keepLocalTime) {
        var offset = this._offset || 0,
            localAdjust;
        if (input != null) {
            if (typeof input === 'string') {
                input = offsetFromString(input);
            }
            if (Math.abs(input) < 16) {
                input = input * 60;
            }
            if (!this._isUTC && keepLocalTime) {
                localAdjust = getDateOffset(this);
            }
            this._offset = input;
            this._isUTC = true;
            if (localAdjust != null) {
                this.add(localAdjust, 'm');
            }
            if (offset !== input) {
                if (!keepLocalTime || this._changeInProgress) {
                    add_subtract__addSubtract(this, create__createDuration(input - offset, 'm'), 1, false);
                } else if (!this._changeInProgress) {
                    this._changeInProgress = true;
                    utils_hooks__hooks.updateOffset(this, true);
                    this._changeInProgress = null;
                }
            }
            return this;
        } else {
            return this._isUTC ? offset : getDateOffset(this);
        }
    }

    function getSetZone (input, keepLocalTime) {
        if (input != null) {
            if (typeof input !== 'string') {
                input = -input;
            }

            this.utcOffset(input, keepLocalTime);

            return this;
        } else {
            return -this.utcOffset();
        }
    }

    function setOffsetToUTC (keepLocalTime) {
        return this.utcOffset(0, keepLocalTime);
    }

    function setOffsetToLocal (keepLocalTime) {
        if (this._isUTC) {
            this.utcOffset(0, keepLocalTime);
            this._isUTC = false;

            if (keepLocalTime) {
                this.subtract(getDateOffset(this), 'm');
            }
        }
        return this;
    }

    function setOffsetToParsedOffset () {
        if (this._tzm) {
            this.utcOffset(this._tzm);
        } else if (typeof this._i === 'string') {
            this.utcOffset(offsetFromString(this._i));
        }
        return this;
    }

    function hasAlignedHourOffset (input) {
        input = input ? local__createLocal(input).utcOffset() : 0;

        return (this.utcOffset() - input) % 60 === 0;
    }

    function isDaylightSavingTime () {
        return (
            this.utcOffset() > this.clone().month(0).utcOffset() ||
            this.utcOffset() > this.clone().month(5).utcOffset()
        );
    }

    function isDaylightSavingTimeShifted () {
        if (typeof this._isDSTShifted !== 'undefined') {
            return this._isDSTShifted;
        }

        var c = {};

        copyConfig(c, this);
        c = prepareConfig(c);

        if (c._a) {
            var other = c._isUTC ? create_utc__createUTC(c._a) : local__createLocal(c._a);
            this._isDSTShifted = this.isValid() &&
                compareArrays(c._a, other.toArray()) > 0;
        } else {
            this._isDSTShifted = false;
        }

        return this._isDSTShifted;
    }

    function isLocal () {
        return !this._isUTC;
    }

    function isUtcOffset () {
        return this._isUTC;
    }

    function isUtc () {
        return this._isUTC && this._offset === 0;
    }

    var aspNetRegex = /(\-)?(?:(\d*)\.)?(\d+)\:(\d+)(?:\:(\d+)\.?(\d{3})?)?/;

    // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html
    // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere
    var create__isoRegex = /^(-)?P(?:(?:([0-9,.]*)Y)?(?:([0-9,.]*)M)?(?:([0-9,.]*)D)?(?:T(?:([0-9,.]*)H)?(?:([0-9,.]*)M)?(?:([0-9,.]*)S)?)?|([0-9,.]*)W)$/;

    function create__createDuration (input, key) {
        var duration = input,
            // matching against regexp is expensive, do it on demand
            match = null,
            sign,
            ret,
            diffRes;

        if (isDuration(input)) {
            duration = {
                ms : input._milliseconds,
                d  : input._days,
                M  : input._months
            };
        } else if (typeof input === 'number') {
            duration = {};
            if (key) {
                duration[key] = input;
            } else {
                duration.milliseconds = input;
            }
        } else if (!!(match = aspNetRegex.exec(input))) {
            sign = (match[1] === '-') ? -1 : 1;
            duration = {
                y  : 0,
                d  : toInt(match[DATE])        * sign,
                h  : toInt(match[HOUR])        * sign,
                m  : toInt(match[MINUTE])      * sign,
                s  : toInt(match[SECOND])      * sign,
                ms : toInt(match[MILLISECOND]) * sign
            };
        } else if (!!(match = create__isoRegex.exec(input))) {
            sign = (match[1] === '-') ? -1 : 1;
            duration = {
                y : parseIso(match[2], sign),
                M : parseIso(match[3], sign),
                d : parseIso(match[4], sign),
                h : parseIso(match[5], sign),
                m : parseIso(match[6], sign),
                s : parseIso(match[7], sign),
                w : parseIso(match[8], sign)
            };
        } else if (duration == null) {// checks for null or undefined
            duration = {};
        } else if (typeof duration === 'object' && ('from' in duration || 'to' in duration)) {
            diffRes = momentsDifference(local__createLocal(duration.from), local__createLocal(duration.to));

            duration = {};
            duration.ms = diffRes.milliseconds;
            duration.M = diffRes.months;
        }

        ret = new Duration(duration);

        if (isDuration(input) && hasOwnProp(input, '_locale')) {
            ret._locale = input._locale;
        }

        return ret;
    }

    create__createDuration.fn = Duration.prototype;

    function parseIso (inp, sign) {
        // We'd normally use ~~inp for this, but unfortunately it also
        // converts floats to ints.
        // inp may be undefined, so careful calling replace on it.
        var res = inp && parseFloat(inp.replace(',', '.'));
        // apply sign while we're at it
        return (isNaN(res) ? 0 : res) * sign;
    }

    function positiveMomentsDifference(base, other) {
        var res = {milliseconds: 0, months: 0};

        res.months = other.month() - base.month() +
            (other.year() - base.year()) * 12;
        if (base.clone().add(res.months, 'M').isAfter(other)) {
            --res.months;
        }

        res.milliseconds = +other - +(base.clone().add(res.months, 'M'));

        return res;
    }

    function momentsDifference(base, other) {
        var res;
        other = cloneWithOffset(other, base);
        if (base.isBefore(other)) {
            res = positiveMomentsDifference(base, other);
        } else {
            res = positiveMomentsDifference(other, base);
            res.milliseconds = -res.milliseconds;
            res.months = -res.months;
        }

        return res;
    }

    function createAdder(direction, name) {
        return function (val, period) {
            var dur, tmp;
            //invert the arguments, but complain about it
            if (period !== null && !isNaN(+period)) {
                deprecateSimple(name, 'moment().' + name  + '(period, number) is deprecated. Please use moment().' + name + '(number, period).');
                tmp = val; val = period; period = tmp;
            }

            val = typeof val === 'string' ? +val : val;
            dur = create__createDuration(val, period);
            add_subtract__addSubtract(this, dur, direction);
            return this;
        };
    }

    function add_subtract__addSubtract (mom, duration, isAdding, updateOffset) {
        var milliseconds = duration._milliseconds,
            days = duration._days,
            months = duration._months;
        updateOffset = updateOffset == null ? true : updateOffset;

        if (milliseconds) {
            mom._d.setTime(+mom._d + milliseconds * isAdding);
        }
        if (days) {
            get_set__set(mom, 'Date', get_set__get(mom, 'Date') + days * isAdding);
        }
        if (months) {
            setMonth(mom, get_set__get(mom, 'Month') + months * isAdding);
        }
        if (updateOffset) {
            utils_hooks__hooks.updateOffset(mom, days || months);
        }
    }

    var add_subtract__add      = createAdder(1, 'add');
    var add_subtract__subtract = createAdder(-1, 'subtract');

    function moment_calendar__calendar (time, formats) {
        // We want to compare the start of today, vs this.
        // Getting start-of-today depends on whether we're local/utc/offset or not.
        var now = time || local__createLocal(),
            sod = cloneWithOffset(now, this).startOf('day'),
            diff = this.diff(sod, 'days', true),
            format = diff < -6 ? 'sameElse' :
                diff < -1 ? 'lastWeek' :
                diff < 0 ? 'lastDay' :
                diff < 1 ? 'sameDay' :
                diff < 2 ? 'nextDay' :
                diff < 7 ? 'nextWeek' : 'sameElse';
        return this.format(formats && formats[format] || this.localeData().calendar(format, this, local__createLocal(now)));
    }

    function clone () {
        return new Moment(this);
    }

    function isAfter (input, units) {
        var inputMs;
        units = normalizeUnits(typeof units !== 'undefined' ? units : 'millisecond');
        if (units === 'millisecond') {
            input = isMoment(input) ? input : local__createLocal(input);
            return +this > +input;
        } else {
            inputMs = isMoment(input) ? +input : +local__createLocal(input);
            return inputMs < +this.clone().startOf(units);
        }
    }

    function isBefore (input, units) {
        var inputMs;
        units = normalizeUnits(typeof units !== 'undefined' ? units : 'millisecond');
        if (units === 'millisecond') {
            input = isMoment(input) ? input : local__createLocal(input);
            return +this < +input;
        } else {
            inputMs = isMoment(input) ? +input : +local__createLocal(input);
            return +this.clone().endOf(units) < inputMs;
        }
    }

    function isBetween (from, to, units) {
        return this.isAfter(from, units) && this.isBefore(to, units);
    }

    function isSame (input, units) {
        var inputMs;
        units = normalizeUnits(units || 'millisecond');
        if (units === 'millisecond') {
            input = isMoment(input) ? input : local__createLocal(input);
            return +this === +input;
        } else {
            inputMs = +local__createLocal(input);
            return +(this.clone().startOf(units)) <= inputMs && inputMs <= +(this.clone().endOf(units));
        }
    }

    function diff (input, units, asFloat) {
        var that = cloneWithOffset(input, this),
            zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4,
            delta, output;

        units = normalizeUnits(units);

        if (units === 'year' || units === 'month' || units === 'quarter') {
            output = monthDiff(this, that);
            if (units === 'quarter') {
                output = output / 3;
            } else if (units === 'year') {
                output = output / 12;
            }
        } else {
            delta = this - that;
            output = units === 'second' ? delta / 1e3 : // 1000
                units === 'minute' ? delta / 6e4 : // 1000 * 60
                units === 'hour' ? delta / 36e5 : // 1000 * 60 * 60
                units === 'day' ? (delta - zoneDelta) / 864e5 : // 1000 * 60 * 60 * 24, negate dst
                units === 'week' ? (delta - zoneDelta) / 6048e5 : // 1000 * 60 * 60 * 24 * 7, negate dst
                delta;
        }
        return asFloat ? output : absFloor(output);
    }

    function monthDiff (a, b) {
        // difference in months
        var wholeMonthDiff = ((b.year() - a.year()) * 12) + (b.month() - a.month()),
            // b is in (anchor - 1 month, anchor + 1 month)
            anchor = a.clone().add(wholeMonthDiff, 'months'),
            anchor2, adjust;

        if (b - anchor < 0) {
            anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');
            // linear across the month
            adjust = (b - anchor) / (anchor - anchor2);
        } else {
            anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');
            // linear across the month
            adjust = (b - anchor) / (anchor2 - anchor);
        }

        return -(wholeMonthDiff + adjust);
    }

    utils_hooks__hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';

    function toString () {
        return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');
    }

    function moment_format__toISOString () {
        var m = this.clone().utc();
        if (0 < m.year() && m.year() <= 9999) {
            if ('function' === typeof Date.prototype.toISOString) {
                // native implementation is ~50x faster, use it when we can
                return this.toDate().toISOString();
            } else {
                return formatMoment(m, 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]');
            }
        } else {
            return formatMoment(m, 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]');
        }
    }

    function format (inputString) {
        var output = formatMoment(this, inputString || utils_hooks__hooks.defaultFormat);
        return this.localeData().postformat(output);
    }

    function from (time, withoutSuffix) {
        if (!this.isValid()) {
            return this.localeData().invalidDate();
        }
        return create__createDuration({to: this, from: time}).locale(this.locale()).humanize(!withoutSuffix);
    }

    function fromNow (withoutSuffix) {
        return this.from(local__createLocal(), withoutSuffix);
    }

    function to (time, withoutSuffix) {
        if (!this.isValid()) {
            return this.localeData().invalidDate();
        }
        return create__createDuration({from: this, to: time}).locale(this.locale()).humanize(!withoutSuffix);
    }

    function toNow (withoutSuffix) {
        return this.to(local__createLocal(), withoutSuffix);
    }

    function locale (key) {
        var newLocaleData;

        if (key === undefined) {
            return this._locale._abbr;
        } else {
            newLocaleData = locale_locales__getLocale(key);
            if (newLocaleData != null) {
                this._locale = newLocaleData;
            }
            return this;
        }
    }

    var lang = deprecate(
        'moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.',
        function (key) {
            if (key === undefined) {
                return this.localeData();
            } else {
                return this.locale(key);
            }
        }
    );

    function localeData () {
        return this._locale;
    }

    function startOf (units) {
        units = normalizeUnits(units);
        // the following switch intentionally omits break keywords
        // to utilize falling through the cases.
        switch (units) {
        case 'year':
            this.month(0);
            /* falls through */
        case 'quarter':
        case 'month':
            this.date(1);
            /* falls through */
        case 'week':
        case 'isoWeek':
        case 'day':
            this.hours(0);
            /* falls through */
        case 'hour':
            this.minutes(0);
            /* falls through */
        case 'minute':
            this.seconds(0);
            /* falls through */
        case 'second':
            this.milliseconds(0);
        }

        // weeks are a special case
        if (units === 'week') {
            this.weekday(0);
        }
        if (units === 'isoWeek') {
            this.isoWeekday(1);
        }

        // quarters are also special
        if (units === 'quarter') {
            this.month(Math.floor(this.month() / 3) * 3);
        }

        return this;
    }

    function endOf (units) {
        units = normalizeUnits(units);
        if (units === undefined || units === 'millisecond') {
            return this;
        }
        return this.startOf(units).add(1, (units === 'isoWeek' ? 'week' : units)).subtract(1, 'ms');
    }

    function to_type__valueOf () {
        return +this._d - ((this._offset || 0) * 60000);
    }

    function unix () {
        return Math.floor(+this / 1000);
    }

    function toDate () {
        return this._offset ? new Date(+this) : this._d;
    }

    function toArray () {
        var m = this;
        return [m.year(), m.month(), m.date(), m.hour(), m.minute(), m.second(), m.millisecond()];
    }

    function toObject () {
        var m = this;
        return {
            years: m.year(),
            months: m.month(),
            date: m.date(),
            hours: m.hours(),
            minutes: m.minutes(),
            seconds: m.seconds(),
            milliseconds: m.milliseconds()
        };
    }

    function moment_valid__isValid () {
        return valid__isValid(this);
    }

    function parsingFlags () {
        return extend({}, getParsingFlags(this));
    }

    function invalidAt () {
        return getParsingFlags(this).overflow;
    }

    addFormatToken(0, ['gg', 2], 0, function () {
        return this.weekYear() % 100;
    });

    addFormatToken(0, ['GG', 2], 0, function () {
        return this.isoWeekYear() % 100;
    });

    function addWeekYearFormatToken (token, getter) {
        addFormatToken(0, [token, token.length], 0, getter);
    }

    addWeekYearFormatToken('gggg',     'weekYear');
    addWeekYearFormatToken('ggggg',    'weekYear');
    addWeekYearFormatToken('GGGG',  'isoWeekYear');
    addWeekYearFormatToken('GGGGG', 'isoWeekYear');

    // ALIASES

    addUnitAlias('weekYear', 'gg');
    addUnitAlias('isoWeekYear', 'GG');

    // PARSING

    addRegexToken('G',      matchSigned);
    addRegexToken('g',      matchSigned);
    addRegexToken('GG',     match1to2, match2);
    addRegexToken('gg',     match1to2, match2);
    addRegexToken('GGGG',   match1to4, match4);
    addRegexToken('gggg',   match1to4, match4);
    addRegexToken('GGGGG',  match1to6, match6);
    addRegexToken('ggggg',  match1to6, match6);

    addWeekParseToken(['gggg', 'ggggg', 'GGGG', 'GGGGG'], function (input, week, config, token) {
        week[token.substr(0, 2)] = toInt(input);
    });

    addWeekParseToken(['gg', 'GG'], function (input, week, config, token) {
        week[token] = utils_hooks__hooks.parseTwoDigitYear(input);
    });

    // HELPERS

    function weeksInYear(year, dow, doy) {
        return weekOfYear(local__createLocal([year, 11, 31 + dow - doy]), dow, doy).week;
    }

    // MOMENTS

    function getSetWeekYear (input) {
        var year = weekOfYear(this, this.localeData()._week.dow, this.localeData()._week.doy).year;
        return input == null ? year : this.add((input - year), 'y');
    }

    function getSetISOWeekYear (input) {
        var year = weekOfYear(this, 1, 4).year;
        return input == null ? year : this.add((input - year), 'y');
    }

    function getISOWeeksInYear () {
        return weeksInYear(this.year(), 1, 4);
    }

    function getWeeksInYear () {
        var weekInfo = this.localeData()._week;
        return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
    }

    addFormatToken('Q', 0, 0, 'quarter');

    // ALIASES

    addUnitAlias('quarter', 'Q');

    // PARSING

    addRegexToken('Q', match1);
    addParseToken('Q', function (input, array) {
        array[MONTH] = (toInt(input) - 1) * 3;
    });

    // MOMENTS

    function getSetQuarter (input) {
        return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);
    }

    addFormatToken('D', ['DD', 2], 'Do', 'date');

    // ALIASES

    addUnitAlias('date', 'D');

    // PARSING

    addRegexToken('D',  match1to2);
    addRegexToken('DD', match1to2, match2);
    addRegexToken('Do', function (isStrict, locale) {
        return isStrict ? locale._ordinalParse : locale._ordinalParseLenient;
    });

    addParseToken(['D', 'DD'], DATE);
    addParseToken('Do', function (input, array) {
        array[DATE] = toInt(input.match(match1to2)[0], 10);
    });

    // MOMENTS

    var getSetDayOfMonth = makeGetSet('Date', true);

    addFormatToken('d', 0, 'do', 'day');

    addFormatToken('dd', 0, 0, function (format) {
        return this.localeData().weekdaysMin(this, format);
    });

    addFormatToken('ddd', 0, 0, function (format) {
        return this.localeData().weekdaysShort(this, format);
    });

    addFormatToken('dddd', 0, 0, function (format) {
        return this.localeData().weekdays(this, format);
    });

    addFormatToken('e', 0, 0, 'weekday');
    addFormatToken('E', 0, 0, 'isoWeekday');

    // ALIASES

    addUnitAlias('day', 'd');
    addUnitAlias('weekday', 'e');
    addUnitAlias('isoWeekday', 'E');

    // PARSING

    addRegexToken('d',    match1to2);
    addRegexToken('e',    match1to2);
    addRegexToken('E',    match1to2);
    addRegexToken('dd',   matchWord);
    addRegexToken('ddd',  matchWord);
    addRegexToken('dddd', matchWord);

    addWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config) {
        var weekday = config._locale.weekdaysParse(input);
        // if we didn't get a weekday name, mark the date as invalid
        if (weekday != null) {
            week.d = weekday;
        } else {
            getParsingFlags(config).invalidWeekday = input;
        }
    });

    addWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) {
        week[token] = toInt(input);
    });

    // HELPERS

    function parseWeekday(input, locale) {
        if (typeof input !== 'string') {
            return input;
        }

        if (!isNaN(input)) {
            return parseInt(input, 10);
        }

        input = locale.weekdaysParse(input);
        if (typeof input === 'number') {
            return input;
        }

        return null;
    }

    // LOCALES

    var defaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_');
    function localeWeekdays (m) {
        return this._weekdays[m.day()];
    }

    var defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_');
    function localeWeekdaysShort (m) {
        return this._weekdaysShort[m.day()];
    }

    var defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_');
    function localeWeekdaysMin (m) {
        return this._weekdaysMin[m.day()];
    }

    function localeWeekdaysParse (weekdayName) {
        var i, mom, regex;

        this._weekdaysParse = this._weekdaysParse || [];

        for (i = 0; i < 7; i++) {
            // make the regex if we don't have it already
            if (!this._weekdaysParse[i]) {
                mom = local__createLocal([2000, 1]).day(i);
                regex = '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, '');
                this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
            }
            // test the regex
            if (this._weekdaysParse[i].test(weekdayName)) {
                return i;
            }
        }
    }

    // MOMENTS

    function getSetDayOfWeek (input) {
        var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
        if (input != null) {
            input = parseWeekday(input, this.localeData());
            return this.add(input - day, 'd');
        } else {
            return day;
        }
    }

    function getSetLocaleDayOfWeek (input) {
        var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
        return input == null ? weekday : this.add(input - weekday, 'd');
    }

    function getSetISODayOfWeek (input) {
        // behaves the same as moment#day except
        // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)
        // as a setter, sunday should belong to the previous week.
        return input == null ? this.day() || 7 : this.day(this.day() % 7 ? input : input - 7);
    }

    addFormatToken('H', ['HH', 2], 0, 'hour');
    addFormatToken('h', ['hh', 2], 0, function () {
        return this.hours() % 12 || 12;
    });

    function meridiem (token, lowercase) {
        addFormatToken(token, 0, 0, function () {
            return this.localeData().meridiem(this.hours(), this.minutes(), lowercase);
        });
    }

    meridiem('a', true);
    meridiem('A', false);

    // ALIASES

    addUnitAlias('hour', 'h');

    // PARSING

    function matchMeridiem (isStrict, locale) {
        return locale._meridiemParse;
    }

    addRegexToken('a',  matchMeridiem);
    addRegexToken('A',  matchMeridiem);
    addRegexToken('H',  match1to2);
    addRegexToken('h',  match1to2);
    addRegexToken('HH', match1to2, match2);
    addRegexToken('hh', match1to2, match2);

    addParseToken(['H', 'HH'], HOUR);
    addParseToken(['a', 'A'], function (input, array, config) {
        config._isPm = config._locale.isPM(input);
        config._meridiem = input;
    });
    addParseToken(['h', 'hh'], function (input, array, config) {
        array[HOUR] = toInt(input);
        getParsingFlags(config).bigHour = true;
    });

    // LOCALES

    function localeIsPM (input) {
        // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays
        // Using charAt should be more compatible.
        return ((input + '').toLowerCase().charAt(0) === 'p');
    }

    var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i;
    function localeMeridiem (hours, minutes, isLower) {
        if (hours > 11) {
            return isLower ? 'pm' : 'PM';
        } else {
            return isLower ? 'am' : 'AM';
        }
    }


    // MOMENTS

    // Setting the hour should keep the time, because the user explicitly
    // specified which hour he wants. So trying to maintain the same hour (in
    // a new timezone) makes sense. Adding/subtracting hours does not follow
    // this rule.
    var getSetHour = makeGetSet('Hours', true);

    addFormatToken('m', ['mm', 2], 0, 'minute');

    // ALIASES

    addUnitAlias('minute', 'm');

    // PARSING

    addRegexToken('m',  match1to2);
    addRegexToken('mm', match1to2, match2);
    addParseToken(['m', 'mm'], MINUTE);

    // MOMENTS

    var getSetMinute = makeGetSet('Minutes', false);

    addFormatToken('s', ['ss', 2], 0, 'second');

    // ALIASES

    addUnitAlias('second', 's');

    // PARSING

    addRegexToken('s',  match1to2);
    addRegexToken('ss', match1to2, match2);
    addParseToken(['s', 'ss'], SECOND);

    // MOMENTS

    var getSetSecond = makeGetSet('Seconds', false);

    addFormatToken('S', 0, 0, function () {
        return ~~(this.millisecond() / 100);
    });

    addFormatToken(0, ['SS', 2], 0, function () {
        return ~~(this.millisecond() / 10);
    });

    addFormatToken(0, ['SSS', 3], 0, 'millisecond');
    addFormatToken(0, ['SSSS', 4], 0, function () {
        return this.millisecond() * 10;
    });
    addFormatToken(0, ['SSSSS', 5], 0, function () {
        return this.millisecond() * 100;
    });
    addFormatToken(0, ['SSSSSS', 6], 0, function () {
        return this.millisecond() * 1000;
    });
    addFormatToken(0, ['SSSSSSS', 7], 0, function () {
        return this.millisecond() * 10000;
    });
    addFormatToken(0, ['SSSSSSSS', 8], 0, function () {
        return this.millisecond() * 100000;
    });
    addFormatToken(0, ['SSSSSSSSS', 9], 0, function () {
        return this.millisecond() * 1000000;
    });


    // ALIASES

    addUnitAlias('millisecond', 'ms');

    // PARSING

    addRegexToken('S',    match1to3, match1);
    addRegexToken('SS',   match1to3, match2);
    addRegexToken('SSS',  match1to3, match3);

    var token;
    for (token = 'SSSS'; token.length <= 9; token += 'S') {
        addRegexToken(token, matchUnsigned);
    }

    function parseMs(input, array) {
        array[MILLISECOND] = toInt(('0.' + input) * 1000);
    }

    for (token = 'S'; token.length <= 9; token += 'S') {
        addParseToken(token, parseMs);
    }
    // MOMENTS

    var getSetMillisecond = makeGetSet('Milliseconds', false);

    addFormatToken('z',  0, 0, 'zoneAbbr');
    addFormatToken('zz', 0, 0, 'zoneName');

    // MOMENTS

    function getZoneAbbr () {
        return this._isUTC ? 'UTC' : '';
    }

    function getZoneName () {
        return this._isUTC ? 'Coordinated Universal Time' : '';
    }

    var momentPrototype__proto = Moment.prototype;

    momentPrototype__proto.add          = add_subtract__add;
    momentPrototype__proto.calendar     = moment_calendar__calendar;
    momentPrototype__proto.clone        = clone;
    momentPrototype__proto.diff         = diff;
    momentPrototype__proto.endOf        = endOf;
    momentPrototype__proto.format       = format;
    momentPrototype__proto.from         = from;
    momentPrototype__proto.fromNow      = fromNow;
    momentPrototype__proto.to           = to;
    momentPrototype__proto.toNow        = toNow;
    momentPrototype__proto.get          = getSet;
    momentPrototype__proto.invalidAt    = invalidAt;
    momentPrototype__proto.isAfter      = isAfter;
    momentPrototype__proto.isBefore     = isBefore;
    momentPrototype__proto.isBetween    = isBetween;
    momentPrototype__proto.isSame       = isSame;
    momentPrototype__proto.isValid      = moment_valid__isValid;
    momentPrototype__proto.lang         = lang;
    momentPrototype__proto.locale       = locale;
    momentPrototype__proto.localeData   = localeData;
    momentPrototype__proto.max          = prototypeMax;
    momentPrototype__proto.min          = prototypeMin;
    momentPrototype__proto.parsingFlags = parsingFlags;
    momentPrototype__proto.set          = getSet;
    momentPrototype__proto.startOf      = startOf;
    momentPrototype__proto.subtract     = add_subtract__subtract;
    momentPrototype__proto.toArray      = toArray;
    momentPrototype__proto.toObject     = toObject;
    momentPrototype__proto.toDate       = toDate;
    momentPrototype__proto.toISOString  = moment_format__toISOString;
    momentPrototype__proto.toJSON       = moment_format__toISOString;
    momentPrototype__proto.toString     = toString;
    momentPrototype__proto.unix         = unix;
    momentPrototype__proto.valueOf      = to_type__valueOf;

    // Year
    momentPrototype__proto.year       = getSetYear;
    momentPrototype__proto.isLeapYear = getIsLeapYear;

    // Week Year
    momentPrototype__proto.weekYear    = getSetWeekYear;
    momentPrototype__proto.isoWeekYear = getSetISOWeekYear;

    // Quarter
    momentPrototype__proto.quarter = momentPrototype__proto.quarters = getSetQuarter;

    // Month
    momentPrototype__proto.month       = getSetMonth;
    momentPrototype__proto.daysInMonth = getDaysInMonth;

    // Week
    momentPrototype__proto.week           = momentPrototype__proto.weeks        = getSetWeek;
    momentPrototype__proto.isoWeek        = momentPrototype__proto.isoWeeks     = getSetISOWeek;
    momentPrototype__proto.weeksInYear    = getWeeksInYear;
    momentPrototype__proto.isoWeeksInYear = getISOWeeksInYear;

    // Day
    momentPrototype__proto.date       = getSetDayOfMonth;
    momentPrototype__proto.day        = momentPrototype__proto.days             = getSetDayOfWeek;
    momentPrototype__proto.weekday    = getSetLocaleDayOfWeek;
    momentPrototype__proto.isoWeekday = getSetISODayOfWeek;
    momentPrototype__proto.dayOfYear  = getSetDayOfYear;

    // Hour
    momentPrototype__proto.hour = momentPrototype__proto.hours = getSetHour;

    // Minute
    momentPrototype__proto.minute = momentPrototype__proto.minutes = getSetMinute;

    // Second
    momentPrototype__proto.second = momentPrototype__proto.seconds = getSetSecond;

    // Millisecond
    momentPrototype__proto.millisecond = momentPrototype__proto.milliseconds = getSetMillisecond;

    // Offset
    momentPrototype__proto.utcOffset            = getSetOffset;
    momentPrototype__proto.utc                  = setOffsetToUTC;
    momentPrototype__proto.local                = setOffsetToLocal;
    momentPrototype__proto.parseZone            = setOffsetToParsedOffset;
    momentPrototype__proto.hasAlignedHourOffset = hasAlignedHourOffset;
    momentPrototype__proto.isDST                = isDaylightSavingTime;
    momentPrototype__proto.isDSTShifted         = isDaylightSavingTimeShifted;
    momentPrototype__proto.isLocal              = isLocal;
    momentPrototype__proto.isUtcOffset          = isUtcOffset;
    momentPrototype__proto.isUtc                = isUtc;
    momentPrototype__proto.isUTC                = isUtc;

    // Timezone
    momentPrototype__proto.zoneAbbr = getZoneAbbr;
    momentPrototype__proto.zoneName = getZoneName;

    // Deprecations
    momentPrototype__proto.dates  = deprecate('dates accessor is deprecated. Use date instead.', getSetDayOfMonth);
    momentPrototype__proto.months = deprecate('months accessor is deprecated. Use month instead', getSetMonth);
    momentPrototype__proto.years  = deprecate('years accessor is deprecated. Use year instead', getSetYear);
    momentPrototype__proto.zone   = deprecate('moment().zone is deprecated, use moment().utcOffset instead. https://github.com/moment/moment/issues/1779', getSetZone);

    var momentPrototype = momentPrototype__proto;

    function moment__createUnix (input) {
        return local__createLocal(input * 1000);
    }

    function moment__createInZone () {
        return local__createLocal.apply(null, arguments).parseZone();
    }

    var defaultCalendar = {
        sameDay : '[Today at] LT',
        nextDay : '[Tomorrow at] LT',
        nextWeek : 'dddd [at] LT',
        lastDay : '[Yesterday at] LT',
        lastWeek : '[Last] dddd [at] LT',
        sameElse : 'L'
    };

    function locale_calendar__calendar (key, mom, now) {
        var output = this._calendar[key];
        return typeof output === 'function' ? output.call(mom, now) : output;
    }

    var defaultLongDateFormat = {
        LTS  : 'h:mm:ss A',
        LT   : 'h:mm A',
        L    : 'MM/DD/YYYY',
        LL   : 'MMMM D, YYYY',
        LLL  : 'MMMM D, YYYY h:mm A',
        LLLL : 'dddd, MMMM D, YYYY h:mm A'
    };

    function longDateFormat (key) {
        var format = this._longDateFormat[key],
            formatUpper = this._longDateFormat[key.toUpperCase()];

        if (format || !formatUpper) {
            return format;
        }

        this._longDateFormat[key] = formatUpper.replace(/MMMM|MM|DD|dddd/g, function (val) {
            return val.slice(1);
        });

        return this._longDateFormat[key];
    }

    var defaultInvalidDate = 'Invalid date';

    function invalidDate () {
        return this._invalidDate;
    }

    var defaultOrdinal = '%d';
    var defaultOrdinalParse = /\d{1,2}/;

    function ordinal (number) {
        return this._ordinal.replace('%d', number);
    }

    function preParsePostFormat (string) {
        return string;
    }

    var defaultRelativeTime = {
        future : 'in %s',
        past   : '%s ago',
        s  : 'a few seconds',
        m  : 'a minute',
        mm : '%d minutes',
        h  : 'an hour',
        hh : '%d hours',
        d  : 'a day',
        dd : '%d days',
        M  : 'a month',
        MM : '%d months',
        y  : 'a year',
        yy : '%d years'
    };

    function relative__relativeTime (number, withoutSuffix, string, isFuture) {
        var output = this._relativeTime[string];
        return (typeof output === 'function') ?
            output(number, withoutSuffix, string, isFuture) :
            output.replace(/%d/i, number);
    }

    function pastFuture (diff, output) {
        var format = this._relativeTime[diff > 0 ? 'future' : 'past'];
        return typeof format === 'function' ? format(output) : format.replace(/%s/i, output);
    }

    function locale_set__set (config) {
        var prop, i;
        for (i in config) {
            prop = config[i];
            if (typeof prop === 'function') {
                this[i] = prop;
            } else {
                this['_' + i] = prop;
            }
        }
        // Lenient ordinal parsing accepts just a number in addition to
        // number + (possibly) stuff coming from _ordinalParseLenient.
        this._ordinalParseLenient = new RegExp(this._ordinalParse.source + '|' + (/\d{1,2}/).source);
    }

    var prototype__proto = Locale.prototype;

    prototype__proto._calendar       = defaultCalendar;
    prototype__proto.calendar        = locale_calendar__calendar;
    prototype__proto._longDateFormat = defaultLongDateFormat;
    prototype__proto.longDateFormat  = longDateFormat;
    prototype__proto._invalidDate    = defaultInvalidDate;
    prototype__proto.invalidDate     = invalidDate;
    prototype__proto._ordinal        = defaultOrdinal;
    prototype__proto.ordinal         = ordinal;
    prototype__proto._ordinalParse   = defaultOrdinalParse;
    prototype__proto.preparse        = preParsePostFormat;
    prototype__proto.postformat      = preParsePostFormat;
    prototype__proto._relativeTime   = defaultRelativeTime;
    prototype__proto.relativeTime    = relative__relativeTime;
    prototype__proto.pastFuture      = pastFuture;
    prototype__proto.set             = locale_set__set;

    // Month
    prototype__proto.months       =        localeMonths;
    prototype__proto._months      = defaultLocaleMonths;
    prototype__proto.monthsShort  =        localeMonthsShort;
    prototype__proto._monthsShort = defaultLocaleMonthsShort;
    prototype__proto.monthsParse  =        localeMonthsParse;

    // Week
    prototype__proto.week = localeWeek;
    prototype__proto._week = defaultLocaleWeek;
    prototype__proto.firstDayOfYear = localeFirstDayOfYear;
    prototype__proto.firstDayOfWeek = localeFirstDayOfWeek;

    // Day of Week
    prototype__proto.weekdays       =        localeWeekdays;
    prototype__proto._weekdays      = defaultLocaleWeekdays;
    prototype__proto.weekdaysMin    =        localeWeekdaysMin;
    prototype__proto._weekdaysMin   = defaultLocaleWeekdaysMin;
    prototype__proto.weekdaysShort  =        localeWeekdaysShort;
    prototype__proto._weekdaysShort = defaultLocaleWeekdaysShort;
    prototype__proto.weekdaysParse  =        localeWeekdaysParse;

    // Hours
    prototype__proto.isPM = localeIsPM;
    prototype__proto._meridiemParse = defaultLocaleMeridiemParse;
    prototype__proto.meridiem = localeMeridiem;

    function lists__get (format, index, field, setter) {
        var locale = locale_locales__getLocale();
        var utc = create_utc__createUTC().set(setter, index);
        return locale[field](utc, format);
    }

    function list (format, index, field, count, setter) {
        if (typeof format === 'number') {
            index = format;
            format = undefined;
        }

        format = format || '';

        if (index != null) {
            return lists__get(format, index, field, setter);
        }

        var i;
        var out = [];
        for (i = 0; i < count; i++) {
            out[i] = lists__get(format, i, field, setter);
        }
        return out;
    }

    function lists__listMonths (format, index) {
        return list(format, index, 'months', 12, 'month');
    }

    function lists__listMonthsShort (format, index) {
        return list(format, index, 'monthsShort', 12, 'month');
    }

    function lists__listWeekdays (format, index) {
        return list(format, index, 'weekdays', 7, 'day');
    }

    function lists__listWeekdaysShort (format, index) {
        return list(format, index, 'weekdaysShort', 7, 'day');
    }

    function lists__listWeekdaysMin (format, index) {
        return list(format, index, 'weekdaysMin', 7, 'day');
    }

    locale_locales__getSetGlobalLocale('en', {
        ordinalParse: /\d{1,2}(th|st|nd|rd)/,
        ordinal : function (number) {
            var b = number % 10,
                output = (toInt(number % 100 / 10) === 1) ? 'th' :
                (b === 1) ? 'st' :
                (b === 2) ? 'nd' :
                (b === 3) ? 'rd' : 'th';
            return number + output;
        }
    });

    // Side effect imports
    utils_hooks__hooks.lang = deprecate('moment.lang is deprecated. Use moment.locale instead.', locale_locales__getSetGlobalLocale);
    utils_hooks__hooks.langData = deprecate('moment.langData is deprecated. Use moment.localeData instead.', locale_locales__getLocale);

    var mathAbs = Math.abs;

    function duration_abs__abs () {
        var data           = this._data;

        this._milliseconds = mathAbs(this._milliseconds);
        this._days         = mathAbs(this._days);
        this._months       = mathAbs(this._months);

        data.milliseconds  = mathAbs(data.milliseconds);
        data.seconds       = mathAbs(data.seconds);
        data.minutes       = mathAbs(data.minutes);
        data.hours         = mathAbs(data.hours);
        data.months        = mathAbs(data.months);
        data.years         = mathAbs(data.years);

        return this;
    }

    function duration_add_subtract__addSubtract (duration, input, value, direction) {
        var other = create__createDuration(input, value);

        duration._milliseconds += direction * other._milliseconds;
        duration._days         += direction * other._days;
        duration._months       += direction * other._months;

        return duration._bubble();
    }

    // supports only 2.0-style add(1, 's') or add(duration)
    function duration_add_subtract__add (input, value) {
        return duration_add_subtract__addSubtract(this, input, value, 1);
    }

    // supports only 2.0-style subtract(1, 's') or subtract(duration)
    function duration_add_subtract__subtract (input, value) {
        return duration_add_subtract__addSubtract(this, input, value, -1);
    }

    function absCeil (number) {
        if (number < 0) {
            return Math.floor(number);
        } else {
            return Math.ceil(number);
        }
    }

    function bubble () {
        var milliseconds = this._milliseconds;
        var days         = this._days;
        var months       = this._months;
        var data         = this._data;
        var seconds, minutes, hours, years, monthsFromDays;

        // if we have a mix of positive and negative values, bubble down first
        // check: https://github.com/moment/moment/issues/2166
        if (!((milliseconds >= 0 && days >= 0 && months >= 0) ||
                (milliseconds <= 0 && days <= 0 && months <= 0))) {
            milliseconds += absCeil(monthsToDays(months) + days) * 864e5;
            days = 0;
            months = 0;
        }

        // The following code bubbles up values, see the tests for
        // examples of what that means.
        data.milliseconds = milliseconds % 1000;

        seconds           = absFloor(milliseconds / 1000);
        data.seconds      = seconds % 60;

        minutes           = absFloor(seconds / 60);
        data.minutes      = minutes % 60;

        hours             = absFloor(minutes / 60);
        data.hours        = hours % 24;

        days += absFloor(hours / 24);

        // convert days to months
        monthsFromDays = absFloor(daysToMonths(days));
        months += monthsFromDays;
        days -= absCeil(monthsToDays(monthsFromDays));

        // 12 months -> 1 year
        years = absFloor(months / 12);
        months %= 12;

        data.days   = days;
        data.months = months;
        data.years  = years;

        return this;
    }

    function daysToMonths (days) {
        // 400 years have 146097 days (taking into account leap year rules)
        // 400 years have 12 months === 4800
        return days * 4800 / 146097;
    }

    function monthsToDays (months) {
        // the reverse of daysToMonths
        return months * 146097 / 4800;
    }

    function as (units) {
        var days;
        var months;
        var milliseconds = this._milliseconds;

        units = normalizeUnits(units);

        if (units === 'month' || units === 'year') {
            days   = this._days   + milliseconds / 864e5;
            months = this._months + daysToMonths(days);
            return units === 'month' ? months : months / 12;
        } else {
            // handle milliseconds separately because of floating point math errors (issue #1867)
            days = this._days + Math.round(monthsToDays(this._months));
            switch (units) {
                case 'week'   : return days / 7     + milliseconds / 6048e5;
                case 'day'    : return days         + milliseconds / 864e5;
                case 'hour'   : return days * 24    + milliseconds / 36e5;
                case 'minute' : return days * 1440  + milliseconds / 6e4;
                case 'second' : return days * 86400 + milliseconds / 1000;
                // Math.floor prevents floating point math errors here
                case 'millisecond': return Math.floor(days * 864e5) + milliseconds;
                default: throw new Error('Unknown unit ' + units);
            }
        }
    }

    // TODO: Use this.as('ms')?
    function duration_as__valueOf () {
        return (
            this._milliseconds +
            this._days * 864e5 +
            (this._months % 12) * 2592e6 +
            toInt(this._months / 12) * 31536e6
        );
    }

    function makeAs (alias) {
        return function () {
            return this.as(alias);
        };
    }

    var asMilliseconds = makeAs('ms');
    var asSeconds      = makeAs('s');
    var asMinutes      = makeAs('m');
    var asHours        = makeAs('h');
    var asDays         = makeAs('d');
    var asWeeks        = makeAs('w');
    var asMonths       = makeAs('M');
    var asYears        = makeAs('y');

    function duration_get__get (units) {
        units = normalizeUnits(units);
        return this[units + 's']();
    }

    function makeGetter(name) {
        return function () {
            return this._data[name];
        };
    }

    var milliseconds = makeGetter('milliseconds');
    var seconds      = makeGetter('seconds');
    var minutes      = makeGetter('minutes');
    var hours        = makeGetter('hours');
    var days         = makeGetter('days');
    var months       = makeGetter('months');
    var years        = makeGetter('years');

    function weeks () {
        return absFloor(this.days() / 7);
    }

    var round = Math.round;
    var thresholds = {
        s: 45,  // seconds to minute
        m: 45,  // minutes to hour
        h: 22,  // hours to day
        d: 26,  // days to month
        M: 11   // months to year
    };

    // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize
    function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {
        return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
    }

    function duration_humanize__relativeTime (posNegDuration, withoutSuffix, locale) {
        var duration = create__createDuration(posNegDuration).abs();
        var seconds  = round(duration.as('s'));
        var minutes  = round(duration.as('m'));
        var hours    = round(duration.as('h'));
        var days     = round(duration.as('d'));
        var months   = round(duration.as('M'));
        var years    = round(duration.as('y'));

        var a = seconds < thresholds.s && ['s', seconds]  ||
                minutes === 1          && ['m']           ||
                minutes < thresholds.m && ['mm', minutes] ||
                hours   === 1          && ['h']           ||
                hours   < thresholds.h && ['hh', hours]   ||
                days    === 1          && ['d']           ||
                days    < thresholds.d && ['dd', days]    ||
                months  === 1          && ['M']           ||
                months  < thresholds.M && ['MM', months]  ||
                years   === 1          && ['y']           || ['yy', years];

        a[2] = withoutSuffix;
        a[3] = +posNegDuration > 0;
        a[4] = locale;
        return substituteTimeAgo.apply(null, a);
    }

    // This function allows you to set a threshold for relative time strings
    function duration_humanize__getSetRelativeTimeThreshold (threshold, limit) {
        if (thresholds[threshold] === undefined) {
            return false;
        }
        if (limit === undefined) {
            return thresholds[threshold];
        }
        thresholds[threshold] = limit;
        return true;
    }

    function humanize (withSuffix) {
        var locale = this.localeData();
        var output = duration_humanize__relativeTime(this, !withSuffix, locale);

        if (withSuffix) {
            output = locale.pastFuture(+this, output);
        }

        return locale.postformat(output);
    }

    var iso_string__abs = Math.abs;

    function iso_string__toISOString() {
        // for ISO strings we do not use the normal bubbling rules:
        //  * milliseconds bubble up until they become hours
        //  * days do not bubble at all
        //  * months bubble up until they become years
        // This is because there is no context-free conversion between hours and days
        // (think of clock changes)
        // and also not between days and months (28-31 days per month)
        var seconds = iso_string__abs(this._milliseconds) / 1000;
        var days         = iso_string__abs(this._days);
        var months       = iso_string__abs(this._months);
        var minutes, hours, years;

        // 3600 seconds -> 60 minutes -> 1 hour
        minutes           = absFloor(seconds / 60);
        hours             = absFloor(minutes / 60);
        seconds %= 60;
        minutes %= 60;

        // 12 months -> 1 year
        years  = absFloor(months / 12);
        months %= 12;


        // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js
        var Y = years;
        var M = months;
        var D = days;
        var h = hours;
        var m = minutes;
        var s = seconds;
        var total = this.asSeconds();

        if (!total) {
            // this is the same as C#'s (Noda) and python (isodate)...
            // but not other JS (goog.date)
            return 'P0D';
        }

        return (total < 0 ? '-' : '') +
            'P' +
            (Y ? Y + 'Y' : '') +
            (M ? M + 'M' : '') +
            (D ? D + 'D' : '') +
            ((h || m || s) ? 'T' : '') +
            (h ? h + 'H' : '') +
            (m ? m + 'M' : '') +
            (s ? s + 'S' : '');
    }

    var duration_prototype__proto = Duration.prototype;

    duration_prototype__proto.abs            = duration_abs__abs;
    duration_prototype__proto.add            = duration_add_subtract__add;
    duration_prototype__proto.subtract       = duration_add_subtract__subtract;
    duration_prototype__proto.as             = as;
    duration_prototype__proto.asMilliseconds = asMilliseconds;
    duration_prototype__proto.asSeconds      = asSeconds;
    duration_prototype__proto.asMinutes      = asMinutes;
    duration_prototype__proto.asHours        = asHours;
    duration_prototype__proto.asDays         = asDays;
    duration_prototype__proto.asWeeks        = asWeeks;
    duration_prototype__proto.asMonths       = asMonths;
    duration_prototype__proto.asYears        = asYears;
    duration_prototype__proto.valueOf        = duration_as__valueOf;
    duration_prototype__proto._bubble        = bubble;
    duration_prototype__proto.get            = duration_get__get;
    duration_prototype__proto.milliseconds   = milliseconds;
    duration_prototype__proto.seconds        = seconds;
    duration_prototype__proto.minutes        = minutes;
    duration_prototype__proto.hours          = hours;
    duration_prototype__proto.days           = days;
    duration_prototype__proto.weeks          = weeks;
    duration_prototype__proto.months         = months;
    duration_prototype__proto.years          = years;
    duration_prototype__proto.humanize       = humanize;
    duration_prototype__proto.toISOString    = iso_string__toISOString;
    duration_prototype__proto.toString       = iso_string__toISOString;
    duration_prototype__proto.toJSON         = iso_string__toISOString;
    duration_prototype__proto.locale         = locale;
    duration_prototype__proto.localeData     = localeData;

    // Deprecations
    duration_prototype__proto.toIsoString = deprecate('toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)', iso_string__toISOString);
    duration_prototype__proto.lang = lang;

    // Side effect imports

    addFormatToken('X', 0, 0, 'unix');
    addFormatToken('x', 0, 0, 'valueOf');

    // PARSING

    addRegexToken('x', matchSigned);
    addRegexToken('X', matchTimestamp);
    addParseToken('X', function (input, array, config) {
        config._d = new Date(parseFloat(input, 10) * 1000);
    });
    addParseToken('x', function (input, array, config) {
        config._d = new Date(toInt(input));
    });

    // Side effect imports


    utils_hooks__hooks.version = '2.10.6';

    setHookCallback(local__createLocal);

    utils_hooks__hooks.fn                    = momentPrototype;
    utils_hooks__hooks.min                   = min;
    utils_hooks__hooks.max                   = max;
    utils_hooks__hooks.utc                   = create_utc__createUTC;
    utils_hooks__hooks.unix                  = moment__createUnix;
    utils_hooks__hooks.months                = lists__listMonths;
    utils_hooks__hooks.isDate                = isDate;
    utils_hooks__hooks.locale                = locale_locales__getSetGlobalLocale;
    utils_hooks__hooks.invalid               = valid__createInvalid;
    utils_hooks__hooks.duration              = create__createDuration;
    utils_hooks__hooks.isMoment              = isMoment;
    utils_hooks__hooks.weekdays              = lists__listWeekdays;
    utils_hooks__hooks.parseZone             = moment__createInZone;
    utils_hooks__hooks.localeData            = locale_locales__getLocale;
    utils_hooks__hooks.isDuration            = isDuration;
    utils_hooks__hooks.monthsShort           = lists__listMonthsShort;
    utils_hooks__hooks.weekdaysMin           = lists__listWeekdaysMin;
    utils_hooks__hooks.defineLocale          = defineLocale;
    utils_hooks__hooks.weekdaysShort         = lists__listWeekdaysShort;
    utils_hooks__hooks.normalizeUnits        = normalizeUnits;
    utils_hooks__hooks.relativeTimeThreshold = duration_humanize__getSetRelativeTimeThreshold;

    var _moment = utils_hooks__hooks;

    return _moment;

}));
},{}],"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\process\\browser.js":[function(require,module,exports){
// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\util\\support\\isBufferBrowser.js":[function(require,module,exports){
module.exports = function isBuffer(arg) {
  return arg && typeof arg === 'object'
    && typeof arg.copy === 'function'
    && typeof arg.fill === 'function'
    && typeof arg.readUInt8 === 'function';
}
},{}],"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\util\\util.js":[function(require,module,exports){
(function (process,global){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var formatRegExp = /%[sdj%]/g;
exports.format = function(f) {
  if (!isString(f)) {
    var objects = [];
    for (var i = 0; i < arguments.length; i++) {
      objects.push(inspect(arguments[i]));
    }
    return objects.join(' ');
  }

  var i = 1;
  var args = arguments;
  var len = args.length;
  var str = String(f).replace(formatRegExp, function(x) {
    if (x === '%%') return '%';
    if (i >= len) return x;
    switch (x) {
      case '%s': return String(args[i++]);
      case '%d': return Number(args[i++]);
      case '%j':
        try {
          return JSON.stringify(args[i++]);
        } catch (_) {
          return '[Circular]';
        }
      default:
        return x;
    }
  });
  for (var x = args[i]; i < len; x = args[++i]) {
    if (isNull(x) || !isObject(x)) {
      str += ' ' + x;
    } else {
      str += ' ' + inspect(x);
    }
  }
  return str;
};


// Mark that a method should not be used.
// Returns a modified function which warns once by default.
// If --no-deprecation is set, then it is a no-op.
exports.deprecate = function(fn, msg) {
  // Allow for deprecating things in the process of starting up.
  if (isUndefined(global.process)) {
    return function() {
      return exports.deprecate(fn, msg).apply(this, arguments);
    };
  }

  if (process.noDeprecation === true) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (process.throwDeprecation) {
        throw new Error(msg);
      } else if (process.traceDeprecation) {
        console.trace(msg);
      } else {
        console.error(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
};


var debugs = {};
var debugEnviron;
exports.debuglog = function(set) {
  if (isUndefined(debugEnviron))
    debugEnviron = process.env.NODE_DEBUG || '';
  set = set.toUpperCase();
  if (!debugs[set]) {
    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
      var pid = process.pid;
      debugs[set] = function() {
        var msg = exports.format.apply(exports, arguments);
        console.error('%s %d: %s', set, pid, msg);
      };
    } else {
      debugs[set] = function() {};
    }
  }
  return debugs[set];
};


/**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Object} opts Optional options object that alters the output.
 */
/* legacy: obj, showHidden, depth, colors*/
function inspect(obj, opts) {
  // default options
  var ctx = {
    seen: [],
    stylize: stylizeNoColor
  };
  // legacy...
  if (arguments.length >= 3) ctx.depth = arguments[2];
  if (arguments.length >= 4) ctx.colors = arguments[3];
  if (isBoolean(opts)) {
    // legacy...
    ctx.showHidden = opts;
  } else if (opts) {
    // got an "options" object
    exports._extend(ctx, opts);
  }
  // set default options
  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
  if (isUndefined(ctx.depth)) ctx.depth = 2;
  if (isUndefined(ctx.colors)) ctx.colors = false;
  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
  if (ctx.colors) ctx.stylize = stylizeWithColor;
  return formatValue(ctx, obj, ctx.depth);
}
exports.inspect = inspect;


// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
inspect.colors = {
  'bold' : [1, 22],
  'italic' : [3, 23],
  'underline' : [4, 24],
  'inverse' : [7, 27],
  'white' : [37, 39],
  'grey' : [90, 39],
  'black' : [30, 39],
  'blue' : [34, 39],
  'cyan' : [36, 39],
  'green' : [32, 39],
  'magenta' : [35, 39],
  'red' : [31, 39],
  'yellow' : [33, 39]
};

// Don't use 'blue' not visible on cmd.exe
inspect.styles = {
  'special': 'cyan',
  'number': 'yellow',
  'boolean': 'yellow',
  'undefined': 'grey',
  'null': 'bold',
  'string': 'green',
  'date': 'magenta',
  // "name": intentionally not styling
  'regexp': 'red'
};


function stylizeWithColor(str, styleType) {
  var style = inspect.styles[styleType];

  if (style) {
    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
           '\u001b[' + inspect.colors[style][1] + 'm';
  } else {
    return str;
  }
}


function stylizeNoColor(str, styleType) {
  return str;
}


function arrayToHash(array) {
  var hash = {};

  array.forEach(function(val, idx) {
    hash[val] = true;
  });

  return hash;
}


function formatValue(ctx, value, recurseTimes) {
  // Provide a hook for user-specified inspect functions.
  // Check that value is an object with an inspect function on it
  if (ctx.customInspect &&
      value &&
      isFunction(value.inspect) &&
      // Filter out the util module, it's inspect function is special
      value.inspect !== exports.inspect &&
      // Also filter out any prototype objects using the circular check.
      !(value.constructor && value.constructor.prototype === value)) {
    var ret = value.inspect(recurseTimes, ctx);
    if (!isString(ret)) {
      ret = formatValue(ctx, ret, recurseTimes);
    }
    return ret;
  }

  // Primitive types cannot have properties
  var primitive = formatPrimitive(ctx, value);
  if (primitive) {
    return primitive;
  }

  // Look up the keys of the object.
  var keys = Object.keys(value);
  var visibleKeys = arrayToHash(keys);

  if (ctx.showHidden) {
    keys = Object.getOwnPropertyNames(value);
  }

  // IE doesn't make error fields non-enumerable
  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
  if (isError(value)
      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
    return formatError(value);
  }

  // Some type of object without properties can be shortcutted.
  if (keys.length === 0) {
    if (isFunction(value)) {
      var name = value.name ? ': ' + value.name : '';
      return ctx.stylize('[Function' + name + ']', 'special');
    }
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    }
    if (isDate(value)) {
      return ctx.stylize(Date.prototype.toString.call(value), 'date');
    }
    if (isError(value)) {
      return formatError(value);
    }
  }

  var base = '', array = false, braces = ['{', '}'];

  // Make Array say that they are Array
  if (isArray(value)) {
    array = true;
    braces = ['[', ']'];
  }

  // Make functions say that they are functions
  if (isFunction(value)) {
    var n = value.name ? ': ' + value.name : '';
    base = ' [Function' + n + ']';
  }

  // Make RegExps say that they are RegExps
  if (isRegExp(value)) {
    base = ' ' + RegExp.prototype.toString.call(value);
  }

  // Make dates with properties first say the date
  if (isDate(value)) {
    base = ' ' + Date.prototype.toUTCString.call(value);
  }

  // Make error with message first say the error
  if (isError(value)) {
    base = ' ' + formatError(value);
  }

  if (keys.length === 0 && (!array || value.length == 0)) {
    return braces[0] + base + braces[1];
  }

  if (recurseTimes < 0) {
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    } else {
      return ctx.stylize('[Object]', 'special');
    }
  }

  ctx.seen.push(value);

  var output;
  if (array) {
    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
  } else {
    output = keys.map(function(key) {
      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
    });
  }

  ctx.seen.pop();

  return reduceToSingleString(output, base, braces);
}


function formatPrimitive(ctx, value) {
  if (isUndefined(value))
    return ctx.stylize('undefined', 'undefined');
  if (isString(value)) {
    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                             .replace(/'/g, "\\'")
                                             .replace(/\\"/g, '"') + '\'';
    return ctx.stylize(simple, 'string');
  }
  if (isNumber(value))
    return ctx.stylize('' + value, 'number');
  if (isBoolean(value))
    return ctx.stylize('' + value, 'boolean');
  // For some reason typeof null is "object", so special case here.
  if (isNull(value))
    return ctx.stylize('null', 'null');
}


function formatError(value) {
  return '[' + Error.prototype.toString.call(value) + ']';
}


function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
  var output = [];
  for (var i = 0, l = value.length; i < l; ++i) {
    if (hasOwnProperty(value, String(i))) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          String(i), true));
    } else {
      output.push('');
    }
  }
  keys.forEach(function(key) {
    if (!key.match(/^\d+$/)) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          key, true));
    }
  });
  return output;
}


function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
  var name, str, desc;
  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
  if (desc.get) {
    if (desc.set) {
      str = ctx.stylize('[Getter/Setter]', 'special');
    } else {
      str = ctx.stylize('[Getter]', 'special');
    }
  } else {
    if (desc.set) {
      str = ctx.stylize('[Setter]', 'special');
    }
  }
  if (!hasOwnProperty(visibleKeys, key)) {
    name = '[' + key + ']';
  }
  if (!str) {
    if (ctx.seen.indexOf(desc.value) < 0) {
      if (isNull(recurseTimes)) {
        str = formatValue(ctx, desc.value, null);
      } else {
        str = formatValue(ctx, desc.value, recurseTimes - 1);
      }
      if (str.indexOf('\n') > -1) {
        if (array) {
          str = str.split('\n').map(function(line) {
            return '  ' + line;
          }).join('\n').substr(2);
        } else {
          str = '\n' + str.split('\n').map(function(line) {
            return '   ' + line;
          }).join('\n');
        }
      }
    } else {
      str = ctx.stylize('[Circular]', 'special');
    }
  }
  if (isUndefined(name)) {
    if (array && key.match(/^\d+$/)) {
      return str;
    }
    name = JSON.stringify('' + key);
    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
      name = name.substr(1, name.length - 2);
      name = ctx.stylize(name, 'name');
    } else {
      name = name.replace(/'/g, "\\'")
                 .replace(/\\"/g, '"')
                 .replace(/(^"|"$)/g, "'");
      name = ctx.stylize(name, 'string');
    }
  }

  return name + ': ' + str;
}


function reduceToSingleString(output, base, braces) {
  var numLinesEst = 0;
  var length = output.reduce(function(prev, cur) {
    numLinesEst++;
    if (cur.indexOf('\n') >= 0) numLinesEst++;
    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
  }, 0);

  if (length > 60) {
    return braces[0] +
           (base === '' ? '' : base + '\n ') +
           ' ' +
           output.join(',\n  ') +
           ' ' +
           braces[1];
  }

  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
}


// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.
function isArray(ar) {
  return Array.isArray(ar);
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return isObject(re) && objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return isObject(d) && objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return isObject(e) &&
      (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = require('./support/isBuffer');

function objectToString(o) {
  return Object.prototype.toString.call(o);
}


function pad(n) {
  return n < 10 ? '0' + n.toString(10) : n.toString(10);
}


var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
              'Oct', 'Nov', 'Dec'];

// 26 Feb 16:19:34
function timestamp() {
  var d = new Date();
  var time = [pad(d.getHours()),
              pad(d.getMinutes()),
              pad(d.getSeconds())].join(':');
  return [d.getDate(), months[d.getMonth()], time].join(' ');
}


// log is just a thin wrapper to console.log that prepends a timestamp
exports.log = function() {
  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
};


/**
 * Inherit the prototype methods from one constructor into another.
 *
 * The Function.prototype.inherits from lang.js rewritten as a standalone
 * function (not on Function.prototype). NOTE: If this file is to be loaded
 * during bootstrapping this function needs to be rewritten using some native
 * functions as prototype setup using normal JavaScript does not work as
 * expected during bootstrapping (see mirror.js in r114903).
 *
 * @param {function} ctor Constructor function which needs to inherit the
 *     prototype.
 * @param {function} superCtor Constructor function to inherit prototype from.
 */
exports.inherits = require('inherits');

exports._extend = function(origin, add) {
  // Don't do anything if add isn't an object
  if (!add || !isObject(add)) return origin;

  var keys = Object.keys(add);
  var i = keys.length;
  while (i--) {
    origin[keys[i]] = add[keys[i]];
  }
  return origin;
};

function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./support/isBuffer":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\util\\support\\isBufferBrowser.js","_process":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\process\\browser.js","inherits":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\inherits\\inherits_browser.js"}],"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\act\\audio-channel.js":[function(require,module,exports){
/**
 * @author George Frick
 * Represent a playable set of sounds including a descriptive key, an audio sprite, and the set of sound keys.
 */
(function () {

    var _ = require('lodash');
    var Base = require('basejs');

    module.exports = Base.extend({
        constructor: function (key, sprite, sounds) {
            this.key = key;
            this.sprite = sprite;
            this.sounds = sounds; // json set of sounds.

            _.each(sounds, function (timing, key) {
                this.sprite.addMarker(key, timing[0], timing[1], 1, timing[2]);
            }, this);

            this.events = {
                onStop: new Phaser.Signal()
            };
            this.sprite.onStop.add(this.onSoundFinished, this);
        },
        allowMultiple: function() {
            this.sprite.allowMultiple = true;
        },
        isCurrentMarker: function(key) {
            return this.sprite.currentMarker === key;
        },
        isPlaying: function() {
            return this.sprite.isPlaying;
        },
        getKey: function() {
            return this.key;
        },
        getChannel: function() {
            return this.sprite;
        },
        hasKey: function( key ) {
            return !!(this.sounds[key]);
        },
        play: function( key ) {
            this.sprite.play(key);
        },
        stop: function() {
            this.sprite.stop();
        },
        stopNoEvent: function() {
            this.sprite.onStop.removeAll();
            this.sprite.stop();
            this.sprite.onStop.add(this.onSoundFinished, this);
        },
        onSoundFinished: function (stoppedSound, marker) {
            this.events.onStop.dispatch(stoppedSound, marker);
        },
        destroy: function() {
            this.sprite.onStop.removeAll();
            this.sprite.stop();
            this.sprite.destroy();
        }
    });

}());

},{"basejs":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\basejs\\Base.js","lodash":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\lodash\\index.js"}],"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\act\\audio-service.js":[function(require,module,exports){
/**
 * @author George Frick
 * https://phasergames.com/phaser-audio-delay/
 */
(function () {

    var _ = require('lodash');
    var log = require('loglevel');
    var Base = require('basejs');
    var AudioChannel = require('./audio-channel');
    var CHANNEL_PRIMARY = "primary";
    var CHANNEL_MUSIC = "secondary";
    var CHANNEL_SFX = "sfx";
    //var buildAudioLipSyncArray = require('../tools/audio-lip-sync'); //comment out when done

    var AudioService = Base.extend({
        constructor: function (game, themeData) {
            if (!game) {
                throw "AudioService requires game constructor argument.";
            }
            if (!themeData) {
                throw "AudioService requires themeData constructor argument.";
            }
            this.game = game;
            this.theme = themeData;
            this.audioQueue = [];
            this.channels = {};

            this.events = {
                soundFinished: new Phaser.Signal(),
                onSceneAudioReady: new Phaser.Signal()
            };
        },
        /**
         * If there is a scene showing, end it.
         * @TODO allow this to remove from cache?
         */
        stopAndUnload: function () {
            _.each(this.channels, function (channel) {
                channel.destroy();
            }, this);
        },
        // Stop the current scene and clean it up.
        stopScene: function () {
            if (this.channels[CHANNEL_PRIMARY]) {
                this.channels[CHANNEL_PRIMARY].stopNoEvent();
            }
            if (this.channels[CHANNEL_MUSIC]) {
                this.channels[CHANNEL_MUSIC].stop();
            }
            if (this.channels[CHANNEL_SFX]) {
                this.channels[CHANNEL_SFX].stop();
            }
        },
        /**
         * If something starts to play audio, it does it via an event, this allows for telling the other actors, the
         * scene, act and the play. In this case, we also want to stop any previously playing sound.
         * The current speech is always tracked so we can have eventing on when it stops.
         * @param data {
         *  text: "",
         *  "audio": "",
         *  "key": "",
         *  "channel": optional channel, defaults to primary, switched to sfx for sfx
         *  "priority": stop | restart | queue | low | with | stopall
         *  "stop":  => stop audio if playing the same sound.
         *  "restart":  Restart audio if playing the same sound.
         *  "queue": Queue the audio to play next, will play now if no queue.
         *  "low": Ignore request if sound is playing
         *  "stopall" : stopall sound, ignore audio key.
         *  default/interrupt: Interrupt the current sound and play the new one, emptying the queue.
         * }
         */
        playAudio: function (audio, data) {

            if (!data) {
                throw "data is required when calling playAudio";
            }

            if (!data.priority) {
                data.priority = "interrupt";
            }

            if (!data.channel) {
                data.channel = CHANNEL_PRIMARY;
            }

            if (!this.channels[CHANNEL_PRIMARY]) {
                throw "Attempting to play audio before game sounds are initialized.";
            }

            var channel = this.findChannelForKey(audio, data.channel);
            if (!channel ) {
                // Some activities play "silence", rather than adjusting the converted XML, we support it.
                if( audio === "silence" ) {
                    channel = this.channels[CHANNEL_PRIMARY];
                    data.priority = "stopall";
                } else {
                    throw "Request to play unknown key: " + audio;
                }
            }

            var gameSounds = this.channels[CHANNEL_PRIMARY];
            switch (data.priority) {
                case 'stopall': {
                    channel.stop();
                    this.audioQueue = [];
                    return;
                }
                case 'stop': {
                    // A stop is always a stop, so either stop or do nothing.
                    if (channel.isPlaying && channel.isCurrentMarker(audio) ) {
                        channel.stop();
                    }
                    return;
                }
                case 'restart': {
                    if (channel.isPlaying && channel.isCurrentMarker(audio)) {
                        channel.stop();
                    }
                    break;
                }
                case 'queue': {
                    if (channel.isPlaying() && !channel.isCurrentMarker(audio)) {
                        this.audioQueue.push(data);
                        return;
                    }
                    // Will fall through and play the sound.
                    break;
                }
                case 'low': {
                    if (channel.isPlaying()) {
                        return;
                    }
                    break;
                }
                case 'sfx': {
                    channel = this.findChannelForKey(audio, 'sfx');
                    if (!channel) {
                        throw "Request to play unknown sfx key: " + audio;
                    }
                    channel.play(audio);
                    return;
                }
                default:
                case 'interrupt': {
                    if (channel.isPlaying() && channel.isCurrentMarker(audio) ) {
                        // Already playing, just keep playing.
                        return;
                    }
                    channel.stop();
                    break;
                }
            }

            log.warn("Playing audio " + audio);
            channel.play(audio);
        },
        /**
         * Start by trying to get the preferred channel, but otherwise search.
         */
        findChannelForKey: function (key, preferredChannel) {
            var preferred = this.channels[preferredChannel];
            if (preferred && preferred.hasKey(key)) {
                return preferred;
            }
            return _.find(this.channels, function (channel) {
                return channel.hasKey(key);
            });
        },
        onGameMusic: function (audio) {
            this.channels[CHANNEL_MUSIC].play(audio);
        },
        /**
         * When audio finishes playing, actors need to know, in case they are animating speech/etc.
         */
        onSoundFinished: function (stoppedSound, marker) {
            log.warn("On sound Finished called for: " + marker);
            log.warn(stoppedSound);

            this.events.soundFinished.dispatch(stoppedSound, marker);

            if (this.audioQueue.length > 0) {
                var data = this.audioQueue.pop();
                this.playAudio(data.audio, data);
            }
        },
        initSounds: function () {
            // Uncomment this line and you will produce lip sync data.
            //buildAudioLipSyncArray(this.theme.soundFile[0], this.theme.sounds, this.theme.soundSyncData); //comment out when done
            this.channels[CHANNEL_PRIMARY] = new AudioChannel(this.theme.soundKey, this.game.add.audio(this.theme.soundKey), this.theme.sounds);
            this.channels[CHANNEL_MUSIC] = new AudioChannel(this.theme.soundKey, this.game.add.audio(this.theme.soundKey), this.theme.sounds);
            this.channels[CHANNEL_SFX] = new AudioChannel(this.theme.soundKey, this.game.add.audio(this.theme.soundKey), this.theme.sounds);
            this.channels[CHANNEL_PRIMARY].allowMultiple();
            this.channels[CHANNEL_MUSIC].allowMultiple();
            //this.gameSounds.onMarkerComplete.add(this.onSoundFinished, this); This event doesn't do what you think.
            this.channels[CHANNEL_PRIMARY].events.onStop.add(this.onSoundFinished, this);
        },
        /**
         * These three functions are the old loading functions used by play-act
         */
        loadAudio: function (soundKey, soundFile) {
            this.game.load.audio(soundKey, soundFile);
        },
        unloadAudio: function (soundKey) {
            this.game.cache.removeSound(soundKey);
        },
        isReady: function (soundKey) {
            return this.game.cache.isSoundDecoded(soundKey)
                && this.game.cache.isSoundReady(soundKey);
        },
        /**
         * These are the newer functions which show the loading screen during dynamic loading
         */
        showLoading: function () {
            this.game.loadingScreen.show();
        },
        loadAdditionalAudio: function (audioList) {
            if (audioList && audioList.length > 0) {
                this.showLoading();

                _.each(audioList, function (audioKey) {
                    var actorSoundData = this.theme.actorSounds[audioKey];
                    if (!actorSoundData) {
                        throw "No audio entry for audio key: " + audioKey;
                    }
                    // @TODO just go ahead and load the json as well so they don't need to be copied in!
                    this.game.load.audio(audioKey, actorSoundData.soundFile);
                }, this);

                this.audioList = audioList;
                this.game.load.onLoadComplete.addOnce(this.waitForAudioDecode, this);
                this.game.load.start();
            } else {
                this.debugOutput();
                this.events.onSceneAudioReady.dispatch(true);
            }
        },
        unloadAdditionalAudio: function (audioList) {
            if (audioList && audioList.length > 0) {

                _.each(audioList, function (audioKey) {
                   if( this.channels[audioKey] ) {
                       this.channels[audioKey].destroy();
                       delete this.channels[audioKey];
                       this.game.cache.removeSound(audioKey);
                   }
                }, this);
            }
        },
        waitForAudioDecode: function () {
            var allReady = true;

            this.game.loadingScreen.showDecoding();
            _.each(this.audioList, function (audioKey) {
                if (this.game.cache.checkSoundKey(audioKey) === false) {
                    // Scene was somehow destroyed before it finished loading it's audio.
                    return;
                }
                if (!this.game.cache.isSoundDecoded(audioKey) || !this.game.cache.isSoundReady(audioKey)) {
                    allReady = false;
                }
            }, this);

            if (allReady) {
                this.createChannels(this.audioList);
                this.audioList = null;
                this.game.loadingScreen.destroy();
                this.debugOutput();
                this.events.onSceneAudioReady.dispatch(true);
            } else {
                setTimeout(_.bind(this.waitForAudioDecode, this), 500);
            }
        },
        debugOutput: function() {
            // var channelNames = [];
            // var cacheNames = [];
            // _.each( this.channels, function(channel, key) {
            //     channelNames.push(key);
            // }, this);
            // _.each( this.game.cache.getKeys(Phaser.Cache.SOUND), function( key) {
            //     cacheNames.push(key);
            // }, this);
            // console.log( "Available Channels for scene: " + channelNames.join(", "));
            // console.log( "Available Channels in cache: " + channelNames.join(", "));
        },
        createChannels: function( audioList ) {
            _.each(audioList, function (audioKey) {
                var actorSoundData = this.theme.actorSounds[audioKey];
                if (!actorSoundData) {
                    throw "No audio entry for LOADED audio key: " + audioKey;
                }
                this.channels[audioKey] = new AudioChannel(audioKey, this.game.add.audio(audioKey), actorSoundData.sounds);
            }, this);
        }
    });

    module.exports = AudioService;
}());

},{"./audio-channel":"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\act\\audio-channel.js","basejs":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\basejs\\Base.js","lodash":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\lodash\\index.js","loglevel":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\loglevel\\lib\\loglevel.js"}],"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\act\\play-act-manager.js":[function(require,module,exports){
/**
 * @author George Frick
 * @version 1.0.0
 * @creation 09/22/2015
 * Copyright 2015 Children's Hospital
 * This software is the property of Children's Hospital.
 *
 * Return an act instance given a type.
 */
(function () {
    'use strict';
    var _ = require('lodash'),
    PlayAct = require('./play-act');

    module.exports = {
        getActInstance: function (type, game, themeData, actName) {
            if( type && type !== "PlayAct" ) {
                var clazz = window[type];
                if( clazz ) {
                    var actInstance = new clazz(game,  themeData, actName);
                    actInstance.actName = actName; // make sure there is no funny business.
                    return actInstance;
                } else {
                    window.alert("Unable to load activity: " + type);
                }
            } else {
                return new PlayAct(game, themeData, actName);
            }
        }
    };
}());

},{"./play-act":"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\act\\play-act.js","lodash":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\lodash\\index.js"}],"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\act\\play-act.js":[function(require,module,exports){
/**
 * @author George Frick
 * @version 1.0.0
 * @creation 07/01/2015
 * Copyright 2015 Children's Hospital
 * This software is the property of Children's Hospital.
 *
 * Represent an entire ACT. An act coordinates a set of scenes.
 */
(function () {
	var _ = require("lodash"),
		log = require("loglevel"),
		Base = require("basejs"),
		PlayScene = require("../scene/play-scene"),
		PlayAction = require("../scene/play-action"),
		PlayModel = require("../play/model"),
		ActValidator = require("./validator");
	var AudioService = require("./audio-service");

	var PlayAct = Base.extend({
		constructor: function (game, themeData, actName) {
			if (!game) {
				throw "PlayAct requires game constructor argument.";
			}
			if (!themeData) {
				throw "PlayAct requires themeData constructor argument.";
			}
			this.game = game;
			this.theme = themeData;
			this.actName = actName;
			this.audioService = new AudioService(this.game, this.theme);

			this.events = {
				onGameChoice: new Phaser.Signal(),
				onActStatus: new Phaser.Signal(),
			};

			this.isPreloaded = false;
		},
		setScormString: function (suspendData) {
			this.suspendData = suspendData;
		},
		getScormString: function () {
			return this.model.getSuspendData();
		},
		/**
		 * Show the current scene, clearing out any old scene. If there is a sound playing, stop it. This frees up
		 * memory, but in the future it could possibly recycle actors.
		 */
		start: function (isRestart) {
			log.warn("showCurrentScene called.");

			if (this.suspendData) {
				this.model.restoreData(this.suspendData);
				this.suspendData = null;
			}
			this.model.events.onGameOutcome.add(this.onGameOutcome, this);
			this.audioService.initSounds();
			this.audioService.events.onSceneAudioReady.add(
				this.onSceneStartAudioReady,
				this
			);
			this.audioService.events.soundFinished.add(this.onSoundFinished, this);

			if (isRestart) {
				log.warn("Trying to restart..." + this.model.getCurrentSceneName());
				this.model.tryResume();
				log.warn("....." + this.model.getCurrentSceneName());
			}
			this.startScene();
		},
		startScene: function () {
			var newSceneData = this.model.getCurrentScene();
			if (this.currentScene) {
				this.currentScene.showNewSceneData(newSceneData);
			} else {
				this.currentScene = new PlayScene(
					this.game,
					newSceneData,
					this.model.getVarInterface(),
					this.theme
				);
			}
			this.audioService.loadAdditionalAudio(
				this.currentScene.getAdditionalAudio()
			);
		},
		/**
		 * This is the other half of "startScene", which now waits for audio...
		 */
		onSceneStartAudioReady: function () {
			if (this.model.isShowPlayThrough()) {
				this.currentScene.showPlayThrough();
			}

			this.currentScene.events.onGameChoice.add(this.onGameChoice, this);
			this.currentScene.events.onGameSpeech.add(this.onGameSpeech, this);
			this.currentScene.events.onGameMusic.add(this.onGameMusic, this);
			this.currentScene.showScene();
			this.runSceneStartActions();
			this.events.onActStatus.dispatch("save");
		},
		/**
		 * When a scene starts, run any starting actions.
		 */
		runSceneStartActions: function () {
			var actions = this.currentScene.getActions();
			_.each(
				actions,
				function (singleAction) {
					log.warn("executing starting action:");
					log.warn(singleAction);
					PlayAction.getAction(singleAction).execute(this);
				},
				this
			);
			actions = this.model.getGlobalActions();
			_.each(
				actions,
				function (singleAction) {
					log.warn("executing starting global action:");
					log.warn(singleAction);
					PlayAction.getAction(singleAction).execute(this);
				},
				this
			);
			// The scene is done starting up, allow input.
			this.game.input.disabled = false;
		},
		/**
		 * If there is a scene showing, end it.
		 */
		stop: function () {
			this.audioService.stopAndUnload();

			// If we're not in a scene, then no input!
			this.game.input.disabled = true;
			if (this.currentScene) {
				this.currentScene.destroy();
				this.currentScene = null;
			}
			this.unload(); // remove everything that was preloaded.
		},
		// Stop the current scene and clean it up.
		stopScene: function () {
			this.audioService.stopScene();
			this.audioService.unloadAdditionalAudio(
				this.currentScene.getAdditionalAudio()
			);
			this.game.input.disabled = true;
			if (this.currentScene) {
				this.currentScene.clearForReuse();
			}
		},
		/**
		 * An outcome or starting action has set a variable (game choice). Other actors in the scene need to
		 * know about it.
		 * @param data
		 */
		onGameChoiceAction: function (data) {
			this.onGameChoice(data);
			if (!data.consumed) {
				this.currentScene.sendGameChoiceToActors("!ACTION!", data);
			}
		},
		/**
		 * Something in the game has made a choice. This choice is recorded as the setting of a variable, we then
		 * run an update in case that choice led to an action, (events bubble up, actions happen down)
		 * @param data
		 */
		onGameChoice: function (data) {
			log.warn("game choice");
			log.warn(data);

			this.events.onGameChoice.dispatch(data);
			if (data.consumed) {
				return;
			}

			var tempVars = _.pairs(data)[0];
			log.warn(tempVars);
			data.consumed = this.actCommand(tempVars[0], tempVars[1]);

			// Only record the variable if it wasn't a command, which does NOT consume it. It may result in an event,
			// otherwise, check for completed outcomes.
			if (!data.consumed) {
				var event = this.model.handleSpecialVar(tempVars[0], tempVars[1]);
				// var event = this.model.setVar(tempVars[0], tempVars[1]);
				if (event) {
					this.events.onActStatus.dispatch(event);
				}
				if (this.model.setVar(tempVars[0], tempVars[1])) {
					this.checkCurrentSceneOutcomes(tempVars[0]);
				}
			}
		},
		checkCurrentSceneOutcomes: function (variable) {
			this.model.checkForCompletedOutcomes(variable);
		},
		/**
		 * this function clears a variable out of the model manually. It should almost never be used.
		 * @param name
		 */
		clearVariable: function (name) {
			this.model.variables[name] = undefined;
		},
		/**
		 * Run an Act level command. Return true if a command happened, otherwise false.
		 * @param command
		 * @param arg
		 * @returns {boolean} true if the command was consumed.
		 */
		actCommand: function (command, arg) {
			log.warn("Act command: " + command + " / " + arg);
			if (command === "remove-actor" && this.currentScene) {
				this.currentScene.removeActorByName(arg);
			} else if (command === "add-actor" && this.currentScene) {
				this.currentScene.addActor(arg);
			} else if (
				command === "objective_complete" ||
				command === "activity_complete"
			) {
				// objective_complete => "finished this act", not a scorm objective.
				this.events.onActStatus.dispatch("complete");
				// objective => "finish a scorm objective"
			} else if (command === "objective") {
				this.events.onActStatus.dispatch("objective", arg);
			} else {
				return false;
			}
			return true;
		},
		/**
		 * If something starts to play audio, it does it via an event, this allows for telling the other actors, the
		 * scene, act and the play. In this case, we also want to stop any previously playing sound.
		 * The current speech is always tracked so we can have eventing on when it stops.
		 * @param data
		 */
		onGameSpeech: function (data) {
			log.warn("on game speech");
			log.warn(data);

			var audio = this.model.getValue(data.audio);
			if (data.key) {
				audio = this.model.getValue(data.key) + "_" + audio;
			}

			this.audioService.playAudio(audio, data);
		},
		onGameMusic: function (audio) {
			this.audioService.onGameMusic(audio);
		},
		/**
		 * When audio finishes playing, actors need to know, in case they are animating speech/etc.
		 */
		onSoundFinished: function (stoppedSound, marker) {
			// _tempMarker because currentMarker is now blank...
			if (this.currentScene) {
				this.currentScene.onGameSpeechStop(marker);
			}
		},
		/**
		 * The model has signaled that outcomes need to execute actions. Execute those actions.
		 * @param pendingActions
		 * Will look like:
		 * [
		 *  [ "outcome_1": [ { ACTION } , { ACTION } ],
		 *    "outcome_2": [ { ACTION } , { ACTION } ], ... ]
		 */
		onGameOutcome: function (pendingActions) {
			_.each(
				pendingActions,
				function (actionData) {
					log.warn("executing actions for " + actionData.name);
					_.each(
						actionData.actions,
						function (singleAction) {
							log.warn("executing action:");
							log.warn(actionData);
							PlayAction.getAction(singleAction).execute(this);
						},
						this
					);
				},
				this
			);
		},
		showNewScene: function (scene) {
			if (this.model.setCurrentScene(scene)) {
				this.stopScene();
				this.startScene();
			}
		},
		/**
		 * This returns the paths to everything, based on the theme/
		 * @returns {{textureKey: string, texture: string, textureMap: string, soundKey: string, soundFile: string}}
		 */
		getMediaData: function () {
			var soundFiles = null;
			if (this.theme.hasOwnProperty("soundFile")) {
				soundFiles = [];
				for (var i = 0; i < this.theme.soundFile.length; i++) {
					soundFiles[i] = this.game.config.assetPath + this.theme.soundFile[i];
				}
			}

			var animationFiles = null;
			if (this.theme.hasOwnProperty("animations")) {
				animationFiles = [];
				for (var i = 0; i < this.theme.animations.length; i++) {
					animationFiles.push({
						texture:
							this.game.config.assetPath + this.theme.animations[i].texture,
						textureMap:
							this.game.config.assetPath + this.theme.animations[i].textureMap,
						textureKey: this.theme.animations[i].textureKey,
					});
				}
			}

			return {
				textureKey: this.theme.textureKey,
				texture: this.game.config.assetPath + this.theme.texture,
				textureMap: this.game.config.assetPath + this.theme.textureMap,
				soundKey: this.theme.soundKey,
				soundFile: soundFiles,
				dataFile: this.game.config.assetPath + this.theme.data,
				animations: animationFiles,
			};
		},
		/**
		 * Allow the current scene to perform timed operations. The size of a "tick" is defined in main.js, but think of
		 * it as a millisecond.
		 *
		 * STRONG WARNING: Don't do much here - it's called from the main update loop. Any extensive operations will
		 * cause the user interface to lag.
		 */
		tickUpdate: function (tick) {
			if (!(typeof this.currentScene === "undefined")) {
				this.currentScene.tickUpdate(tick);
			}
		},
		renderDebug: function () {
			//if( this.gameSounds  ) {
			//    this.game.debug.soundInfo(this.gameSounds, 10, 20);
			//}
		},
		preload: function () {
			if (!this.isPreloaded) {
				log.warn("!!! Called Preload in Act " + this.actName);
				this.mediaData = this.getMediaData();
				this.game.load.text(
					this.actName + "_scene_data",
					this.mediaData.dataFile
				);
				this.game.load.atlasJSONHash(
					this.mediaData.textureKey,
					this.mediaData.texture,
					this.mediaData.textureMap
				);
				if (this.mediaData.soundFile) {
					this.audioService.loadAudio(
						this.mediaData.soundKey,
						this.mediaData.soundFile
					);
				}
				if (this.mediaData.animations) {
					_.each(
						this.mediaData.animations,
						function (animationSet) {
							this.game.load.atlasJSONHash(
								animationSet.textureKey,
								animationSet.texture,
								animationSet.textureMap
							);
						},
						this
					);
				}
				this.isPreloaded = true;
			}
		},
		onPreloadFinished: function () {
			this.model = new PlayModel(
				JSON.parse(this.game.cache.getText(this.actName + "_scene_data"))
			);
			this.validator = new ActValidator(this.model.getRawData());
			this.validator.validate();
		},
		unload: function () {
			if (this.isPreloaded) {
				this.mediaData = this.getMediaData();
				this.game.cache.removeImage(this.mediaData.textureKey);
				if (this.mediaData.animations) {
					_.each(
						this.mediaData.animations,
						function (animationSet) {
							this.game.cache.removeImage(animationSet.textureKey);
						},
						this
					);
				}
				this.game.cache.removeText(this.mediaData.textureMap);
				this.game.cache.removeText(this.actName + "_scene_data");
				if (this.mediaData.soundFile) {
					this.audioService.unloadAudio(this.mediaData.soundKey);
				}
				this.isPreloaded = false;
			}
		},
		/**
		 * Check that sound has decoded.
		 */
		isPreloadComplete: function () {
			if (this.isPreloaded !== true) {
				return false;
			}
			/**
			 * @TODO GJF this was incorrect before, (act + "_..."), Was it being reached or just failing?
			 * Should the above line be removed/changed? (probably)
			 */
			if (!this.game.cache.getText(this.actName + "_scene_data")) {
				return false;
			}
			return (
				!this.mediaData.soundFile ||
				this.audioService.isReady(this.mediaData.soundKey)
			);
		},
		setStandAlone: function (isStandAlone) {},
	});

	module.exports = PlayAct;
})();

},{"../play/model":"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\play\\model.js","../scene/play-action":"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene\\play-action.js","../scene/play-scene":"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene\\play-scene.js","./audio-service":"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\act\\audio-service.js","./validator":"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\act\\validator.js","basejs":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\basejs\\Base.js","lodash":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\lodash\\index.js","loglevel":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\loglevel\\lib\\loglevel.js"}],"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\act\\validator.js":[function(require,module,exports){
/**
 * @author George Frick
 * @version 1.0.0
 * @creation 07/01/2015
 * Copyright 2015 Children's Hospital
 * This software is the property of Children's Hospital.
 *
 * A validator for the sceneData.json (act) file to make sure the basic
 * fields are there for each object.
 *
 */
(function () {

    var _ = require('lodash');
    var log = require('loglevel');
    var Base = require('basejs');

    // A small validation model for a set of sceneData.
    var actValidationModel =
        {
            "play": {
                "description": "Top level container for all scene data",
                "validationModel": {
                    "start": { "description": "act.play.start specifies the starting scene."},
                    "scenes": { "description": "act.play.scenes specified all scenes." }
                }
            }
        };

    var sceneValidationModel = {
        "id": { "description": "Unique identifier for a scene." },
        "background": { "description": "Reference background image for a scene." },
        "actors": { "description": "Set of actors to add to a scene." },
        "outcomes": { "description": "Set of possible outcomes from a scene." }
    };

    var actorValidationModel = {
        "name": { "description": "Identifier for actor." },
        "type": { "description": "Type of actor to be created." }
    };

    var outcomeValidationModel = {
        "events": { "description": "Set of variables/value pairs that trigger the outcome." },
        "actions": { "description": "Array of actions to take when outcome is triggered." }
    };

    var ActValidator = Base.extend( {
        constructor: function( jsonData) {
            this.rawData = jsonData;
        },
        /**
         * run some basic validation on the available data.
         */
        validate: function() {
            if( ! this.rawData ) {
                throw "PlayModel requires game data constructor argument.";
            }

            var data = this.rawData;
            this.runActValidator( data, actValidationModel);
            _.each( data.play.scenes, function(scene) {
                this.runSceneValidator(scene, sceneValidationModel);
            },this);
            log.warn("Validation complete.");
        },
        runActValidator: function( entryPoint, validationModel ) {
            _.each( validationModel, function( toValidate, index ) {
                if( !entryPoint[index]) {
                    throw "Missing: " + toValidate.description;
                } else if( toValidate.validationModel ) {
                    this.runActValidator( entryPoint[index], toValidate.validationModel );
                }
            }, this);
        },
        runSceneValidator: function( entryPoint, validationModel ) {
            _.each( validationModel, function( toValidate, index ) {
                if( !entryPoint[index]) {
                    throw "Missing: " + toValidate.description;
                }
            }, this);
            _.each( entryPoint.actors, function (actor, actorIndex) {
                _.each( actorValidationModel, function( toValidate, index ) {
                    if( !actor[index]) {
                        throw "Missing: " + toValidate.description;
                    }
                }, this);
            }, this);
            _.each( entryPoint.outcomes, function (outcome, outcomeIndex) {
                _.each( outcomeValidationModel, function( toValidate, index ) {
                    if( !outcome[index]) {
                        throw "Missing: " + toValidate.description;
                    }
                }, this);
            }, this);
        }
    });

    module.exports = ActValidator;
}());

},{"basejs":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\basejs\\Base.js","lodash":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\lodash\\index.js","loglevel":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\loglevel\\lib\\loglevel.js"}],"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\loading-screen.js":[function(require,module,exports){
/**
 * @author George Frick
 * @version 1.0.0
 * @creation 09/21/2015
 * Copyright 2015 Children's Hospital
 * This software is the property of Children's Hospital.
 *
 *  Draw a loading screen in Phaser. Expects resources to already be loaded.
 */
(function () {
	"use strict";
	var Base = require("basejs");

	var LoadingScreen = Base.extend({
		constructor: function (game, settings) {
			if (
				!settings ||
				!settings.loading_image_key ||
				!settings.loading_bg_color ||
				!settings.loading_text ||
				!settings.loading_font
			) {
				throw "Loading screen is missing a required configuration field.";
			}
			this.game = game;
			this.settings = settings;
			this.progress = 0;
			this.spinner = [".", "..", "...", "...."];
		},
		show: function () {
			// 1. Create solid background.
			this.bgColor = this.game.add.graphics(0, 0);
			this.bgColor.beginFill(this.settings.loading_bg_color);
			this.bgColor.drawRect(
				0,
				0,
				this.game.world.width,
				this.game.world.height
			);
			this.bgColor.endFill();
			this.bgColor.inputEnabled = true;
			this.game.input.disabled = true;

			// 2. Create a loading image/icon/splash
			this.splashImage = this.game.add.sprite(
				this.game.world.centerX,
				this.game.world.centerY,
				this.settings.loading_image_key
			);
			this.splashImage.anchor.setTo(0.5, 0);
			// this.splashImage.alpha = 0;
			// this.tween = this.game.add.tween(this.splashImage).to({alpha: 1}, 2000, "Linear", true, 0, -1);

			//  And this tells it to repeat, i.e. fade in again 10 times.
			//  The 1000 tells it to wait for 1 second before restarting the fade.
			// this.tween.yoyo(true, 1000);

			// 3. Add a progress indicator
			this.progressText = this.game.add.text(
				this.game.world.centerX,
				this.game.world.centerY,
				this.settings.loading_text,
				this.settings.loading_font
			);
			this.progressText.anchor.setTo(0.5, 0);

			var jointHeight = this.splashImage.height + this.progressText.height;
			this.splashImage.y = this.game.world.centerY - jointHeight / 2;
			this.progressText.y = this.splashImage.y + this.splashImage.height + 25;
			this.game.load.onFileComplete.add(this.fileComplete, this);
		},
		showComplete: function () {
			this.game.input.disabled = false;
			// https://phaser.io/docs/2.4.4/Phaser.Cache.html#onSoundUnlock
			// but can't use :-(
			if (this.game.device.desktop) {
				this.progressText.setText("");
			} else {
				this.progressText.setText("");
			}
			// this.progressText.setText("");
		},
		showClickthrough: function () {
			this.game.input.disabled = false;
			// https://phaser.io/docs/2.4.4/Phaser.Cache.html#onSoundUnlock
			// but can't use :-(
			if (this.game.device.desktop) {
				this.progressText.setText("Click here to begin.");
			} else {
				this.progressText.setText("Touch screen to begin.");
			}
			// this.progressText.setText("");
		},
		showDecoding: function () {
			//this.progressText.setText("Preparing Audio: " + this.getFakeProgress());
		},
		getFakeProgress: function () {
			//return this.spinner[this.progress++ % 4];
		},
		destroy: function () {
			this.game.input.disabled = false;
			// this.tween.stop();
			// this.tween.target = null; // disconnect from splash image.
			// this.tween = null;
			this.splashImage.cropEnabled = false;
			this.splashImage.destroy();
			this.splashImage = null;
			this.bgColor.destroy();
			this.bgColor = null;
			this.progressText.destroy();
			this.progressText = null;
			this.game.load.onFileComplete.removeAll();
		},
		fileComplete: function (
			progress,
			cacheKey,
			success,
			totalLoaded,
			totalFiles
		) {
			// this.progressText.setText(this.settings.loading_text + progress + "%");
		},
	});

	module.exports = LoadingScreen;
})();

},{"basejs":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\basejs\\Base.js"}],"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\play\\model.js":[function(require,module,exports){
/**
 * @author George Frick
 * @version 1.0.0
 * @creation 07/01/2015
 * Copyright 2015 Children's Hospital
 * This software is the property of Children's Hospital.
 *
 * Represent a Play as a model, this is the collection of scene data, etc.
 *
 */
(function () {

    var _ = require('lodash'),
        log = require('loglevel'),
        util = require('util'),
        Base = require('basejs'),
        ModelRegistry = require('./models/model-registry'),
        NO_CHAR = "none";

    var PlayModel = Base.extend( {
        constructor: function( jsonData) {
            this.rawData = jsonData;

            if( !jsonData ) {
                throw "PlayModel requires game data constructor argument.";
            }

            if( !jsonData.play ) {
                throw "PlayModel has no play data.";
            }

            this.events = {
                onGameOutcome: new Phaser.Signal()
            };
            var modelClass = ModelRegistry.getModel(this.getModelType());
            this.dataModel = new modelClass();
            this.dataModel.setVar("start_scene", this.getDefaultSceneName());
            this.setPreviousSceneName( "!NONE!");
            this.setCurrentSceneName( this.getDefaultSceneName() );
            this.dataModel.setVar("default_scene_name", this.getDefaultSceneName());
        },
        getRawData: function() {
            return this.rawData;
        },
        getModelType: function() {
            // Default to "actnow", since that was the original and makes all play files backwards compatible.
          return this.rawData.play.modelType || "actnow";
        },
        /**
         * @returns the current scene object
         */
        getCurrentScene: function() {
            var scene = this.getSceneByName(this.getCurrentSceneName());
            if( !scene ) {
                log.error("getCurrentScene failed to return a scene.");
            }
            return scene;
        },
        getSceneByName: function( sceneName ) {
            if( !sceneName ) {
                return undefined;
            }
            return this.rawData.play.scenes[sceneName];
        },
        getGlobalActions: function() {
            var actions = [];
            if( this.rawData.play.global ) {
                actions = this.rawData.play.global.actions || [];
            }
           return actions;
        },
        getGlobalOutcomes: function() {
            if( this.rawData.play && this.rawData.play.global ) {
                return this.rawData.play.global.outcomes;
            }
            return null;
        },
        /**
         * Provide a an interface to the model that doesn't allow for anything but
         * read-only access. This returns a function that allows the referencing object
         * to use getValue
         * @returns {{getVar: Function}}
         */
        getVarInterface: function() {
            var that = this;
            return {
                getActorByRef: function( actorName ) {
                    return that.rawData.play.global.actors[actorName];
                },
                getValue: function( varName ) {
                    return that.getValue(varName);
                },
                clearValue: function( varName ) {
                    that.setVar(varName, null);
                }
            }
        },
        /**
         * Get a true value for a field that may be a variable.
         */
        getValue: function( varName ) {
            if( varName && typeof varName === 'string' && varName.indexOf('$') === 0 ) {
                return this.getVar(varName.substr(1));
            }
            return varName;
        },
        /**
         * Set a new scene in the model. This only affects tracking until getCurrentScene is called.
         * Attempting to switch to the same scene is ignored.
         * @param newSceneId
         * @returns {boolean} try is scene changed.
         */
        setCurrentScene: function( newSceneId ) {
            if( newSceneId ) {
                var newSceneName = this.getValue(newSceneId);
                if ( newSceneName !== this.getCurrentSceneName() && this.getSceneByName(newSceneName) ) {
                    var currentSceneName = this.getCurrentSceneName();
                    this.setCurrentSceneName(newSceneName);
                    this.setPreviousSceneName(currentSceneName);
                    return true;
                }
            } else {
                log.error("setCurrentScene called without newSceneId");
            }
            return false;
        },
        handleSpecialVar: function( variable, value ) {
            return this.dataModel.handleSpecialVar(variable, value);
        },
        /**
         * Something has changed in the model. If a variable changes, the state
         * of the act might change, so ignore a value staying the same.
         */
        setVar: function( variable, value ) {
            return this.dataModel.setVar(variable, value);
        },
        getVar: function( variable ) {
            return this.dataModel.getVar(variable);
        },
        /**
         * Check for outcomes that were completed by changing a variable.
         * @param variable
         */
        checkForCompletedOutcomes: function( variable ) {
            log.warn("checking for completed outcome: " + variable);
            var scene = this.getCurrentScene(),
                gOutcomes = this.getGlobalOutcomes(),
                pendingActions = [];

            if( !scene.outcomes && !gOutcomes) {
                log.error("Scene with no outcomes in checkForCompletedOutcomes.");
                log.error(scene);
                return;
            }

            if( gOutcomes  ) {
                _.each(gOutcomes, function (outcome, outcomeName) {
                    log.warn("Checking global outcome: " + outcomeName);
                    if (this.checkOutcome(outcome, variable) === true) {
                        log.warn("Pending action on outcome: " + outcomeName);
                        pendingActions.push({"name": outcomeName, "actions": outcome.actions});
                    }
                }, this);
            }

            _.each( scene.outcomes, function(outcome, outcomeName) {
                 log.warn("Checking outcome: " + outcomeName);
                if( this.checkOutcome(outcome, variable) === true  ) {
                    log.warn("Pending action on outcome: " + outcomeName);
                    pendingActions.push( { "name": outcomeName, "actions": outcome.actions } );
                }
            },this);

            if( pendingActions.length > 0 ) {
                this.events.onGameOutcome.dispatch( pendingActions );
            }
        },
        /**
         * Check all of the variables in an outcome against the variables in the model.
         *
         * @param outcome object that should have 'events' object on it.
         * @variable This is the variable that changed, a variable involved in the outcome has to have changed.
         * @returns {boolean} true if the outcome is currently matches the model's state.
         */
        checkOutcome: function( outcome , variable ) {
            if( !outcome.events ) {
                return false;
            }
            var arrays = _.pairs( outcome.events),
                matched = true,
                answer,
                foundVar = false;
            _.each( arrays, function( singleVar ) {
                answer = this.getVar(singleVar[0]);
                // The outcome can only match if one of the variables involved is the one chat changed.
                if( singleVar[0] === variable ) {
                    foundVar = true;
                }
                matched = matched && this.matchSingleOutcome( answer, singleVar[1]);
            }, this );
            return matched && foundVar;
        },
        matchSingleOutcome: function( leftSide, rightSide ) {
            // log.warn("matchSingleOutcome: " + leftSide + " / " + rightSide);
            if( leftSide === null || leftSide === undefined ) {
                return (typeof rightSide === "string" && (rightSide[0] === '!' || rightSide === 'undefined'));
            }

            if( typeof rightSide === "string") {
                if( leftSide === rightSide || rightSide === '*' || (rightSide[0] === '!' && leftSide !== _.trim(rightSide,"!") ) ) {
                    return true;
                }

            } else if( typeof rightSide === "number" ) {
                if( parseInt(leftSide,10) === parseInt(rightSide,10) ) {
                    return true;
                }
            } else if(_.isArray( rightSide ) ) {
                var innerMatch = false;
                _.each( rightSide , function( singleRightSide ) {
                    innerMatch = innerMatch || this.matchSingleOutcome(leftSide, singleRightSide);
                }, this);
                return innerMatch;
            }

            return false;
        },
        /**
         * Handle data that already existed in SCORM.
         * Data looks like: SCENE,[... depends on data model]
         * SCENE = current scene. Handle the scene at the base model level because we always store scene, regardless
         * of current activity.
         */
        restoreData: function (suspendData) {
            log.warn(suspendData);
            if (suspendData) {
                this.dataModel.restoreData( suspendData );
            }
        },
        /**
         * calling this will attempt to divert the model to setting the current scene to the
         * special resume scene. The current scene will be saved as the 'restore' scene.
         */
        tryResume: function() {
            if ( this.getCurrentSceneName() !== this.getDefaultSceneName() && this.getResumeScene() ) {
                log.warn(this.getCurrentSceneName());
                this.setCurrentSceneName( this.getResumeScene() );
            }
        },
        getResumeScene: function() {
            return this.rawData.play.resume;
        },
        getSuspendData: function () {
            return this.dataModel.getSuspendData(this.getPersistList());
        },
        /**
         * Clear out any saved choices to undefined. currently this involves which characters the
         * player selected.
         */
        clearSavedChoices: function() {
            this.dataModel.clearSavedChoices();
        },
        isShowPlayThrough: function() {
            return this.rawData && this.rawData.play && this.rawData.play.showPlayThrough;
        },
        getDefaultSceneName: function() {
            return this.rawData.play.start;
        },
        getPersistList: function() {
            return this.rawData.play.persist;
        },
        getCurrentSceneName: function() {
            return this.dataModel.getVar("current_scene_name");
        },
        setCurrentSceneName: function( sceneName ) {
            this.dataModel.setVar("current_scene_name", sceneName);
        },
        setPreviousSceneName: function( sceneName ) {
            this.dataModel.setVar("previous_scene_name", sceneName);
        }
    });

    module.exports = PlayModel;
}());

},{"./models/model-registry":"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\play\\models\\model-registry.js","basejs":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\basejs\\Base.js","lodash":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\lodash\\index.js","loglevel":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\loglevel\\lib\\loglevel.js","util":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\util\\util.js"}],"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\play\\models\\actnow.js":[function(require,module,exports){
/**
 * @author George Frick
 * @version 1.0.0
 * @creation 07/01/2015
 * Copyright 2015 Children's Hospital
 * This software is the property of Children's Hospital.
 *
 * Represent a specific Play Model strategy for a set of courses/activities.
 *
 * PA = Participate
 * DI = Discourage
 * AL = Allow
 * EN = Encourage
 * PR = Prevent
 * XX = Unanswered
 */
(function () {

    var _ = require('lodash'),
        log = require('loglevel'),
        util = require('util'),
        Base = require('basejs'),
        NO_CHAR = "none";

    var ActNowData = Base.extend( {
        constructor: function() {

            this.variables = {
                "score": 0,
                "playThrough": 1,
                "decisionsCurrent": ["XX", "XX", "XX", "XX", "XX", "XX", "XX", "XX", "XX"],
                "decisionsPrevious": ["XX", "XX", "XX", "XX", "XX", "XX", "XX", "XX", "XX"],
                "phoneRingerIndex": 0,
                "phoneBgIndex": 0
            };

            this.scores = {
                "PA": -2,
                "DI": 1,
                "AL": 0,
                "EN": -1,
                "PR": 2,
                "XX": 0
            };

        },
        /**
         * This is the special behavior for actnow based acts which expect decision points
         * and special act_complete / complete variables.
         * @param variable
         * @param value
         * @returns {*}
         */
        handleSpecialVar: function( variable, value ) {
            var returnValue = null;
            if( variable.substr(0,2) === "dp" ) {
                this.recordDecision(variable, value);
                returnValue = "save";
            } else if( variable === "act_complete" ) {
                this.clearSavedChoices();
                if( this.incrementPlaythrough(value) ) {
                    returnValue = "complete";
                }
            }
            return returnValue;
        },
        /**
         * Something has changed in the model. If a variable changes, the state
         * of the act might change, so ignore a value staying the same.
         * Returns TRUE if the variable was changed.
         */
        setVar: function( variable, value ) {
            //log.warn("Set Variable: " + variable + " = " + value);
            if( variable === "score" ) {
                this.variables["score"] += parseInt(value,10);
                return true;
            } else if( this.variables[variable] !== value )  {
                // Do not act on a value staying the same.
                this.variables[variable] = value;
                return true;
            }
            return false;
        },
        getVar: function( variable ) {
            return this.variables[variable];
        },
        /**
         * Handle data that already existed in SCORM.
         * Data looks like: [playThrough,char1,char2,char3,1|2|3|4|5|6|7|8|9,1|2|3|4|5|6|7|8|9,1|2|3|4|5|6|7|8|9]
         * 1|2|3|4|5|6|7|8|9 = answers per play through.
         */
        restoreData: function (unparsedSuspendData) {
            log.warn(unparsedSuspendData);
            var  splitData = unparsedSuspendData.split(",");
            this.variables['current_scene_name'] = splitData[0];
            var suspendData = _.drop(splitData,1);
            if (suspendData) {
                this.variables.playThrough = parseInt(suspendData[0], 10);
                this.variables['character_1'] = this.resolveCharacter(suspendData[1]);
                this.variables['character_2'] = this.resolveCharacter(suspendData[2]);
                this.variables['character_3'] = this.resolveCharacter(suspendData[3]);
                this.variables.decisionsPrevious = suspendData[4].split("|");
                this.variables.decisionsCurrent = suspendData[5].split("|");
                this.variables.score = 0;
                _.each( this.variables.decisionsCurrent , function(score) {
                    this.variables.score += this.convertToPoints(score);
                }, this);
            }
        },
        /**
         * Unchosen characters are saved as NO_CHAR, resolve them back to 'undefined' or their
         * actual value.
         */
        resolveCharacter: function( value ) {
            if( value === NO_CHAR ) {
                return undefined;
            } else {
                return value;
            }
        },
        convertToPoints: function(str) {
            if( this.scores[str] !== undefined ) {
                return this.scores[str];
            }
            return "0";
        },
        getSuspendData: function (persistList) {
            // persistList is not used in ActNow!, which has a fixed set of saves.
            var character1 = this.variables['character_1'] || NO_CHAR,
                character2 = this.variables['character_2'] || NO_CHAR,
                character3 = this.variables['character_3'] || NO_CHAR;

            var suspendData = this.variables['current_scene_name']
                + "," + this.variables.playThrough
                + "," + character1
                + "," + character2
                + "," + character3
                + "," + this.variables.decisionsPrevious.join("|")
                + "," + this.variables.decisionsCurrent.join("|");
            log.warn(suspendData);
            return suspendData;
        },
        recordDecision: function (dp, answer) {
            log.warn("Recording decision " + dp + " / " + answer);
            var dIndex = parseInt(dp.substr(2), 10);
            this.variables.decisionsCurrent[dIndex-1] = answer;
            this.variables.score += this.scores[answer];
        },
        /**
         * Increase the playthrough count, optionally marking this act complete.
         * This function assumes the numbers may be strings, and forces them to numbers.
         * @param completeCount optional value at which to mark the act complete.
         */
        incrementPlaythrough: function( completeCount ) {
            log.warn("increasing play through");
            if( !completeCount ) {
                throw "You must provide a complete count.";
            }
            var completed = false;
            this.variables.playThrough = parseInt(this.variables.playThrough, 10);

            completeCount = parseInt(completeCount,10);

            // If we've completed the desired number of play throughs, mark complete.
            if( this.variables.playThrough === completeCount ) {
                log.warn("Target playthroughs reached");
                this.variables.playThrough = 0;
                completed = true;
            }

            // Now go to the next playThrough.
            this.variables.playThrough++;
            this.variables['current_scene_name'] = this.variables['default_scene_name'];
            // Copy the decision points and start a new set.
            this.variables.decisionsPrevious = this.variables.decisionsCurrent;
            this.variables.decisionsCurrent =  ["XX", "XX", "XX", "XX", "XX", "XX", "XX", "XX", "XX"];
            return completed;
        },
        /**
         * Clear out any saved choices to undefined. currently this involves which characters the
         * player selected.
         */
        clearSavedChoices: function() {
            this.variables['character_1'] = undefined;
            this.variables['character_2'] = undefined;
            this.variables['character_3'] = undefined;
        }
    });

    module.exports = ActNowData;
}());

},{"basejs":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\basejs\\Base.js","lodash":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\lodash\\index.js","loglevel":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\loglevel\\lib\\loglevel.js","util":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\util\\util.js"}],"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\play\\models\\basic.js":[function(require,module,exports){
/**
 * @author George Frick
 * @version 1.0.0
 * @creation 10/30/2017
 * Copyright 2017 Children's Hospital
 * This software is the property of Children's Hospital.
 *
 * Represent a specific Play Model strategy for a set of courses/activities.
 */
(function () {

    var _ = require('lodash');
    var log = require('loglevel');
    var Base = require('basejs');

    var BasicData = Base.extend( {
        constructor: function() {
            this.variables = {
                score: 0
            };
        },
        /**
         * This is where you would implement special behavior for a custome model strategy.
         * You can return an event string from this and it will be dispatched.
         */
        handleSpecialVar: function( variable, value ) {
           return null;
        },
        /**
         * Something has changed in the model. If a variable changes, the state
         * of the act might change, so ignore a value staying the same.
         */
        setVar: function( variable, value ) {
            //log.warn("Set Variable: " + variable + " = " + value);
            if( variable === "score" ) {
                this.variables["score"] += parseInt(value,10);
                return true;
            } else if( this.variables[variable] !== value )  {
                // Do not act on a value staying the same.
                this.variables[variable] = value;
                return true;
            }
            return false;
        },
        getVar: function( variable ) {
            var temp = this.variables[variable];
            return temp;
        },
        /**
         * Handle data that already existed in SCORM.
         * Data looks like: [VAR:VALUE|VAR:VALUE]
         */
        restoreData: function (suspendData) {
            if( suspendData ) {
                var suspendSet = suspendData.split("|");
                var pair;
                _.each(suspendSet, function (valuePair) {
                    pair = valuePair.split(":");
                    if (pair.length === 2 && pair[1] !== 'undefined' && pair[1] !== "null") {
                        this.variables[pair[0]] = pair[1];
                    }
                }, this);
                log.warn(suspendData);
                if (suspendData) {
                    this.variables.score = 0;
                }
            }
        },
        /**
         * For the basic model, save everything that it's told to save.
         * @param persistList
         * @returns {string}
         */
        getSuspendData: function (persistList) {
            var suspendData = "";
            var suspendEntries = [];
            _.each( persistList, function( keyValue ) {
                // only save defined variables.
                if( this.variables[keyValue] ) {
                    suspendEntries.push(keyValue + ":" + this.variables[keyValue]);
                }
            }, this);
            if( suspendEntries.length > 0 ) {
                suspendData = suspendEntries.join("|");
            }
            return suspendData;
        }
    });

    module.exports = BasicData;
}());

},{"basejs":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\basejs\\Base.js","lodash":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\lodash\\index.js","loglevel":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\loglevel\\lib\\loglevel.js"}],"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\play\\models\\model-registry.js":[function(require,module,exports){
/**
 * @author George Frick
 * @version 1.0.0
 * @creation 09/11/2017
 * Copyright 2015 Children's Hospital
 * This software is the property of Children's Hospital.
 *
 * This is a registry and construction factory for Model Strategies; which should not be instantiated on their own, only
 * from this creation point.
 */
(function () {
    'use strict';
    var _ = require('lodash');
    var log = require('loglevel');
    var Base = require('basejs');

    var ActNow = require('./actnow');
    var Basic = require('./basic');

    var ModelRegistry = Base.extend( {
        constructor: function() {
            this.models = {};
            this.modelTypes = [];
        },
        registerModel: function( type, model ) {
            _.each( this.modelTypes, function(knownType) {
                if( knownType === type ) {
                    throw "You are registering a model type that already exists: " + type;
                }
            });
            this.modelTypes.push(type);
            this.models[type] = model;
        },
        getModel: function( type ) {
            log.warn("Returning model of type: " + type);
            return this.models[type];
        },
        isAvailableType: function(type) {
            var found = false;
            _.each( this.modelTypes, function(knownType) {
                if( knownType === type ) {
                    found = true;
                }
            });
            return found;
        },
        getAvailableTypes: function() {
            // Return a clone, to make it read only.
            return _.clone(this.modelTypes);
        }
    });

    var ModelFactory = new ModelRegistry();

    /* General Actors, or reusable across courses */
    ModelFactory.registerModel("actnow", ActNow );
    ModelFactory.registerModel("basic", Basic );

    module.exports = ModelFactory;
}());

},{"./actnow":"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\play\\models\\actnow.js","./basic":"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\play\\models\\basic.js","basejs":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\basejs\\Base.js","lodash":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\lodash\\index.js","loglevel":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\loglevel\\lib\\loglevel.js"}],"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\play\\play.js":[function(require,module,exports){
/**
 * @author George Frick
 * @version 2.0.0
 * @creation 10/27/2015
 * Copyright 2015 Children's Hospital
 * This software is the property of Children's Hospital.
 *
 * This is the top level controller for the scene engine, Play->Act(s)->Scene(s)->Actors
 * The Play object manages all of the Acts in a Play, showing one act at a time and accepting events from Act objects.
 *
 * The general idea is that an Act is allowed to use the game object for drawing to the screen, sound, and I/O. There
 * can be more than one act instantiated, and they are stacked on top of each other (z-index). Each Act is responsible
 * for cleaning itself up and removing from the game anything it added. An Act must only conform to the act interface,
 * it does not have to be a play-scene.
 *
 * If any of the acts have objectives, then the entire play (scorm activity) will not be marked complete until all
 * objective acts have reported as completed. If no acts have objectives, then the entire play will be marked complete
 * when the default act reports complete.
 *
 * This what the configuration should look like. In the general case, this will come from phaser. But you could just
 * pass a configuration object in.
 * {
 *   "name": "Name of the play",
 *   "description": "You may use this line as in-data documentation.",
 *   "scorm": true|false,
 *   "logging": true|false,
 *   "acts": {
 *     "default": { // You MUST have an act called 'default' !
 *       "id": "default", // this is an internal ID used to store things in the phaser cache. It should be unique among acts.
 *       "description": "Every set of acts has a default, which is the act that is started by default.",
 *       "name": "Grade 6 Act Now!",
 *       "data": "media/sceneData.json",
 *       "theme": "media/theme.json",
 *       "objective": "x", // Optional, object to complete when act is complete
 *       "objectives": [ "a", "b", c"] // optional, may still have "objective" as well.
 *       "type": "scene" // optional, defaults to "scene", specifies what type of Act to instantiate.
 *     },
 *     "act2": {
 *       "id": "act2",
 *       "description": "this is the exciting second act!",
 *       "name": "Act Two!",
 *       "data": "media/sceneData.json",
 *       "theme": "media/theme.json"
 *     },
 *     ...
 *   }
 * }
 */
(function () {
	"use strict";
	var log = require("loglevel"),
		_ = require("lodash"),
		Base = require("basejs"),
		ActManager = require("../act/play-act-manager"),
		ScormService = require("./scorm-service");

	var OBJECTIVE_PREFIX = "objective_";

	var Play = Base.extend({
		/**
		 * Creations of the Play object, requiring both a Phaser game and a configuration object (JSON)
		 * the configuration should include a name, description and a set of acts. The acts MUST include
		 * an act labelled 'default'.
		 */
		constructor: function (game, config, settings) {
			if (!game || !config || !settings) {
				throw "Creating a Play requires a Phaser game instance, configuration object and settings.";
			}
			if (!config.acts) {
				throw "There is no 'acts' field in the play.json";
			}
			this.game = game;
			this.config = config;
			this.playActSet = config.acts;
			this.settings = settings;
			this.actInstances = {};
			this.previousAct = null;
			this.waitingOn = [];
			this.scormService = new ScormService(
				this.game.scorm,
				this.settings,
				this.playActSet
			);

			this.commands = {
				change_act: "change_act",
				mute_game: "mute_game",
				mute_game_on: "mute_on",
				save: "save",
				complete: "complete",
				objective: "objective",
			};

			if (!this.playActSet[this.settings.default_act_name]) {
				throw "Play could not start. You do not have a default ACT. See play.js header.";
			}

			if (config.autoScale) {
				this.game.scale.scaleMode = Phaser.ScaleManager.SHOW_ALL;
			}
		},
		/**
		 * Set the Default Act as the next Act.
		 */
		selectDefaultAct: function () {
			this.selectNextAct(this.settings.default_act_name);
		},
		/**
		 * Creates or looks up an existing Act. Any currently running Act will
		 * be stopped. When a new Act is created, it is cached.
		 * This does NOT start the Act, after selectNextAct(), startNextAct() must be called.
		 * @param actName Name of Act from Play.json to start.
		 */
		selectNextAct: function (actName) {
			// Exit any current act.
			if (this.currentAct) {
				// the default act should not be stopped.
				if (this.currentAct.actName !== this.settings.default_act_name) {
					this.currentAct.stop();
				}
				this.previousAct = this.currentAct;
			}

			// Don't create an act that already exists.
			if (this.actInstances[actName]) {
				this.currentAct = this.actInstances[actName];
				this.currentAct.setScormString(this.playActSet[actName].suspendData);
				return;
			}

			// Look up and create an Act that doesn't exist.
			var nextActData = this.playActSet[actName];
			var nextActTheme = JSON.parse(
				this.game.cache.getText(this.settings.theme_prefix + nextActData.id)
			);
			if (this.config.autoScale) {
				// If autoScale is set to true in the play.json file add a property to the theme to smuggle it into the act for use by actors, who do not have access to the play.json settings. For example, the WISTIA actor sizes the video div differently according to the autoScale setting.
				nextActTheme.internal_autoScale = true;
			}

			this.currentAct = ActManager.getActInstance(
				nextActData.type,
				this.game,
				nextActTheme,
				actName
			);
			// Only the default Act counts as stand alone.
			if (this.currentAct.setStandAlone) {
				this.currentAct.setStandAlone(
					actName === this.settings.default_act_name
				);
			}
			// Subscribe to all events.
			this.currentAct.events.onGameChoice.add(this.onGameChoiceEvent, this);
			this.currentAct.events.onActStatus.add(this.onActStatusEvent, this);
			// Restore the Act from the "Save" point.
			this.currentAct.setScormString(nextActData.suspendData);
			this.actInstances[actName] = this.currentAct;
		},
		/**
		 *  This is the hook into restarting the main Phaser state and launching a new Act.
		 *  The new Act should have already been selected using selectNextAct().
		 *  This will lead to showAct() being called from the main state.
		 */
		startNextAct: function (isRestart) {
			this.game.state.restart(false, false, isRestart); // true, false means "clear world, keep cache"
		},
		/**
		 * This functional will actually start an act up, and then provide it with information on the other acts.
		 * It will tell an act which previous act exited, allowing an act to know both which act came before and
		 * that it isn't first.
		 * Second, it will inform a non-first act if the previous acts objective status (act_exited + objective status)
		 * For a first (Default) act, the status of every other act objective will be passed in, but only if that
		 * act is tracking by objective.
		 * @param isRestart
		 */
		showNextAct: function (isRestart) {
			if (!this.currentAct) {
				throw "No current Act to start!";
			}

			var singleActData = this.playActSet[this.currentAct.actName];

			// If we have an objective, it may need to be marked as started.
			this.scormService.markActStarted(singleActData.id);

			// There is no need to start the default act, it's not stopped. But this may be the first call.
			if (
				!this.previousAct ||
				this.currentAct.actName !== this.settings.default_act_name
			) {
				if (this.currentAct.onPreloadFinished) {
					this.currentAct.onPreloadFinished();
				}
				this.currentAct.start(isRestart);
			}
		},
		/**
		 * This will send variables to the current act from the previous or all acts, so when the default
		 * act starts, it will know about all tracked objective variables in other acts.
		 */
		sendCrossActVariables: function () {
			var objectiveSet = [];
			var temp;

			if (this.previousAct) {
				this.currentAct.onGameChoice({ act_exited: this.previousAct.actName });
				var previousActData = this.playActSet[this.previousAct.actName];
				objectiveSet = this.scormService.getActObjectiveStatusSet(
					previousActData.id
				);
			} /* default act */ else {
				objectiveSet = this.scormService.getPlayObjectiveStatusSet();
			}
			_.each(
				objectiveSet,
				function (eachObjective) {
					temp = {};
					temp[OBJECTIVE_PREFIX + eachObjective.getId()] =
						eachObjective.getStatus();
					this.currentAct.onGameChoice(temp);
				},
				this
			);
		},
		/**
		 * The player made a game choice. This may be a special command for the Play.
		 * Attempt to execute it, and allow the execution to determine if the event was
		 * consumed.
		 * @param eventPair
		 */
		onGameChoiceEvent: function (eventPair) {
			var tempVars = _.pairs(eventPair)[0];
			eventPair.consumed = this.playCommand(tempVars[0], tempVars[1]);
		},
		/**
		 * The player caused a status event; usually either a save or a completion of an activity. These aren't
		 * caued by player's directly, but by the Scenes/Acts.
		 * "act_complete" -> increment playthrough -> "complete" status event.
		 * @param eventCommand
		 */
		onActStatusEvent: function (eventCommand, eventArg) {
			if (eventCommand === this.commands.save) {
				this.saveScormData();
			} else if (eventCommand === this.commands.complete) {
				this.scormService.handleActComplete(this.currentAct.actName); // actName === actId
			} else if (eventCommand === this.commands.objective) {
				this.scormService.markObjectiveComplete(eventArg);
				this.saveScormData();
			}
		},
		/**
		 * Execute a Play level command, such as saving or changing acts.
		 * Returns true if it consumes the command/choice.
		 */
		playCommand: function (command, arg) {
			log.warn("play command: " + command + " / " + arg);
			if (command === this.commands.change_act) {
				log.warn("Changing act to " + arg);
				if (this.playActSet[arg]) {
					this.selectNextAct(arg);
					this.startNextAct(true);
				} else {
					log.error("Request to change to non-existant act: " + arg);
				}
			} else if (command === this.commands.save) {
				this.saveScormData();
			} else if (command === this.commands.mute_game) {
				// GJF - 09/20/17 - I may have just broke mute for all past activities by fixing this line.
				this.game.sound.mute =
					arg === this.commands.mute_game_on ? true : false;
				return false; // Return false because this isn't 'consuming', it's a side effect special case.
			} else {
				return false;
			}
			return true;
		},
		/**
		 * Load the theme and data files for each act in play.json
		 * This used to "preload", but now it returns a set, the play is no longer responsible for loading
		 * resources.
		 * This can't be done for the act because it would break backwards compatibility :-(
		 */
		getRequiredResourceList: function () {
			var preloadSet = [];
			_.each(
				this.getActsList(),
				function (act) {
					log.warn(
						"loading text " +
							act.theme +
							" as " +
							(this.settings.theme_prefix + act.id)
					);
					preloadSet.push({
						key: this.settings.theme_prefix + act.id,
						file: this.game.config.assetPath + act.theme,
						type: "json",
					});
				},
				this
			);
			return preloadSet;
		},
		/**
		 * When the main Phaser state is restarted, during the Phaser preload function, this preload will be called
		 * so that the new Act has a valid entry point to loading assets. The Act can load any resources necessary.
		 */
		preloadAct: function () {
			if (this.currentAct) {
				this.currentAct.preload();
			}
		},
		/**
		 * The act determines when it is done loading, so when asked, delegate to the Act.
		 */
		isPreloadActComplete: function () {
			return this.currentAct && this.currentAct.isPreloadComplete();
		},
		isLogging: function () {
			return this.config && this.config.logging === true;
		},
		getActsList: function () {
			return this.playActSet;
		},
		isScormEnabled: function () {
			return this.config && this.config.scorm === true;
		},
		renderDebug: function () {
			if (this.currentAct && this.settings.debug === true) {
				this.currentAct.renderDebug();
			}
		},
		/**
		 * this is the game loop. If the act is a game, or has a delay, or needs to do timing, it SHOULD NOT
		 * use its own update function, but should instead provide a tickUpdate. This will be called here so
		 * that the update() calls are controlled from the play.
		 * @param time
		 */
		tickUpdate: function (time) {
			if (this.currentAct) {
				this.currentAct.tickUpdate(this.game.time.now);
			}
		},
		loadScormData: function () {
			this.scormService.loadScormObjectiveData();
			this.scormService.loadScormSuspendData();
		},
		saveScormData: function () {
			this.scormService.saveScormObjectiveData();
			var scormString = this.currentAct.getScormString();
			if (scormString && scormString.length > 0) {
				this.scormService.saveScormSuspendData(
					this.currentAct.actName,
					scormString
				);
			}
		},
	});

	module.exports = Play;
})();

},{"../act/play-act-manager":"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\act\\play-act-manager.js","./scorm-service":"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\play\\scorm-service.js","basejs":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\basejs\\Base.js","lodash":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\lodash\\index.js","loglevel":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\loglevel\\lib\\loglevel.js"}],"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\play\\scorm-service.js":[function(require,module,exports){
/**
 * Represent the set of scorm operations that are required by a Play. This involves the saving, loading and updating
 * of all objectives and suspend data.
 *
 * This service does not handle game events or send game notifications to acts/scenes/etc. It only manages scorm
 * related data as required.
 */
(function () {
    'use strict';
    var log = require('loglevel');
    var _ = require('lodash');
    var Base = require("basejs");

    var STATUS_NOT_ATTEMPTED = "not attempted";
    var STATUS_ATTEMPTED = "incomplete";
    var STATUS_COMPLETED = "completed";

    var ScormObjective = Base.extend({
        constructor: function( actId, index, id, status ) {
            this.actId = actId;
            this.index = index;
            this.id = id;
            this.status = status;
        },
        setStatus: function( newValue ) {
            this.status = newValue;
        },
        getStatus: function() {
            return this.status;
        },
        getId: function() {
            return this.id;
        },
        getIndex: function() {
            return this.index;
        },
        getActId: function() {
            return this.actId;
        }
    });

    var ScormService = Base.extend({
        constructor: function (scorm, settings, playActSet) {
            if (!scorm || !settings || !playActSet) {
                throw "You must provide an interface to scorm and settings.";
            }
            this.scorm = scorm;
            this.settings = settings;
            this.playActSet = playActSet;
            this.objectiveSet = [];
        },
        markActStarted: function (actId) {
            _.each( this.getActObjectiveStatusSet(actId), function(objective) {
                if (objective.getStatus() !== STATUS_COMPLETED) {
                    objective.setStatus(STATUS_ATTEMPTED);
                    this.saveObjective(objective);
                }
            }, this);
        },
        markObjectiveComplete: function( objectiveId ) {
            var objective = _.findWhere( this.objectiveSet, { id: objectiveId});
            if( objective ) {
                objective.setStatus(STATUS_COMPLETED);
                this.saveObjective(objective);
                this.checkPlayComplete();
            }
        },
        getActObjectiveStatusSet: function (actId) {
            return _.where(this.objectiveSet, {actId: actId});
        },
        getPlayObjectiveStatusSet: function () {
           return this.objectiveSet;
        },
        playHasObjectives: function() {
           return (this.objectiveSet.length > 0);
        },
        /**
         * This should be private, it's part of the startup of this service and outside sources should not access
         * the raw data like this; which is in json that should be considered read only.
         * This builds a raw list of objective names based on every act in the play data.
         */
        getRawObjectiveList: function( actData ) {
          var objectList = [];
          if( actData.objective ) {
              objectList.push(actData.objective);
          }
          if( actData.objectives ) {
              objectList = objectList.concat(actData.objectives);
          }
          return objectList;
        },
        /**
         * This will load or initialize an objective object for every objective in the play. It will initialize
         * the object with SCORM if it hasn't been previously initialized.
         */
        loadScormObjectiveData: function() {
            var objectiveIndex = 0;
            var existingObjective;
            var actObjectiveList;
            var newObjective;

            _.each( this.playActSet, function( singleAct ) {
                actObjectiveList = this.getRawObjectiveList(singleAct);
                _.each( actObjectiveList, function( eachObjective ) {
                    newObjective = new ScormObjective(singleAct.id, objectiveIndex, eachObjective, STATUS_NOT_ATTEMPTED);
                    existingObjective = this.loadObjective(objectiveIndex);

                    // Already existed, otherwise we wouldn't have a matching id!
                    if( existingObjective.status && existingObjective.id === newObjective.getId() ) {
                        newObjective.setStatus(existingObjective.status);
                    } else {
                        this.saveObjective(newObjective);
                    }
                    objectiveIndex++;
                    this.objectiveSet.push(newObjective);
                }, this);

            }, this);
        },
        saveScormObjectiveData: function() {
            // Scorm objectives are not regularly saved.
        },
        loadScormSuspendData: function() {
             var scormData = this.scorm.getSuspendData() || "";
            var index = 0;
            log.warn(scormData);

            scormData = scormData.split(this.settings.scorm_separator_char);

            _.each( this.playActSet, function( singleAct ) {
                singleAct.suspendData = scormData[index] || "";
                index++;
            }, this);
        },
        saveScormSuspendData: function( actId, scormString ) {
            var scormData = [];
            var saveString;

            this.playActSet[actId].suspendData = scormString;

            _.each( this.playActSet, function(singleAct) {
                scormData.push(singleAct.suspendData);
            }, this);

            saveString = scormData.join(this.settings.scorm_separator_char);
            log.warn(saveString);
            this.scorm.setSuspendData(saveString);
        },
        /**
         * An act complete event has been sent, generally meaning "complete the only objective for this act".
         * If there is more than on objective in the act, this function only checks for 'all complete'.
         *
         * In "Act Now", both "objective_complete" and "act_complete" would lead to this. For non-actnow, currently
         * only "objective_complete" will lead to this, but other models may act differently. This depends on a
         *  "complete" act-status event.
         * @param actId
         */
        handleActComplete: function(actId) {
            var actObjectives = [];
            if( this.playHasObjectives() ) {
                actObjectives =  this.getActObjectiveStatusSet(actId);

                // There is only one objective, so mark it complete.
                if( actObjectives.length === 1 ) {
                    actObjectives[0].setStatus(STATUS_COMPLETED);
                    this.saveObjective(actObjectives[0]);
                }
                this.checkPlayComplete();
            } else {
                // No objectives - you're done!
                this.scorm.markComplete();
            }
        },
        checkPlayComplete: function() {
            var allComplete = true;
            _.each( this.objectiveSet, function(objective) {
                if( objective.getStatus() !== STATUS_COMPLETED ) {
                    allComplete = false;
                }
            }, this);
            if( allComplete ) {
                this.scorm.markComplete();
            }
        },
        loadObjective: function( objectiveIndex ) {
            return this.scorm.getObjective(objectiveIndex);
        },
        saveObjective: function( objective ) {
            this.scorm.setObjective(objective.getIndex(), objective.getId(), objective.getStatus());
        }
    });

    module.exports = ScormService;
}());
},{"basejs":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\basejs\\Base.js","lodash":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\lodash\\index.js","loglevel":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\loglevel\\lib\\loglevel.js"}],"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene-engine.js":[function(require,module,exports){
/**
 * @author George Frick
 * @version 1.0.0
 * @creation 06/04/2015
 * Copyright 2015 Children's Hospital
 * This software is the property of Children's Hospital.
 */
(function () {
	var BootState = require("./states/boot.js"),
		PreloadState = require("./states/preload.js"),
		MainState = require("./states/main.js"),
		Scorm = require("./scorm");

	module.exports = function (domElement, width, height) {
		var config = {
			width: width,
			height: height,
			renderer: Phaser.CANVAS, // Set to Canvas to help IE.
			parent: domElement,
			transparent: false,
			antialias: true,
			forceSetTimeOut: false,
			assetPath: _environmentSettings.assetPath, // not a standard Phaser property - used to pass in relative loading paths for different host environments (LMS, CMS, etc.). _environmentSettings.assetPath is declared in HTML file.
		};

		var settings = {
			play_json_key: "playData",
			loading_image_key: "preloaderBar",
			loading_image_url: config.assetPath + "media/cwlogo.png",
			loading_bg_color: "0x0074c8",
			loading_font: {
				font: "Arial, Helvetica, Sans",
				fontSize: 26,
				fill: "#ffffff",
			},
			loading_text: "Loading...",
			play_json_url: config.assetPath + "media/play.json",
			theme_prefix: "theme_",
			data_prefix: "data_",
			preload_state_name: "preload",
			main_state_name: "main",
			boot_state_name: "boot",
			default_act_name: "default",
			scorm_separator_char: "$",
			logging: true,
		};

		var game = new Phaser.Game(config);
		game.scorm = new Scorm();
		game.state.add(settings.boot_state_name, new BootState(settings));
		game.state.add(settings.preload_state_name, new PreloadState(settings));
		game.state.add(settings.main_state_name, new MainState(settings));
		game.state.start(settings.boot_state_name);

		return game;
	};
})();

},{"./scorm":"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scorm.js","./states/boot.js":"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\states\\boot.js","./states/main.js":"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\states\\main.js","./states/preload.js":"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\states\\preload.js"}],"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene\\actions\\add-actor.js":[function(require,module,exports){
/**
 * @author George Frick
 * @version 1.0.0
 * @creation 07/07/2015
 * Copyright 2015 Children's Hospital
 * This software is the property of Children's Hospital.
 *
 * An action that adds an actor to a scene.
 */
(function () {

    var _ = require('lodash'),
        log = require('loglevel'),
        Base = require('basejs');

    var AddActorAction = Base.extend( {
        execute: function(act) {
            if( !act ) {
                throw "action requires an act to work on.";
            }
            _.each( this.args, function( eachArg ) {
                act.actCommand("add-actor", eachArg);
            }, this);
        },
        constructor: function( data ) {
            this.args = data;
        }
    });

    module.exports = AddActorAction;
}());

},{"basejs":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\basejs\\Base.js","lodash":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\lodash\\index.js","loglevel":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\loglevel\\lib\\loglevel.js"}],"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene\\actions\\change-objective.js":[function(require,module,exports){
/**
 * @author George Frick
 * @version 1.0.0
 * @creation 07/07/2015
 * Copyright 2015 Children's Hospital
 * This software is the property of Children's Hospital.
 *
 * An action that adds an actor to a scene.
 */
(function () {

    var _ = require('lodash'),
        log = require('loglevel'),
        Base = require('basejs');

    var ChangeObjectiveAction = Base.extend( {
        execute: function(act) {
            if( !act ) {
                throw "action requires an act to work on.";
            }
            _.each( this.args, function( eachArg ) {
                act.actCommand("objective", eachArg);
            }, this);
        },
        constructor: function( data ) {
            this.args = data;
        }
    });

    module.exports = ChangeObjectiveAction;
}());

},{"basejs":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\basejs\\Base.js","lodash":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\lodash\\index.js","loglevel":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\loglevel\\lib\\loglevel.js"}],"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene\\actions\\change-scene.js":[function(require,module,exports){
/**
 * @author George Frick
 * @version 1.0.0
 * @creation 07/07/2015
 * Copyright 2015 Children's Hospital
 * This software is the property of Children's Hospital.
 *
 * An action that changes the scene.
 */
(function () {

    var _ = require('lodash'),
        log = require('loglevel'),
        Base = require('basejs');

    var SceneAction = Base.extend( {
        execute: function(act) {
            if( !act ) {
                throw "action requires an act to work on.";
            }
            act.showNewScene(this.args[0]);
        },
        constructor: function( data ) {
            this.args = data;
        }
    });

    module.exports = SceneAction;
}());

},{"basejs":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\basejs\\Base.js","lodash":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\lodash\\index.js","loglevel":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\loglevel\\lib\\loglevel.js"}],"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene\\actions\\check-outcomes.js":[function(require,module,exports){
/**
 * @author George Frick
 * @version 1.0.0
 * @creation 07/07/2015
 * Copyright 2015 Children's Hospital
 * This software is the property of Children's Hospital.
 *
 * An action that does an additional outcome check based on given variable(s), can be used to force the check
 * of outcomes even when the player hasn't directly acted on it.
 */
(function () {

    var _ = require('lodash'),
        log = require('loglevel'),
        Base = require('basejs');

    var CheckOutcomesAction = Base.extend( {
        execute: function(act) {
            if( !act ) {
                throw "action requires an act to work on.";
            }
            _.each( this.args, function( eachArg ) {
                act.checkCurrentSceneOutcomes(eachArg);
            }, this);
        },
        constructor: function( data ) {
            this.args = data;
        }
    });

    module.exports = CheckOutcomesAction;
}());

},{"basejs":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\basejs\\Base.js","lodash":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\lodash\\index.js","loglevel":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\loglevel\\lib\\loglevel.js"}],"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene\\actions\\game-choice.js":[function(require,module,exports){
/**
 * @author George Frick
 * @version 1.0.0
 * @creation 07/07/2015
 * Copyright 2015 Children's Hospital
 * This software is the property of Children's Hospital.
 *
 * The most basic of actions, record a variable.
 * This action takes three arguments.
 * 1 - name of variable|choice|command
 * 2 - value of variable|choice|command
 * 3 - boolean force value, optional.
 *
 * If you set the 'force value', the value will first be removed from the model manually. This would allow you to
 * set a value (and cause an outcome) multiple times in a row. This would normally be blocked because the model
 * ignores values being set repeatedly.
 */
(function () {

    var _ = require('lodash'),
        log = require('loglevel'),
        Base = require('basejs');

    var VariableAction = Base.extend( {
        execute: function(act) {
            if( !act ) {
                throw "action requires an act to work on.";
            }
            var temp = {};
            temp[act.model.getValue(this.args[0])] = act.model.getValue(this.args[1]);
            if( this.args[3] === true ) {
                act.clearVariable(this.args[0]);
            }
            act.onGameChoiceAction(temp);
        },
        constructor: function( data ) {
            this.args = data;
        }
    });

    module.exports = VariableAction;
}());

},{"basejs":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\basejs\\Base.js","lodash":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\lodash\\index.js","loglevel":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\loglevel\\lib\\loglevel.js"}],"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene\\actions\\mark-complete.js":[function(require,module,exports){
/**
 * @author George Frick
 * @version 1.0.0
 * @creation 07/07/2015
 * Copyright 2015 Children's Hospital
 * This software is the property of Children's Hospital.
 *
 * An action that adds an actor to a scene.
 */
(function () {

    var _ = require('lodash'),
        log = require('loglevel'),
        Base = require('basejs');

    var MarkCompleteAction = Base.extend( {
        execute: function(act) {
            if( !act ) {
                throw "action requires an act to work on.";
            }
            _.each( this.args, function( eachArg ) {
                act.actCommand("activity_complete", eachArg);
            }, this);
        },
        constructor: function( data ) {
            this.args = data;
        }
    });

    module.exports = MarkCompleteAction;
}());

},{"basejs":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\basejs\\Base.js","lodash":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\lodash\\index.js","loglevel":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\loglevel\\lib\\loglevel.js"}],"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene\\actions\\mh\\mh-change-scene.js":[function(require,module,exports){
/**
 * @author Paul Knell
 * @version 1.0.0
 * @creation 12/20/2018
 * Copyright 2018 Children's Hospital
 * This software is the property of Children's Hospital.
 *
 * This action is customized for Mission-Health and used
 * to update SCORM data prior to switching scenes. This was needed
 * because setting the SCORM "completed" flag (at the end of the lesson)
 * may take 1-2 seconds.  Consequently, we need to set this immediately
 * prior to switching to the mission-completed scene AND we need to stop
 * audio first to avoid it being interfered with by the synchronous HTTP request
 * that SCORM uses. Refer to GitLab Issue #427.
 */
(function () {

    var _ = require('lodash'),
        log = require('loglevel'),
        VariableAction = require('../game-choice.js'),
        Base = require('basejs');

    var MhSceneAction = Base.extend( {
        execute: function(act) {
            if( !act ) {
                throw "action requires an act to work on.";
            }

            var newSceneName = this.args[0];
            var varsMap = this.args[1] || {};

            _.forOwn(varsMap, function(value, varName) {
                (new VariableAction([varName, value])).execute(act);
            });

            act.audioService.stopScene(); // Stop audio before sending SCORM updates to avoid interrupted audio

            act.events.onActStatus.dispatch("save");

            act.showNewScene(newSceneName);
        },
        constructor: function( data ) {
            this.args = data;
        }
    });

    module.exports = MhSceneAction;
}());

},{"../game-choice.js":"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene\\actions\\game-choice.js","basejs":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\basejs\\Base.js","lodash":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\lodash\\index.js","loglevel":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\loglevel\\lib\\loglevel.js"}],"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene\\actions\\remove-actor.js":[function(require,module,exports){
/**
 * @author George Frick
 * @version 1.0.0
 * @creation 07/07/2015
 * Copyright 2015 Children's Hospital
 * This software is the property of Children's Hospital.
 *
 * An action that changes the scene.
 */
(function () {

    var _ = require('lodash'),
        log = require('loglevel'),
        Base = require('basejs');

    var RemoveActorAction = Base.extend( {
        execute: function(act) {
            if( !act ) {
                throw "action requires an act to work on.";
            }
            _.each( this.args, function( eachArg ) {
                act.actCommand("remove-actor",act.model.getValue(eachArg));
            }, this);
        },
        constructor: function( data ) {
            this.args = data;
        }
    });

    module.exports = RemoveActorAction;
}());

},{"basejs":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\basejs\\Base.js","lodash":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\lodash\\index.js","loglevel":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\loglevel\\lib\\loglevel.js"}],"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene\\actions\\variable-increment.js":[function(require,module,exports){
/**
 * @author Paul Knell
 * @version 1.0.0
 * @creation 10/15/2018
 * Copyright 2018 Children's Hospital
 * This software is the property of Children's Hospital.
 *
 * This action adds a value to a numeric variable.
 * Since all variables are stored as strings, it will first be parsed into a number.
 * 
 * This action takes three arguments.
 * 1 - name of the variable to increment
 * 2 - numeric amount of the increment (or decrement, if negative)
 */
(function () {

    var _ = require('lodash'),
        log = require('loglevel'),
        Base = require('basejs');

    var VariableIncrementAction = Base.extend( {
        execute: function(act) {
            if( !act ) {
                throw "action requires an act to work on.";
            }

            var numericValue = Number(act.model.getValue('$'+this.args[0]));
            if (isNaN(numericValue)) {
                throw "action requires the variable to be number.";
            }

            var increment = Number(this.args[1]);
            if (isNaN(increment)) {
                throw "action requires the increment to be number.";
            }

            numericValue += increment;

            var temp = {};
            temp[act.model.getValue(this.args[0])] = numericValue.toString();

            act.onGameChoiceAction(temp);
        },
        constructor: function( data ) {
            this.args = data;
        }
    });

    module.exports = VariableIncrementAction;
}());

},{"basejs":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\basejs\\Base.js","lodash":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\lodash\\index.js","loglevel":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\loglevel\\lib\\loglevel.js"}],"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene\\actors\\actnow\\actor-announcer.js":[function(require,module,exports){
/**
 * @author George Frick
 * @version 1.0.0
 * @creation 07/01/2015
 * Copyright 2015 Children's Hospital
 * This software is the property of Children's Hospital.
 *
 * An announcer bubble. The announcer box is optional.
 * It will display text and optionally play audio.
 * This is very similar to the speech bubble, only it isn't listening for events to change its text.
 *
 * {
 *    "name": "announcerBox",
 *     "type": "announcer",
 *     "location": [ 2, 5 ], // location on screen.
 *     "text": "Welcome to Newbridge Middle School.", // text to display.
 *     "audio": "nar_6th_int_01", // Audio to play
 *     "announcerBox": true // show the announcer box
 *     "startDelay": 1000 // optional, delay in ticks before adding the actor (think of a tick as a millisecond, defined in main.js)
 * },
 *
 * @TODO update this class to show any icon as the 'announcer'.
 */
(function () {
    'use strict';
    var _ = require('lodash'),
        log = require('loglevel'),
        Actor = require('../actor');

    var AnnouncerActor = Actor.extend({
        // Constructor is in parent.
        enterScene: function () {
            this.text = this.data.text;
            this.audio = this.data.audio;
            this.key = this.data.key;

            this.currentX = this.data.location[0];
            this.currentY = this.data.location[1];
            if (this.data.announcerBox) {
                this.addAnnouncerBox();
            }
            this.data.inverseSoundEvents = true;
            this.addWindow();
            this.setSpeech();
        },
        getRequiredFields: function() {
            return [ "location" ];
        },
        addAnnouncerBox: function () {
            this.announcerBox = this.game.add.sprite(this.data.location[0], this.data.location[1], this.theme.textureKey,
                this.getImage( 'announcer-box', 'actorImages') );
            this.currentX += this.announcerBox.width - 10;
        },
        /**
         * Add 5 things to a group:
         * 1. A top "sprite" which is the top of the text bubble.
         * 2. Text, representing the text for this sprite and wrapping its font.
         * 3. A middle "tilesprite" which is a repeating middle sprite made to match the height of the text.
         * 4. A bottom "sprite" which is the bottom of the text bubble.
         */
        addWindow: function () {
            if( !this.theme.textWindows || !this.theme.textWindows.announce ) {
                throw "Announcer actor requires textWindows theme entry, and announce section inside it.";
            }
            var windowGroup = this.game.add.group();
            windowGroup.x = this.currentX;
            windowGroup.y = this.currentY;

            var marginX = 8,
                marginY = 20;
            var topWindow = windowGroup.create(0, 0, this.theme.textureKey, this.theme.textWindows.announce.top);

            this.fStyle = this.getFont('bubbleText');
            this.rStyle = this.getFont('replayAudio');
            this.fStyle.wordWrap = true;
            this.fStyle.wordWrapWidth = topWindow.width * .85;

            this.currentText = new Phaser.Text(this.game, marginX + 50, marginY, this.text, this.fStyle);
            windowGroup.add(this.currentText);

            var middleHeight = this.currentText.height - (topWindow.height - marginY);
            if( middleHeight < 5 ) {
                middleHeight = 5;
            }
            var middleWindow = new Phaser.TileSprite(this.game, 0, topWindow.height,
                topWindow.width, middleHeight, this.theme.textureKey, this.theme.textWindows.announce.middle);
            windowGroup.add(middleWindow);

            var bottomY = this.currentText.y + this.currentText.height + marginY;
            var bottomWindow = windowGroup.create(0, topWindow.height + middleWindow.height, this.theme.textureKey, this.theme.textWindows.announce.bottom);

            // 5. Add eventing.
            this.windows = {
                top: topWindow,
                middle: middleWindow,
                bottom: bottomWindow
            };

            _.each(this.windows, function (bubble) {
                bubble.inputEnabled = true;
                bubble.events.onInputOver.add(this.onMouseIn, this);
                bubble.events.onInputOut.add(this.onMouseOut, this);
                bubble.events.onInputUp.add(this.onPointerUp, this);
            }, this);

            this.replayText = new Phaser.Text(this.game, (bottomWindow.x + bottomWindow.width - 40) / 2,
                (topWindow.height + bottomWindow.height + middleWindow.height) / 2, "Replay Audio", this.rStyle);
            this.replayText.anchor.setTo(0.5, 0.5);
            windowGroup.add(this.replayText);
            this.replayText.visible = false;

            this.currentText.bringToTop();
            this.replayText.bringToTop();
            this.windowGroup = windowGroup;
        },
        onMouseIn: function () {
            this.fStyle.fill = this.theme.tints.bubbleText;
            this.currentText.setStyle(this.fStyle);
            this.replayText.visible = true;
        },
        onMouseOut: function () {
            this.fStyle.fill = this.getFont('bubbleText').fill;
            this.currentText.setStyle(this.fStyle);
            this.replayText.visible = false;
        },
        onPointerUp: function () {
            this.dispatchGameSpeech( {text: this.text, audio: this.audio, key: this.key});
        },
        setSpeech: function () {
            this.currentText.setText(this.text);
            // may need to adjust heights/etc.
            this.dispatchGameSpeech( {text: this.text, audio: this.audio, key: this.key});
        },
        destroy: function () {
            this.rStyle = null;
            this.fStyle = null;
            if ( this.windows ) {
                _.each(this.windows, function (bubble) {
                    bubble.inputEnabled = false;
                }, this);
            }
            this.windows = null;
            if ( this.windowGroup ) {
                this.windowGroup.destroy(true);
            }
            if( this.announcerBox ) {
                this.announcerBox.destroy();
                this.announcerBox = null;
            }
            this.freeBaseActor();
        }
    });

    module.exports = AnnouncerActor;
}());

},{"../actor":"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene\\actors\\actor.js","lodash":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\lodash\\index.js","loglevel":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\loglevel\\lib\\loglevel.js"}],"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene\\actors\\actnow\\actor-choice.js":[function(require,module,exports){
/**
 * @author George Frick
 * @version 1.0.0
 * @creation 07/01/2015
 * Copyright 2015 Children's Hospital
 * This software is the property of Children's Hospital.
 *
 * This is the choice actor, which will show the player a multiple choice question. It will also
 * play any audio/text associated with asking question.
 *
 * {
 *     "name": "choices_mandy_1", // unique name for this actor.
 *     "type": "choice", // required type.
 *     "startChoice": "dp1", // which choice to start with from the choiceMap set.
 *     "choiceMap": {
 *         "dp1": { // this is the name of this choice, used when linking choices
 *             "text": "I’m Mandy. Click one of the response bubbles below to respond to me.", // question. It can be blank.
 *             "audio": "6th_int_01", // audio, it is optional.
 *             "key": "mandy", // a key into a set of audio. optional.
 *             "decisionPoint": true, // mark this option for saving.
 *             "choices": [
 *                 {
 *                    "link": "dp2",  // which question/choices to show next.
 *                    "text": "One of these?" // displayed text of this choice.
 *                    "decision": "PR"event | "AL"low | "EN"courage | "PA"rticpate | "DI"scourage  (Required if decisionPoint === true )
 *                 },
 *                 {
 *                    "link": "dp2",
 *                    "text": "So, this is how we talk?"*
 *                 },
 *                 {
 *                    "text": "You mean these bubbles?", // text to show for this choice.
 *                    "variable": "choice_2", // variable to set when this choice is selected.
 *                    "value": "zink_mandy"   // value to set variable to.
 *                }
 *              ]
 *            },
 *            ... // as many choices as you want.
 *          }
 *         },
 *    "startDelay": 1000 // optional, delay in ticks before adding the actor (think of a tick as a millisecond, defined in main.js)
 *
 *  For a decision point, you can stll do a variable/value and link.
 */
(function () {

    var _ = require('lodash'),
        log = require('loglevel'),
        Actor = require('../actor');

    var MAX_CHOICES = 5,
        choiceMap = { "PR" : 0, "DI" : 1, "AL": 2, "EN": 3, "PA": 4},
        marginY = 6,
        marginFont = 25;

    var ChoiceActor = Actor.extend({
        // constructor in parent.
        getRequiredFields: function() {
            return [ "choiceMap", "startChoice" ];
        },
        enterScene: function() {
            this.choiceMap = this.data.choiceMap;
            this.currentChoice = this.choiceMap[this.data.startChoice];

            /**
             * Determine the number of questions and build the correct choice list.
             * If this is a decision point choice, use the previous choices per the formula..
             */
            this.buildActor();
            this.populateChoice();
        },
        buildActor: function () {
            this.buttons = [];
            this.text = [];
            var locationY = 50,
                buttonCnt,
                currButton,
                currText,
                locationX = 0;
            this.fStyle = this.getFont('bubbleText');

            for( buttonCnt = MAX_CHOICES; buttonCnt > 0; buttonCnt-- ) {
                currButton = this.game.add.button(0, 0, this.theme.textureKey, this.onChoice, this,
                    'response-bg-over.png', 'response-bg-up.png', 'response-bg-down.png', 'response-bg-up.png');
                // this.theme.buttons.responses.over, this.theme.buttons.responses.out, this.theme.buttons.responses.down, this.theme.buttons.responses.up
                locationX = (this.game.world.width - currButton.width ) / 2;
                locationY = this.game.world.height - ( (currButton.height + marginY) * buttonCnt);
                currButton.x = locationX;
                currButton.y = locationY;

                currText = new Phaser.Text(this.game, marginFont, currButton.height / 2, "", this.fStyle);
                currButton.addChild(currText);
                currText.anchor.setTo(0, 0.5);

                this.buttons.push(currButton);
                this.text.push(currText);
            }
        },
        populateChoice: function () {
            var index,
                options = this.currentChoice,
                buttonHideCount = MAX_CHOICES - options.choices.length,// how many choices to hide.
                buttonCnt,
                answer,
                showQuestions = [ true, true, true, true, true],
                dpChoices = [],
                chosenIndex,
                previousPlayHidden = -1;

            if( options.decisionPoint === true || options.decisionPoint === "true") {
                this.dpIndex = this.getDecisionIndex();
                log.warn("Showing decision point: " + this.dpIndex);

                // The first two questions are a special case, and we'll only hide one...
                if( this.dpIndex === 0 || this.dpIndex === 1 ) {
                    answer = this.getPreviousPlayAnswer( this.dpIndex );
                    if( answer && answer !== "XX" ) {
                        log.warn("Hiding answer " + answer + " from previous playthrough.");
                        previousPlayHidden = choiceMap[answer];
                    }
                }
                // The questions after that, just use the previous answer.
                if( this.dpIndex > 0 ) {
                    answer = this.getPreviousAnswer( this.dpIndex );
                    log.warn("got previous answer of " + answer);
                    chosenIndex = choiceMap[answer];

                    // if index is the beginning or end, go up/down 2, otherwise, go both sides.
                    if( chosenIndex === 0) {
                        showQuestions[3] = false;
                        showQuestions[4] = false;
                    } else if( chosenIndex === 4 ) {
                        showQuestions[0] = false;
                        showQuestions[1] = false;
                    } else {
                        showQuestions = [ false, false, false, false, false];
                        showQuestions[chosenIndex] = true;
                        showQuestions[chosenIndex+1] = true;
                        showQuestions[chosenIndex-1] = true;
                    }
                }

                /**
                 * Since we may have overriden the hide with a true, hide AFTER parsing previous.
                 */
                if( previousPlayHidden !== -1 ) {
                    showQuestions[previousPlayHidden] = false;
                }

                for (index = 0; index < options.choices.length; index++) {
                    if( showQuestions[index] ) {
                        dpChoices.push( options.choices[index]);
                    }
                }
                // redo the offset, now that choices are being hidden.
                buttonHideCount = MAX_CHOICES - dpChoices.length;
                log.warn("determined button offset of " + buttonHideCount);
            } else {
                for (index = 0; index < options.choices.length; index++) {
                    dpChoices.push( options.choices[index]);
                }
            }

            // Had button up to the count.
            for( buttonCnt = 0; buttonCnt < buttonHideCount; buttonCnt++ ) {
                if( this.buttons[buttonCnt]) {
                    this.buttons[buttonCnt].visible = false;
                    this.buttons[buttonCnt].inputEnabled = false;
                } else {
                    log.error("Bad button count: " + buttonCnt );
                }
            }

            /**
             * Make a list of the indexes, and then randomize that list.
             * This is randomize the order the answers are presented to the user.
             */
            var randomizedIndex = [];
            for (index = 0; index < dpChoices.length; index++) {
                randomizedIndex.push( index );
            }
            Phaser.ArrayUtils.shuffle(randomizedIndex);

            var randomKey;
            for (index = 0; index < dpChoices.length; index++) {
                randomKey = randomizedIndex[index];
                this.text[index + buttonHideCount].setText(dpChoices[randomKey].text);
                this.buttons[index + buttonHideCount].currentOption = dpChoices[randomKey];
                this.buttons[index + buttonHideCount].visible = true;
                this.buttons[index + buttonHideCount].inputEnabled = true;
            }

            if( options.text || options.audio ) {
                var eventData = {"text": options.text, "audio": options.audio, "key": options.key};
                //log.warn("Choice actor sending game speech");
                //log.warn(eventData);
                this.playAudio( eventData );
            }
        },
        destroy: function () {
            var temp;
            while( this.text.length > 0 ) {
                temp = this.text.shift();
                temp.destroy();
                temp = null;
            }
            while( this.buttons.length > 0 ) {
                temp = this.buttons.shift();
                temp.destroy();
                temp = null;
            }
            this.freeBaseActor();
        },
        onChoice: function (data) {
            //log.warn("Choice made, popuplating new choice");
            //log.warn(_.cloneDeep(data.currentOption));
            var choice = data.currentOption;
            if( choice.variable ) {
                var varSet = {};
                varSet[choice.variable] = choice.value;
                this.events.onGameChoice.dispatch( this.data.name, varSet );
            }
            if( choice.link ) {
                this.currentChoice = this.choiceMap[choice.link];
                this.populateChoice();
            }
        },
        /**
         * Figure out which decision the player is making, by assuming they make them in order.
         * So find the first index that is XX.
         * @returns {number} index of next decision point.
         */
        getDecisionIndex: function() {
            var decisionSet = this.modelInterface.getValue("$decisionsCurrent"),
                dpIndex;

            for( dpIndex = 0; dpIndex < decisionSet.length; dpIndex++ ) {
                if( decisionSet[dpIndex] === "XX" ) {
                    return dpIndex;
                }
            }
            return -1;
        },
        /**
         * For a given decision index, find the answer from the previous play through.
         */
        getPreviousPlayAnswer: function(decisionIndex) {
            return this.modelInterface.getValue("$decisionsPrevious")[decisionIndex];
        },
        /**
         * Get the answer to the previous decision from this play through.
         */
        getPreviousAnswer: function( decisionIndex ) {
            return this.modelInterface.getValue("$decisionsCurrent")[decisionIndex-1];
        }
    });

    module.exports = ChoiceActor;
}());

},{"../actor":"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene\\actors\\actor.js","lodash":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\lodash\\index.js","loglevel":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\loglevel\\lib\\loglevel.js"}],"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene\\actors\\actnow\\actor-chooser.js":[function(require,module,exports){
/**
 * @author Zack Biernat
 * @version 1.0.0
 * @creation 04/23/2018
 * Copyright 2018 Children's Hospital
 * This software is the property of Children's Hospital
 * 
 *  A chooser actor which randomly toggles a hi-lited selection through a specified number of changes before
 *  ultimately ending on a selection which will either be (not rigged) always random or (rigged) unique first and then random.
 *  The "toggling" action will increase in interval until stopping, that is, the chooser decelerates until it stops, somewhat 
 *  like a roulette wheel.
 * 
 * Creating a Chooser actor:
 * {
 *      "name": "chooser1",             // A unique name for the actor
 *      "type": "chooser",              // Required type
 *      "startButton": {                // The image which should trigger the choosing sequence, and where to put it
 *          "image": "choose_button",
 *          "location": [ 300, 200 ]
 *      },
 *      "images": "chooser_1",          // Refers to theme.images.chooserImages.chooser_1 which is a collection of objects 
 *                                          { "base": "image1.png", "hi": "image1_hi.png"  }
 *      "location": [ 100, 100 ],       // Where the first image is positioned
 *      "audio": "tick_sound",          // An optional sound to play for each change
 *      "numChanges": 24,               // How many different events are emited before reaching the ultimate selection. If this is too much it could cause performance issues
 *      "rigged": true,                 // Optional, if this is true the chooser will select each option once until each is used, then begin randomly selecting things.
 *      "variable": "chooser_value",    // When actor is added, the variable 'chooser_value' will be set to a number between 0 and numOptions - 1 .
 *      "startDelay": 1000              // Optional delay in ticks before adding the actor (think of a tick as a millisecond; it is defined in main.js)
 * }
 */

(function () {

    var _ = require('lodash'),
        log = require('loglevel'),
        Actor = require('../actor');

    var ChooserActor = Actor.extend({
        // constructor in parent.
        getRequiredFields: function() {
            return [ "variable", "numChanges", "images", "location", "startButton" ];
        },
        enterScene: function() {
            this.buildActor();
        },
        randomIntFromInterval: function(min,max)
        {
            return Math.floor(Math.random() * ( max - min));
        },
        buildActor: function() {
            this.riggedSpinValues = this.data.rigged ? _.shuffle(_.range(0, this.theme.images.chooserImages[this.data.images].length)) : [];
            
            var i = 0;
            this.choice = [];
            this.hi_choice = [];
            while (i < this.theme.images.chooserImages[this.data.images].length) {

                var x_pos = this.data.location[0] + (i % 2) * this.game.cache.getFrameByName(this.theme.textureKey, this.theme.images.chooserImages[this.data.images][i].base).width;
                var y_pos = this.data.location[1];
                if (i > 1) {
                    y_pos += this.game.cache.getFrameByName(this.theme.textureKey, this.theme.images.chooserImages[this.data.images][i].base).height;
                }
                this.choice.push(this.game.add.sprite( x_pos, y_pos,
                    this.theme.textureKey, this.getImage( this.theme.images.chooserImages[this.data.images][i].base, null)));
                this.hi_choice.push(this.game.add.sprite( x_pos, y_pos,
                    this.theme.textureKey, this.getImage( this.theme.images.chooserImages[this.data.images][i].hi, null)));
                this.hi_choice[i].visible = false;
                i++;

            }
            this.startButton = this.game.add.button( this.data.startButton.location[0], this.data.startButton.location[1], this.theme.textureKey,
                this.onClick, this,
                this.theme.buttons[this.data.startButton.image].over, this.theme.buttons[this.data.startButton.image].out,
                this.theme.buttons[this.data.startButton.image].down, this.theme.buttons[this.data.startButton.image].up);

        },
        choiceIterator: function (choices, cb) {
            var start = 10;
            for (var i = 1; i < choices.length; i++) {
                if (i === choices.length - 1) {
                    this.game.time.events.add(start, this.toggleSelection, this, choices[i - 1], choices[i], cb.bind(this));
                } else {
                    this.game.time.events.add(start, this.toggleSelection, this, choices[i - 1], choices[i]);
                    start += 12 * i;
                }
            }
        },
        toggleSelection: function (last, next, done) {
            if (this.data.audio) {
                var eventData = {"text": "", "audio" : this.data.audio, "priority": "stopAll" };
                this.playAudio( eventData);
            }
            this.hi_choice[last].visible = false;
            this.hi_choice[next].visible = true;
            if (typeof done === 'function') {
                done();
            }
        },
        onClick: function () {
            var numOptions = this.theme.images.chooserImages[this.data.images].length
            if (this.isChoosing) {
                return;
            };
            var varSet = {};
            varSet[this.data.variable] = 100;
            this.dispatchGameChoice(varSet);
            this.isChoosing = true;
            for (var i = 0; i < numOptions; i++) {
                this.hi_choice[i].visible = false;
            }
            var randomInt = this.riggedSpinValues.length ? this.riggedSpinValues.pop() : this.randomIntFromInterval(1, numOptions);
            var choices = [Math.floor(Math.random() * numOptions)];

            for (var i = 1; i < this.data.numChanges - 1; i++) {
                var choice = Math.floor(Math.random() * numOptions);
                while (choice === choices[i - 1]) {
                    choice = Math.floor(Math.random() * numOptions);
                }
                choices.push(choice);
            }
            while (randomInt === choices[choices.length -1]) {
                choices.push(Math.floor(Math.random() * numOptions));
            }

            choices.push(randomInt);

            this.choiceIterator(choices, function() {
                this.isChoosing = false;
            });
            var varSet = {};
            varSet[this.data.variable] = randomInt.toString();
            this.dispatchGameChoice(varSet);
        },
        destroy: function() {
            if (this.center) {
                this.center.destroy();
            }
            if (this.arrow) {
                this.arrow.destroy();
            }
            this.freeBaseActor();
        }
    });

    module.exports = ChooserActor;
}());
},{"../actor":"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene\\actors\\actor.js","lodash":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\lodash\\index.js","loglevel":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\loglevel\\lib\\loglevel.js"}],"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene\\actors\\actnow\\actor-phone-button.js":[function(require,module,exports){
/**
 * @author George Frick
 * @version 1.0.0
 * @creation 07/01/2015
 * Copyright 2015 Children's Hospital
 * This software is the property of Children's Hospital.
 *
 * The phone button actor. This actor is used for opening the phone and showing phone alerts.
 *
 * Creating a phone button actor:
 * {
 *     "name": "phone1", // a unique identifier
 *     "type": "phone-button", // the required type.
 *     "images": "phone", // where in the theme to find the images.
 *     "location": [ x, y ],
 *     "startDelay": 1000 // optional, delay in ticks before adding the actor (think of a tick as a millisecond, defined in main.js)
 * }
 *
 *  Handles special variables:
 *  phone_alert : type // show an alert, of the type given.
 */
(function () {

    var Actor = require('../actor');

    var PhoneButtonActor = Actor.extend( {
        // constructor in parent.
        getRequiredFields: function() {
            return [ "location", "image" ];
        },
        enterScene: function() {
            this.isAlerted = false;
            this.buildActor();
            if( this.data.alert ) {
                this.onGameChoice( { 'phone_alert': this.data.alert });
            }
        },
        buildActor: function() {
            this.alertGroup = null;
            this.buttonAnimation = null;
            var tLoc = this.data.image;

            this.button = this.game.add.button( this.data.location[0], this.data.location[1] + 36, this.theme.textureKey,
                this.onPointerUp, this,
                this.theme[tLoc].button.over, this.theme[tLoc].button.out,
                this.theme[tLoc].button.down, this.theme[tLoc].button.up);
            this.button.inputEnabled = true;
        },
        buildActorAlerts: function() {
            this.alertGroup = this.game.add.group();
            this.alertGroup.x = this.data.location[0];
            this.alertGroup.y = this.data.location[1];
            var tLoc = this.data.image;

            this.alerts = {
                game: new Phaser.Sprite(this.game, 0, 0, this.theme.textureKey, this.theme[tLoc].alerts.game),
                message: new Phaser.Sprite(this.game, 0, 0, this.theme.textureKey, this.theme[tLoc].alerts.message),
                pdf: new Phaser.Sprite(this.game, 0, 0, this.theme.textureKey, this.theme[tLoc].alerts.pdf),
                video: new Phaser.Sprite(this.game, 0, 0, this.theme.textureKey, this.theme[tLoc].alerts.video),
                gtfs: new Phaser.Sprite(this.game, 0, 0, this.theme.textureKey, this.theme[tLoc].alerts.gtfs)
            };

            this.alertGroup.add(this.alerts.game);
            this.alertGroup.add(this.alerts.message);
            this.alertGroup.add(this.alerts.pdf);
            this.alertGroup.add(this.alerts.video);
            this.alertGroup.add(this.alerts.gtfs);
            this.showAlert(false);
        },
        /**
         * Any game choice during an alert will cause the phone to 'vibrate' on screen.
         * @param choice
         */
        onGameChoice: function( choice ) {
            if( this.isAlerted ) {
                this.playAlert();
            } else if( choice['phone_alert'] ) {
                this.isAlerted = true;
                this.showAlert(choice['phone_alert']);
                this.playAlert();
            }
        },
        /**
         * Show one of the alerts, or hide them all if no type (or false) is passed.
         * @param type game|message|pdf|video|false
         */
        showAlert: function( type ) {
            if( this.alertGroup === null ) {
                this.buildActorAlerts();
            }
            this.alerts.game.visible = false;
            this.alerts.message.visible = false;
            this.alerts.pdf.visible = false;
            this.alerts.video.visible = false;
            this.alerts.gtfs.visible = false;
            if( type ) {
                this.alerts[type].visible = true;
            }
        },
        /**
         * Play the ring animation and current ring tone.
         */
        playAlert: function() {
            var ringToneIndex = parseInt(this.modelInterface.getValue("$phoneRingerIndex"), 10);
            if( this.buttonAnimation === null) {
                this.buttonAnimation = this.button.animations.add('ring', this.theme[this.data.image].ring);
            }
            this.button.animations.play('ring', 4);
            var eventData = {"text": "", "audio" : this.theme.phone.ringtones[ringToneIndex] };
            this.playAudio( eventData);
        },
        /**
         * When the player clicks the phone button, stop any alert and then send out the game choice.
         * @param event
         */
        onPointerUp: function( event ) {
            this.isAlerted = false;
            this.showAlert(false);
            this.button.animations.stop();

            var varSet = {};
            varSet['show_cell_phone'] = this.data.name;
            this.events.onGameChoice.dispatch( this.data.name, varSet );
        },
        destroy: function() {
            this.alerts = null;
            if ( this.alertGroup ) {
                this.alertGroup.destroy();
            }
            if ( this.button ) {
                this.button.destroy();
            }
            this.freeBaseActor();
        }
    });

    module.exports = PhoneButtonActor;
}());

},{"../actor":"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene\\actors\\actor.js"}],"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene\\actors\\actnow\\actor-phone.js":[function(require,module,exports){
/**
 * @author George Frick
 * @version 1.0.0
 * @creation 07/20/2015
 * Copyright 2015 Children's Hospital
 * This software is the property of Children's Hospital.
 *
 * This is a very specialized actor for use with Welcome To Newbridge and Act Now! it shows a cell phone that sends out
 * special events, responds to events, and can interact with the user by drawing over the scene. The user can interact
 * with the phone and possibly launch sub-activities from it. Because of this, the phone must block user input, which
 * is the purpose of the blockingSprite(s).
 *
 * ringtone and background are now stored on the play-model of the current scene.
 *
 *  {
 *     "name": "phone_1",
 *     "type": "phone",
 *     "help": {
 *       "variable": "phone_1", // these variables will be set to 'open' or 'closed' automatically. It's optional.
 *       "text" : "You'll find good advice here." // text to display for this 'icon'
 *     },
 *     "gtfs": {
 *       "variable": "phone_2",
 *       "text": "You'll be notified when it's time to learn some facts about bullying."
 *     },
 *     "games": {
 *       "text": "Sometimes you can choose this icon to play another game within the school day."
 *    },
 *     "messages": {
 *       "variable": "phone_3",
 *       "from": "anonymous", // messages has a 'from'; since they are displayed as text messages.
 *       "text": "this is a text message."
 *     },
 *     "videos": {
 *       "link": "",
 *       "text": "You'll be directed when to watch videos about bullying. Click this icon when told to see a video on your phone."
 *     },
 *     "startDelay": 1000 // optional, delay in ticks before adding the actor (think of a tick as a millisecond, defined in main.js)
 *  }
 *
 *  Special data stored on model. These data are stored on the model to make them stateful between instances:
 *     "phoneRingerIndex": the index of the current ring tone.
 *     "phoneBgIndex": the index of the current background image.
 *
 */
(function () {
    var _ = require('lodash'),
        log = require('loglevel'),
        Actor = require('../actor'),
        moment = require('moment');

    var Phone = Actor.extend({
        // constructor in parent.
        getRequiredFields: function() {
            return [ ]; // no required fields
        },
        enterScene: function () {
            this.fontHeader = this.getFont('phoneHeader');
            this.fontBody = this.getFont('phoneBody');
            this.fontBodyLink = this.getFont('phoneBodyLink');
            this.isInitialized = false;

            if( this.data.open ) {
                this.showPhone();
            }
        },
        onGameChoice: function( choice ) {
            if( choice['show_cell_phone'] ) {
                if( this.isInitialized && this.phoneGroup.visible ) {
                    this.onClickClose();
                } else {
                    this.showPhone();
                }
            }
        },
        dispatch: function (data, value) {
            var varSet = {};
            varSet[data.variable] = value;
            this.events.onGameChoice.dispatch(this.data.name, varSet);
        },
        onClickHelp: function () {
            this.currentIcon = this.data.help;
            if (this.currentIcon.variable) {
                this.dispatch(this.currentIcon, "open");
            }
            this.showText("Help", this.currentIcon.text, false, this.currentIcon.link,  this.currentIcon.value);
        },
        onClickGtfs: function () {
            this.currentIcon = this.data.gtfs;
            if (this.currentIcon.variable) {
                this.dispatch(this.currentIcon, "open");
            }
            this.showText("Get The Facts", this.currentIcon.text, false, this.currentIcon.link,  this.currentIcon.value);
        },
        onClickMessages: function () {
            this.currentIcon = this.data.messages;
            if (this.currentIcon.variable) {
                this.dispatch(this.currentIcon, "open");
            }
            this.showText(this.currentIcon.from, this.currentIcon.text, true, this.currentIcon.link,  this.currentIcon.value);
        },
        onClickVideos: function () {
            this.currentIcon = this.data.videos;
            if (this.currentIcon.variable) {
                this.dispatch(this.currentIcon, "open");
            }
            this.showText("Videos", this.currentIcon.text, false, this.currentIcon.link,  this.currentIcon.value);
        },
        onClickRingtone: function () {
            var ringToneIndex = parseInt(this.modelInterface.getValue("$phoneRingerIndex"), 10);
            ringToneIndex++;
            ringToneIndex %= this.theme.phone.ringtones.length;
            this.playAudio(  { "audio": this.theme.phone.ringtones[ringToneIndex]});
            this.events.onGameChoice.dispatch(this.data.name, {"phoneRingerIndex": ringToneIndex });
        },
        onClickBackground: function () {
            var phoneBgIndex = parseInt(this.modelInterface.getValue("$phoneBgIndex"), 10);
            phoneBgIndex++;
            phoneBgIndex %= this.theme.phone.backgrounds.length;
            this.phoneBg.frameName = this.theme.phone.backgrounds[phoneBgIndex];
            this.events.onGameChoice.dispatch(this.data.name, {"phoneBgIndex": phoneBgIndex});
        },
        onClickClose: function () {
            this.phoneGroup.visible = false;
            this.textGroup.visible = false;
            this.blockingSprite.visible = false;
            this.blockingSprite2.visible = false;
            this.events.onGameChoice.dispatch(this.data.name, {"phone": "closed"});
        },
        createPhoneButton: function (key, callback, context) {
            var button = new Phaser.Button(this.game, 0, 0, this.theme.textureKey,
                callback, context,
                this.theme.phone.icons[key][1], this.theme.phone.icons[key][0],
                this.theme.phone.icons[key][1], this.theme.phone.icons[key][0]);
            button.input.useHandCursor = true;
            return button;
        },
        /**
         * Showing the phone is a bit complicated. Everything has to be brought to the top in
         * reverse order.
         */
        showPhone: function () {
            if( this.isInitialized === false ) {
                this.initHomeScreenGroup();
                this.initBlockingGroup();
                this.initMessageWindowGroup();
            }
            this.phoneGroup.visible = true;
            this.blockingSprite.visible = true;
            this.blockingSprite2.visible = false;
            this.blockingSprite.bringToTop();
            this.game.world.bringToTop(this.phoneGroup);
            this.blockingSprite2.bringToTop();
            this.game.world.bringToTop(this.textGroup);
            this.events.onGameChoice.dispatch(this.data.name, {"phone": "open"});
        },
        /**
         * Create the main screen, including all of the buttons.
         */
        initHomeScreenGroup: function() {
            var phoneBgIndex = parseInt(this.modelInterface.getValue("$phoneBgIndex"), 10);
            this.phoneGroup = this.game.add.group();
            this.phoneGroup.x = this.game.world.centerX;

            this.phoneBg = new Phaser.Sprite(this.game, 0, 0, this.theme.textureKey, this.theme.phone.backgrounds[phoneBgIndex]);
            this.phoneBg.anchor.setTo(0.5, 0.0);
            this.phoneGroup.add(this.phoneBg);

            this.helpButton = this.createPhoneButton('help', this.onClickHelp, this, 2);
            this.phoneGroup.add(this.helpButton);
            this.helpButton.x = -this.helpButton.width;
            this.helpButton.y = 50;
            this.helpButton.anchor.setTo(0.5, 0);
            this.helpButton.bringToTop();

            this.gtfsButton = this.createPhoneButton('gtfs', this.onClickGtfs, this, 2);
            this.phoneGroup.add(this.gtfsButton);
            this.gtfsButton.x = 0;
            this.gtfsButton.y = 50;
            this.gtfsButton.anchor.setTo(0.5, 0);
            this.gtfsButton.bringToTop();

            this.messagesButton = this.createPhoneButton('messages', this.onClickMessages, this, 2);
            this.phoneGroup.add(this.messagesButton);
            this.messagesButton.x = this.messagesButton.width;
            this.messagesButton.y = 50;
            this.messagesButton.anchor.setTo(0.5, 0);
            this.messagesButton.bringToTop();

            this.videosButton = this.createPhoneButton('videos', this.onClickVideos, this, 2);
            this.phoneGroup.add(this.videosButton);
            this.videosButton.x = -this.videosButton.width;
            this.videosButton.y = 50 + this.videosButton.height;
            this.videosButton.anchor.setTo(0.5, 0);
            this.videosButton.bringToTop();

            this.ringtoneButton = this.createPhoneButton('ringtones', this.onClickRingtone, this, 2);
            this.phoneGroup.add(this.ringtoneButton);
            this.ringtoneButton.x = 0;
            this.ringtoneButton.y = 50 + this.videosButton.height;
            this.ringtoneButton.anchor.setTo(0.5, 0);
            this.ringtoneButton.bringToTop();

            this.backgroundButton = this.createPhoneButton('background', this.onClickBackground, this, 2);
            this.phoneGroup.add(this.backgroundButton);
            this.backgroundButton.x = this.messagesButton.width; // this is on purpose.
            this.backgroundButton.y = 50 + this.videosButton.height;
            this.backgroundButton.anchor.setTo(0.5, 0);
            this.backgroundButton.bringToTop();

            this.closeButton = this.createPhoneButton('close', this.onClickClose, this, 2);
            this.phoneGroup.add(this.closeButton);
            this.closeButton.x = 0;
            this.closeButton.y = 50 + (this.gtfsButton.height * 3);
            this.closeButton.anchor.setTo(0.5, 0);
            this.closeButton.bringToTop();
            this.phoneGroup.visible = false;


        },
        initBlockingGroup: function() {
            this.blockingSprite = this.createBlockingSprite();
            this.blockingSprite2 = this.createBlockingSprite();
            this.game.add.existing(this.blockingSprite);
            this.game.add.existing(this.blockingSprite2);
            this.blockingSprite.visible = false;
            this.blockingSprite2.visible = false;
        },
        initMessageWindowGroup: function () {
            var width = this.phoneBg.width - 32;
            var x = this.game.world.centerX - (width / 2),
                y = this.phoneBg.y + 32,
                height = this.phoneBg.height - 74,
                heightHeading = height / 7,
                margin = 10;

            height -= (heightHeading);

            this.textGroup = this.game.add.group();
            this.textGroup.x = x;
            this.textGroup.y = y;

            this.headingText = new Phaser.Text(this.game, width / 2, heightHeading / 2, "HEADING TEST", this.fontHeader);
            this.headingText.anchor.setTo(0.5, 0.5);

            this.fontBody.wordWrap = true;
            this.fontBody.wordWrapWidth = width * 0.9;
            this.fontBodyLink.wordWrap = true;
            this.fontBodyLink.wordWrapWidth = width * 0.9;
            this.bodyText = new Phaser.Text(this.game, margin, heightHeading + margin, "THIS IS A TEXT MESSAGE FOR YOU TO SEE TEST", this.fontBody);
            this.bodyText.anchor.setTo(0.0, 0.0);
            this.bodyText.inputEnabled = true;
            this.bodyText.events.onInputDown.add(this.clickedBodyText, this);

            var graphics = new Phaser.Graphics(this.game);
            this.textGroup.add(graphics);

            // set a fill and line style
            graphics.beginFill(0x353535);
            graphics.lineStyle(1, 0x000000, 1);
            graphics.drawRect(0, 0, width, heightHeading);
            graphics.beginFill(0xFFFFFF, 0.9);
            graphics.drawRect(0, heightHeading, width, height);
            graphics.endFill();

            var buttonSprite = new Phaser.Sprite(this.game, 0, 0, this.theme.textureKey, this.theme.phone.messages.button);
            buttonSprite.x = width - buttonSprite.width - margin;
            buttonSprite.y = heightHeading + height - margin - buttonSprite.height;
            buttonSprite.inputEnabled = true;
            buttonSprite.events.onInputDown.add(this.chooseOk, this);

            this.playButton = new Phaser.Sprite(this.game, margin, 0, this.theme.textureKey, this.theme.phone.playButton);
            this.playButton.inputEnabled = true;
            this.playButton.events.onInputDown.add(this.clickedBodyText, this);
            this.playButton.visible = false;

            this.textGroup.add(this.headingText);
            this.textGroup.add(this.bodyText);
            this.textGroup.add(buttonSprite);
            this.textGroup.add(this.playButton);

            this.hideText();
        },
        showText: function (heading1, body, isTextMessage, link, valueIn) {
            var value = null;
            if( valueIn ) {
                value = this.modelInterface.getValue( valueIn);
            }
            this.headingText.setText(heading1);
            this.setBodyText( body, link, valueIn );

            this.textGroup.visible = true;
            this.blockingSprite2.visible = true;
            if( isTextMessage ) {
                var dt = "Received: " + moment().format("MMM Do YYYY, h:mm a "); // Jul 21st 2015, 11:12 am
                var from = this.modelInterface.getValue(heading1);
                from = from.charAt(0).toUpperCase() + from.slice(1);
                this.headingText.setText( "From: " + from + "\n" + dt);
            }
        },
        setBodyText: function( text, isLink, useValue) {
            log.warn("In set body text.");
            if( isLink === true ) {
                this.bodyText.inputEnabled = true;
                this.playButton.visible = true;
                this.playButton.inputEnabled = true;
            } else {
                this.bodyText.inputEnabled = false;
                this.playButton.visible = false;
                this.playButton.inputEnabled = false;
            }
            if( typeof text === 'string') {
                log.warn("Setting as simple string");
                this.bodyText.setStyle( this.fontBody );
                this.bodyText.setText( this.substituteText(text) );
            } else {
                log.warn("not a string, parsing everything..");
                this.bodyText.setStyle( this.fontBodyLink );
                if( useValue ) {
                    log.warn("useValue defined, as: " + useValue);
                    var value = parseInt(this.modelInterface.getValue(useValue), 10);
                    log.warn("value is " + value);
                    var foundScoreRange = false;
                    _.each( text, function(singleEntry) {
                        if( value >= singleEntry[0] && value <= singleEntry[1] ) {
                            this.bodyText.setText( this.substituteText(singleEntry[2]));
                            foundScoreRange = true;
                        }
                    }, this);
                    if (foundScoreRange === false) {
                        //log.warn("$$$$$$$$$$$ noted value out of range");
                        // The score wasn't within any range. It could be higher than any or lower than
                        // any, or there could be a hole in the ranges.
                        var highestScore = 0;
                        var lowestScore = 0;
                        var highestText = "";
                        var lowestText = "";
                        _.each( text, function(singleEntry) {
                            if( singleEntry[0] > highestScore ) {
                                highestScore = singleEntry[0];
                                highestText = singleEntry[2];
                            }
                            if( singleEntry[1] > highestScore ) {
                                highestScore = singleEntry[1];
                                highestText = singleEntry[2];
                            }
                            if ( singleEntry[0] < lowestScore ) {
                                lowestScore = singleEntry[0];
                                lowestText = singleEntry[2];
                            }
                            if ( singleEntry[1] < lowestScore ) {
                                lowestScore = singleEntry[1];
                                lowestText = singleEntry[2];
                            }
                        }, this);
                        if (value > highestScore) {
                            // score is higher than highest range; use highest range text
                            this.bodyText.setText( this.substituteText(highestText));
                        } else if (value < lowestScore) {
                            // score is lower than lowest range; use lowest range text
                            this.bodyText.setText( this.substituteText(lowestText));
                        } else {
                            // there must be a hole in the ranges; just use the first entry
                            this.bodyText.setText(this.substituteText(text[0][2]));
                        }
                    }
                } else {
                    this.bodyText.setText( this.substituteText(text[0][2])); // just use first entry.
                }
            }
            this.playButton.y = this.bodyText.y + this.bodyText.height + 5;
        },
        substituteText: function( text ) {
            log.warn("Doing substitution on: " + text);
            var leftIndex, rightIndex;
            leftIndex = text.indexOf("$");
            if( leftIndex === -1 ) {
                return text;
            }
            rightIndex = text.indexOf("$", leftIndex + 1);
            if( rightIndex === -1 ) {
                return text;
            }
            var key = text.substring( leftIndex, rightIndex +1);
            var key2 = key.substring(0, key.length - 1); // remove trailing dollarsign.
            var finalText = this.modelInterface.getValue(key2);
            finalText = finalText.charAt(0).toUpperCase() + finalText.slice(1);
            return text.replace(key, finalText );
        },
        hideText: function () {
            this.textGroup.visible = false;
            this.blockingSprite2.visible = false;
        },
        chooseOk: function () {
            if (this.currentIcon && this.currentIcon.variable) {
                this.dispatch(this.currentIcon, "closed");
                this.currentIcon = null;
            }
            this.hideText();
        },
        clickedBodyText: function() {
            this.dispatch(this.currentIcon, "clicked");
            /**
             * Phone links must behave differently than other buttons in the scene engine.
             * They can be clicked over and over. So, after sending the clicked event, we send an
             * afterClicked event, which forces the variable to change, so that the next time the
             * link is clicked, the 'clicked' event is seen as a change again.
             */
            this.dispatch(this.currentIcon, "afterClicked");
        },
        destroy: function () {
            this.fontHeader = null;
            this.fontBody = null;
            if ( this.phoneGroup ) {
                this.phoneGroup.destroy();
            }
            if ( this.textGroup ) {
                this.textGroup.destroy();
            }
            if ( this.blockingSprite ) {
                this.blockingSprite.destroy(true);
            }
            if ( this.blockingSprite2 ) {
                this.blockingSprite2.destroy(true);
            }
            if ( this.playButton ) {
                this.playButton.destroy();
            }
            this.freeBaseActor();
        }
    });

    module.exports = Phone;
}());

},{"../actor":"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene\\actors\\actor.js","lodash":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\lodash\\index.js","loglevel":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\loglevel\\lib\\loglevel.js","moment":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\moment\\moment.js"}],"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene\\actors\\actnow\\actor-playthrough.js":[function(require,module,exports){
/**
 * @author George Frick
 * @version 1.0.0
 * @creation 07/01/2015
 * Copyright 2015 Children's Hospital
 * This software is the property of Children's Hospital.
 *
 * The decoration actor. Just an image on the screen.
 *
 * Creating a button actor:
 * {
 *     "name": "portrait1", // a unique identifier
 *     "type": "decoration", // the required type.
 *     "image": "phone", // the images to use from the button section of the theme.
 *     "key": "something", // an optional key to look under for the image.
 *     "location": [ x, y ],
 *     "scale": [ x, y], // optional x/y scale.
 *     "startDelay": 1000 // optional, delay in ticks before adding the actor (think of a tick as a millisecond, defined in main.js)
 * }
 *
 */
(function () {

    var Actor = require('../actor');

    var PlayThroughActor = Actor.extend( {
        constructor: function(game, theme) {
            if( !game ) {
                throw "actor requires game constructor argument.";
            }
            this.game = game;
            this.data = {
                "name": "playthroughdisplay"
            };
            this.theme = theme;
        },
        enterScene: function() {
            this.buildActor();
        },
        buildActor: function() {
            if( !this.theme.playthroughDisplayContainer ) {
                throw "You cannot display playthrough without providing an image in the theme.";
            }

            this.sprite = this.game.add.sprite( 0, 0, this.theme.textureKey, this.theme.playthroughDisplayContainer );
            this.sprite.x = this.game.world.width - this.sprite.width;
            this.sprite.y = 0;
            var fStyle = this.getFont('playThrough');
            var currentText = new Phaser.Text(this.game, this.sprite.width/2, this.sprite.height/2, "Playthrough: " + this.modelInterface.getValue("$playThrough"), fStyle);
            currentText.anchor.setTo(0.5,0.5);
            this.sprite.addChild(currentText);
            this.sprite.visible = false;
        },
        hide: function() {
            if( this.sprite ) {
                this.sprite.visible = false;
            }
        },
        show: function() {
            if( this.sprite ) {
                this.sprite.visible = true;
                this.sprite.bringToTop();
            }
        },
        destroy: function() {
            if ( this.sprite ) {
                this.sprite.destroy(true);
            }
            this.freeBaseActor();
        }
    });

    module.exports = PlayThroughActor;
}());

},{"../actor":"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene\\actors\\actor.js"}],"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene\\actors\\actnow\\actor-spinner.js":[function(require,module,exports){
/**
 * @author David Lee
 * @version 1.0.0
 * @creation 04/03/2018
 * Copyright 2018 Children's Hospital
 * This software is the property of Children's Hospital
 * 
 * A spinner actor with a central button and a pointer that extends off it.
 * 
 * Creating a Spinner actor:
 * {
 *      "name": "spinner1",             // A unique name for the actor
 *      "type": "spinner",              // Required type
 *      "images": "spinner",            // The key to use from the spinners section of the theme
 *      "centerImage": "center"         // The key to use within the theme file for the center image
 *      "arrowImage": "arrow"           // The key to use within the theme file for the arrow image
 *      "offset": 0.25                  // Offset in radians used by the starting position / when spinning
 *      "numOptions": 4                 // How many different options the spinner uses. Defaults to 4
 *      "audio": "spin",                // An optional sound to play when the spinner is clicked. Don't play long audio!
 *      "audioPriority": "sfx",         // An optional priority to use for the spinner audio property. If this is not set, it defaults to "sfx"
 *      "location": [ x, y ],           // Where to put the center of the spinner
 *      "spinDuration": 3600,           // How long the spin animation should take. If this is not specified, a duration based on the number of spins will be used by default
 *      "fakeSpinsRange": [2, 5],       // Range [min, max] of fake spins to show before the arrow is set to the randomly selected section. This defaults to [2, 5] if not specified
 *      "rigged": true,                 // Optional, if this is true the spinner will select each option once until each is used, then begin randomly selecting things.
 *      "clickValue": "reset",          // Optional, if this is set, when the center is clicked the variable will be set to this value. This is useful to trigger events on click that must happen before the spin is completed and the variable is updated to the final value
 *      "variable": "spinner_value"     // if you click the spinner, the variable 'spinner_value' will be set to a number between 1 and 4.
 *      "startDelay": 1000              // optional delay in ticks before adding the actor (think of a tick as a millisecond; it is defined in main.js)
 *      "arrowOffsetX": 0.05            // optional offset for spinner arrowX
 * }
 */

(function () {

    var _ = require('lodash'),
        log = require('loglevel'),
        Actor = require('../actor');

    var DEFAULT_NUM_OPTIONS = 4;

    var SpinnerActor = Actor.extend({
        // constructor in parent.

        getRequiredFields: function() {
            return [ "location", "images", "centerImage", "arrowImage", "variable" ];
        },
        enterScene: function() {
            this.buildActor();
        },
        randomIntFromInterval: function(min,max)
        {
            return Math.floor(Math.random() * ( max - min + 1)) + min;
        },
        buildActor: function() {
            if( !this.theme.spinners || !this.theme.spinners[this.data.images] ) {
                throw "Spinner Actor requires spinners entry in theme, with specific entry matching " + this.data.images;
            }
            if (!this.theme.spinners[this.data.images][this.data.centerImage]) {
                throw "Spinner Actor requires spinner entry to have a center image, with a specific entry matching " + this.data.images + "." + this.data.centerImage;
            }
            if (!this.theme.spinners[this.data.images][this.data.arrowImage]) {
                throw "Spinner Actor requires spinner entry to have an arrow image, with a specific entry matching " + this.data.images + "." + this.data.arrowImage;
            }

            if(!this.data.numOptions) {
                this.data.numOptions = DEFAULT_NUM_OPTIONS;
            }

            if(!this.data.fakeSpinsRange) {
                this.data.fakeSpinsRange = [2, 5];
            }

            if(!this.data.audioPriority) {
                this.data.audioPriority = "sfx";
            }

            this.riggedSpinValues = this.data.rigged ? _.shuffle(_.range(1, this.data.numOptions + 1)) : [];

            var anchorX = 0.5,
                anchorY = 0.5;

            var x = this.data.location[0];
            var y = this.data.location[1];

            this.arrow = this.game.add.sprite(x, y, this.theme.textureKey, this.theme.spinners[this.data.images][this.data.arrowImage]);
            this.center = this.game.add.sprite(x, y, this.theme.textureKey, this.theme.spinners[this.data.images][this.data.centerImage]);
            
            this.center.anchor.setTo(anchorX, anchorY);

            if (this.data.arrowOffsetX) {
                this.arrow.anchor.setTo(anchorX - this.data.arrowOffsetX, anchorY);
            } else {
                this.arrow.anchor.setTo(anchorX, anchorY);
            }

            this.arrow.rotation = Math.PI * this.data.offset;

            this.center.inputEnabled = true;
            this.center.input.useHandCursor = true;
            this.arrow.inputEnabled = true;
            this.arrow.input.useHandCursor = true;
            
            this.center.events.onInputDown.add(this.onClick, this);
            this.arrow.events.onInputDown.add(this.onClick, this);

        },
        onClick: function( event ) {

            if (this.spinning) {
                return;
            }

            if (this.data.clickValue) {
                var varSet = {};
                varSet[this.data.variable] = this.data.clickValue;
                this.dispatchGameChoice(varSet);
            }
            
            this.spinning = true;

            if (this.data.audio) {
                var eventData = {"text": "", "audio" : this.data.audio, "priority": this.data.audioPriority };
                this.playAudio( eventData);
            }

            var randomInt = this.riggedSpinValues.length ? this.riggedSpinValues.shift() : this.randomIntFromInterval(1, this.data.numOptions);

            var randomFullSpins = this.randomIntFromInterval(this.data.fakeSpinsRange[0], this.data.fakeSpinsRange[1]);

            var randomRotation = ((Math.PI * 2) / this.data.numOptions) * randomInt;
            var rotation = (2 * randomFullSpins * Math.PI) + randomRotation + (Math.PI * this.data.offset);

            if (! this.data.spinDuration) {
                // If the spinDuration isn't passed in, override it with the old code by default
                this.data.spinDuration = (rotation / (2 * Math.PI)) * 1000;
            }
            this.tween = this.game.add.tween(this.arrow).to( { rotation: rotation }, this.data.spinDuration, Phaser.Easing.Quadratic.Out, true, 0, 0, false);
            this.tween.onComplete.add( function() {
                    this.arrow.rotation = this.arrow.rotation % (2 * Math.PI);
                    this.spinning = false;
                    var varSet = {};
                    varSet[this.data.variable] = randomInt.toString();
                    this.dispatchGameChoice(varSet);
            }, this);
        },
        destroy: function() {
            if (this.center) {
                this.center.destroy();
            }
            if (this.arrow) {
                this.arrow.destroy();
            }
            if (this.tween) {
                this.tween.stop();
            }
            this.freeBaseActor();
        }
    });

    module.exports = SpinnerActor;
}());
},{"../actor":"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene\\actors\\actor.js","lodash":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\lodash\\index.js","loglevel":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\loglevel\\lib\\loglevel.js"}],"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene\\actors\\actnow\\actor-zink-computer.js":[function(require,module,exports){
/**
 * @author George Frick
 * @version 1.0.0
 * @creation 07/01/2015
 * Copyright 2015 Children's Hospital
 * This software is the property of Children's Hospital.
 *
 * A speech bubble. It displays text and requests that audio be played. A speech bubble can have its own text/audio
 * and can also listen for text/audio events to show.
 * The speech bubble will adjust its size to fit the provided/set text.
 *
 *{
 *    "name": "choiceBubble", // name.
 *    "type": "speech-bubble",
 *    "text": "", // text to show.
 *    "audio": "", // audio key to play.
 *    "hidden": true, // set to true to optionally hide the bubble initially, used when character isn't the first to talk.
 *    "startDelay": 1000 // optional, delay in ticks before adding the actor (think of a tick as a millisecond, defined in main.js)
 *},
 */
(function () {
    'use strict';
    var _ = require('lodash'),
        log = require('loglevel'),
        Actor = require('../actor');

    var marginX = 15, marginY = 20;

    var ZinkComputerActor = Actor.extend({
        // constructor in parent.
        getRequiredFields: function() {
            return [ "location" ];
        },
        enterScene: function () {
            this.text = this.data.text || " ";
            this.key = this.data.key;

            this.addWindow(this.data.location[0], this.data.location[1]);
            this.setSpeech();
        },
        addWindow: function (x, y) {
            if( !this.theme.textWindows || !this.theme.textWindows.zink ) {
                throw "Instruction actor requires textWindows theme entry, and zink definition inside it.";
            }

            var windowGroup = this.game.add.group();
            windowGroup.x = x;
            windowGroup.y = y;

            var topWindow = windowGroup.create(0, 0, this.theme.textureKey, this.theme.textWindows.zink);

            this.fStyle = this.getFont('bubbleText');
            this.fStyle.wordWrap = true;
            this.fStyle.wordWrapWidth = topWindow.width * 0.55;

            this.currentText = new Phaser.Text(this.game, marginX, marginY, " ", this.fStyle);
            windowGroup.add(this.currentText);

            this.currentText.bringToTop();
            this.windowGroup = windowGroup;
        },
        setSpeech: function () {
            this.currentText.setText( this.getText(this.text, this.key) );
            this.playAudio( {text: this.text, audio: this.audio, key: this.key});
        },
        onGameSpeech: function (speech) {
            this.text = speech.text;
            this.key = speech.key;
            this.currentText.setText( this.getText(this.text, this.key) );
        },
        destroy: function () {
            this.fStyle = null;
            if ( this.windowGroup ) {
                this.windowGroup.destroy(true);
            }
            this.windowGroup = null;
            this.currentText = null;
            this.freeBaseActor();
        }
    });

    module.exports = ZinkComputerActor;
}());

},{"../actor":"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene\\actors\\actor.js","lodash":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\lodash\\index.js","loglevel":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\loglevel\\lib\\loglevel.js"}],"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene\\actors\\actnow\\actor-zink-poster.js":[function(require,module,exports){
/**
 * @author George Frick
 * @version 1.0.0
 * @creation 07/01/2015
 * Copyright 2015 Children's Hospital
 * This software is the property of Children's Hospital.
 *
 * The zink poster actor. This is a special actor that requires only text and font configuration. It will show a
 * zink poster with text on it.
 *
 * Creating a zink poster actor:
 *
 * {
 *     "name": "mandy", // a unique identifier
 *     "type": "zink-poster", // the required type.
 *     "text": "Yo, I'm zink", // what to put on the poster.
 *     "startDelay": 1000 // optional, delay in ticks before adding the actor (think of a tick as a millisecond, defined in main.js)
 * }
 *
 */
(function () {

    var _ = require('lodash'),
        log = require('loglevel'),
        Actor = require('../actor');

    var ZinkPosterActor = Actor.extend( {
        // constructor in parent.
        getRequiredFields: function() {
            return [ ]; // no required fields.
        },
        enterScene: function() {
            this.buildActor();
            if( this.data.text ) {
                this.addTextBox();
            }
        },
        buildActor: function() {
            this.darkOut = new Phaser.Graphics(this.game, 0,0);
            this.darkOut.beginFill( 0x000000, 0.4 );
            this.darkOut.drawRect( 0,  0, this.game.world.width, this.game.world.height );
            this.darkOut.endFill();
            this.game.add.existing(this.darkOut);
            this.sprite = this.game.add.sprite( (this.game.world.centerX), 0, this.theme.textureKey,
                this.getImage('zink-poster', 'actorImages'));
            this.sprite.x = this.game.world.centerX - (this.sprite.width / 2);
            this.sprite.angle -= 3;
        },
        addTextBox: function() {
            this.font = this.getFont('zinkPoster');

            this.boxY = this.sprite.y + (this.sprite.height * 0.75);
            this.boxWidth = this.sprite.width - 2;
            this.boxHeight = 115;

            this.font.wordWrap = true;
            this.font.wordWrapWidth = this.boxWidth * 0.9;

            this.text = new Phaser.Text(this.game, 10 , 5, this.data.text , this.font);

            this.graphics = new Phaser.Graphics(this.game, 1, this.boxY);
            this.graphics.beginFill( 0xEFEFEF, 1.0 );
            this.graphics.drawRect( 0,  0, this.boxWidth, this.boxHeight );
            this.graphics.endFill();

            this.graphics.addChild(this.text);
            this.sprite.addChild(this.graphics);
        },
        destroy: function() {
            if ( this.sprite ) {
                this.sprite.destroy();
            }
            if( this.darkOut ) {
                this.darkOut.destroy();
            }
            this.freeBaseActor();
        }
    });

    module.exports = ZinkPosterActor;
}());

},{"../actor":"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene\\actors\\actor.js","lodash":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\lodash\\index.js","loglevel":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\loglevel\\lib\\loglevel.js"}],"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene\\actors\\actor-animation.js":[function(require,module,exports){
/**
 * @author George Frick
 * @version 1.0.0
 * @creation 10/023/2017
 * Copyright 2017 Children's Hospital
 * This software is the property of Children's Hospital.
 *
 * The animation actor. Will run it's animation, and can optionally be clicked.
 *
 * Creating a click-animation actor, a starting, animation set, and ending image:
 * {
 *     "name": "portrait1", // a unique identifier
 *     "type": "animation", // the required type.
 *     "images": "phone", // the images to use
 *     "key": "whatevs", // optional image key
 *     "textureKey": "key", // optional text key to get animation from
 *     "location": [ x, y ],
 *     "scale": [ x, y], // optional x/y scale.
 *     "fps": 10, // frames were second, will default to 30
 *     "startDelay": 1000, // optional, delay in ticks before adding the actor (think of a tick as a millisecond, defined in main.js)
 *     "variable": "x", // variable to send out 2nd click events, will be name + "_playing" and name + "_finished"
 *     "loop": true // true=loop indefinitly, false=no loop, or number of times to play the animation; defaults to true.
 * }
 *
 */
(function () {

    var _ = require('lodash'),
        Actor = require('./actor'),
        TweenHelper = require("./tween-helper");

    var AnimationActor = Actor.extend( {
        // constructor in parent
        getRequiredFields: function() {
            return [ "location", "images" ];
        },
        getVariableList: function() {
            return this.data.variable ? [ this.data.variable + "_playing", this.data.variable + "_finished" ] : [];
        },
        enterScene: function() {
            this.buildActor();
            var loopIndefinitely = this.data.loop === undefined || this.data.loop == true;
            this.sprite.animations.play("animation", this.fps, loopIndefinitely);
        },
        buildActor: function() {
            this.fps = 30;

            this.sprite = this.game.add.sprite( this.data.location[0], this.data.location[1],
                this.getTextureKey(this.data), this.getImage( this.data.images, this.data.key)[0]);

            this.sprite.inputEnabled = true;
            this.sprite.input.pixelPerfectOver = true;
            this.sprite.events.onInputUp.add( this.onPointerUp, this);
            if( this.data.variable ) {
                this.sprite.input.useHandCursor = true;
            }

            this.animation = this.sprite.animations.add('animation', this.getImage( this.data.images, this.data.key) );
            this.animation.onStart.add(this.animationStarted, this);
            this.animation.onComplete.add(this.animationStopped, this);

            if( this.data.fps ) {
                this.fps = this.data.fps;
            }

            var anchorX = 0, anchorY = 0;
            var x = this.data.location[0],
                y = this.data.location[1];
            this.scaleX = 1.0;
            this.scaleY = 1.0;

            if( this.data.scale ) {
                this.scaleX = this.data.scale[0];
                this.scaleY = this.data.scale[1];
            }
            this.sprite.scale.setTo( this.scaleX, this.scaleY );

            if( x === "center" ) {
                x = this.game.world.centerX;
                anchorX = 0.5;
            }

            if( y === "center" ) {
                y = this.game.world.centerY;
                anchorY = 0.5;
            }

            if( this.data.anchor ) {
                anchorX = this.data.anchor[0];
                anchorY = this.data.anchor[1];
            }

            this.sprite.anchor.setTo( anchorX, anchorY);
            this.sprite.x = x;
            this.sprite.y = y;

            if (this.data.loop) {
                var repeatCount = Number(this.data.loop);
                if (repeatCount > 1) {
                    this.repeatCount = repeatCount;
                }
            }

            if (this.data.tween) {
                if (_.isUndefined(this.tweenHelper)) {
                    this.tweenHelper = new TweenHelper(this.game, this);
                }
                this.tweenHelper.addTweens(this.data.tween, this.sprite);
            }
        },
        animationStarted: function() {
            if( this.data.variable ) {
                var varSet = {};
                varSet[this.data.variable + "_playing" ] = this.data.name;
                this.events.onGameChoice.dispatch(this.data.name, varSet, this);
            }
        },
        animationStopped: function() {
            if (this.repeatCount && --this.repeatCount) {
                this.animation.restart();
            } else if (this.data.variable) {
                var varSet = {};
                varSet[this.data.variable + "_finished" ] = this.data.name;
                this.events.onGameChoice.dispatch(this.data.name, varSet, this);
            }
        },
        onPointerUp: function() {
            if( this.data.variable ) {
                var varSet = {};
                varSet[this.data.variable] = this.data.name;
                this.events.onGameChoice.dispatch(this.data.name, varSet, this);
            }
        },
        destroy: function() {
            if (!_.isUndefined(this.tweenHelper)) {
                this.tweenHelper.removeTweens(this.sprite);
            }
            if ( this.sprite ) {
                this.sprite.destroy(true);
            }
            this.freeBaseActor();
        }
    });

    module.exports = AnimationActor;
}());

},{"./actor":"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene\\actors\\actor.js","./tween-helper":"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene\\actors\\tween-helper.js","lodash":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\lodash\\index.js"}],"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene\\actors\\actor-audio.js":[function(require,module,exports){
/**
 * @author George Frick
 * @version 1.0.0
 * @creation 07/01/2015
 * Copyright 2015 Children's Hospital
 * This software is the property of Children's Hospital.
 *
 * An audio actor. It will play a sound(s) and then set the variable.
 * It is up to the user/script writer to make sure this audio isn't being interrupted by other audio.
 *
 *{
 *    "name": "audio_actor_1", // name.
 *    "type": "audio",
 *    "audio": ["sound1, sound2"], // audio key(s) to play.
 *    "variable": "x", // variable to set when sounds have completed playing.
 *    "startDelay": 1000 // optional, delay in ticks before adding the actor (think of a tick as a millisecond, defined in main.js)
 *    "priority": sfx | interrupt | queue | stop | stopall | low
 *},
 */
(function () {
    'use strict';
    var _ = require('lodash'),
        log = require('loglevel'),
        Actor = require('./actor');

    var AudioActor = Actor.extend({
        // constructor in parent.
        getRequiredFields: function() {
            return [ "audio", "variable" ];
        },
        enterScene: function () {
            this.audio = this.data.audio;
            // Allow a single string through.
            if( typeof this.audio === 'string' ) {
                this.audio = [ this.audio ];
            }
            this.audioIndex = 0;
            this.playCurrent();
        },
        playCurrent: function() {
            if( this.audioIndex > (this.audio.length-1) ) {
                log.warn("Setting audio sprite variable");
                var varSet = {};
                varSet[this.data.variable] = "played";
                this.events.onGameChoice.dispatch( this.data.name, varSet );
                return;
            }
            var audioKey = this.audio[this.audioIndex];
            this.playAudio({ audio: audioKey, key: null, priority: this.data.priority} );
        },
        onGameSpeechStop: function( speech ) {
            // log.warn("On game speech reached audio actor: " + speech);
            if( speech === this.audio[this.audioIndex] ) {
                this.audioIndex++;
                this.playCurrent();
            }
        },
        destroy: function () {
            this.audio = null;
            this.freeBaseActor();
        }
    });

    module.exports = AudioActor;
}());

},{"./actor":"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene\\actors\\actor.js","lodash":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\lodash\\index.js","loglevel":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\loglevel\\lib\\loglevel.js"}],"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene\\actors\\actor-blocker.js":[function(require,module,exports){
/**
 * @author Syd Grosclaude
 * @version 1.0.0
 * @creation 09/23/2015
 * Copyright 2015 Children's Hospital
 * This software is the property of Children's Hospital.
 *
 * The blocker actor. This actor can be used to block input events from the actors behind it.
 *
 * Creating a blocker actor:
 *
 * {
 *     "name": "alertBlocker", // a unique identifier
 *     "type": "blocker", // the required type.
 *     "location": [ 0, 0 ], // optional, default is [0,0]; where on the screen to play this actor
 *     "size": [ 800, 600 ], // optional, default is [game.world.width,game.world.height] how large
 *     "blockerTint" : "0x000000", // optional, default is black (0x000000)
 *     "blockerAlpha" : 0.5, // optional, default is 0.5
 *     "startDelay": 1000 // optional, delay in ticks before adding the actor (think of a tick as a millisecond, defined in main.js)
 * }
 */
(function () {

    var log = require('loglevel'),
        Actor = require('./actor');

     var BlockerActor = Actor.extend( {
        // constructor is now in base class!
        enterScene: function() {
            this.buildActor();
        },
        getRequiredFields: function() {
            return [];
        },
        buildActor: function() {
            var blockerX = (typeof this.data.location === 'undefined') ? 0 : this.data.location[0];
            var blockerY = (typeof this.data.location === 'undefined') ? 0 : this.data.location[1];
            var blockerWidth = (typeof this.data.size === 'undefined') ? this.game.world.width : this.data.size[0];
            var blockerHeight = (typeof this.data.size === 'undefined') ? this.game.world.height : this.data.size[1];
            var blockerTint = (typeof this.data.blockerTint === 'undefined') ? 0x000000 : this.data.blockerTint;
            var blockerAlpha = (typeof this.data.blockerAlpha === 'undefined') ? 0.5 : this.data.blockerAlpha;

            this.blockerSprite = new Phaser.Sprite(this.game, 0, 0);
            var graphics = new Phaser.Graphics(this.game, 0, 0);
            this.blockerSprite.addChild(graphics);
            graphics.beginFill( blockerTint, blockerAlpha );
            graphics.drawRect( blockerX, blockerY, blockerWidth, blockerHeight );
            graphics.endFill();
            this.blockerSprite.inputEnabled = true;

            this.blockerSprite.bringToTop();

            this.game.add.existing(this.blockerSprite);

            this.addDebugBox();
        },
        addDebugBox: function() {
            if( window.isDebugging ) {
                this.debugBox = new Phaser.Graphics(this.game, this.data.location[0], this.data.location[1]);
                this.debugBox.beginFill(0x000000, 1.0);
                this.debugBox.drawRect(0, 0, this.data.size[0], this.data.size[1]);
                this.debugBox.endFill();
                this.game.add.existing(this.debugBox);
            }
        },
        destroy: function() {
            if ( this.blockerSprite ) {
                this.blockerSprite.inputEnabled = false;
                this.blockerSprite.destroy(true);
            }
            if( this.debugBox ) {
                this.debugBox.destroy();
            }
            this.freeBaseActor();
        }
    });

    module.exports = BlockerActor;
}());

},{"./actor":"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene\\actors\\actor.js","loglevel":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\loglevel\\lib\\loglevel.js"}],"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene\\actors\\actor-button-character.js":[function(require,module,exports){
/**
 * @author Zack biernat
 * @version 1.0.0
 * @creation 04/18/2015
 * Copyright 2015 Children's Hospital
 * This software is the property of Children's Hospital.
 *
 * The button-character actor. This actor can be used for selecting a character, and can be
 * used for animating a character that is talking (provide mouth animation). It is differentiated from the
 * NoInputCharacter Actor by allowing the image field to access "buttons" from the theme instead of "actorImages". 
 * This allows button-like behavior for the graphic.
 *
 * Creating a button-character actor:
 *
 * {
 *     "name": "mandy", // a unique identifier
 *     "type": "button-character", // the required type.
 *     "image": "mandy", // the button image to use from the theme (should include "up", "down", "over", "out").
 *     "speechAnimation": true|false, // if there is a speech animation.
 *     "frameRate": 24 // optional frame rate for the speech animation, defaults to 10.
 *     "location": [ 200, 200 ], // where on the screen to play this actor
 *     "size": [ w, h ], // provide this if you do not provide an image.
 *     "speechAudio": "6th_01", // The actor should animate this piece of audio.
 *     "key": "mandy", // optional audio key, if not present, name will be used.
 *     "variable": "character_2", // if you click this character, the variable 'character_2' will be set to 'mandy'.
 *     "startDelay": 1000 // optional, delay in ticks before adding the actor (think of a tick as a millisecond, defined in main.js)
 * }
 *
 *  If you set speechAnimation to true, -talk must be appended to the button-character's image name to differentiate
 *  from the non-speaking version (which may have a different mouth graphic!)
 *
 *  For the speech animations to work, you'll need a speechAnimations section in the theme.json, which specifies
 *  speaking-animation images and location offsets for the mouth:
 *
 *   "speechAnimations": {
 *    "janelle": {
 *      "images": ["talking-janelle-mouth1.png", "talking-janelle-mouth1.png", "talking-janelle-mouth2.png"],
 *      "mouthOffset": [65, 165]   // where within the actor "-talk" image to place the animation
 *    }
 *
 *  There must additionally be "Sound Sync Data", defining which image to show...
 *
 * "soundSyncData": {
 *   "6th_01": [
 *     0,1,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,0,0,0,0,1,1
 *   ], ...
 * }
 *
 *  The 0s and 1s represent which image, and could be 0,1,2,3 etc if there are more than 2. They key should match
 *  the "speechAudio" of this actor as well as the audio being played. 
 *  NOTE: Most of the speechSyncData does not contain '1's and looks like [0,0,2,3,3,3,2,0,2,3,2,0,0,0,2,3,4,4,3,4,2,0].
 *  In this case it is advised to use the [A, B, B, C, D] pattern for the different frames in your theme.
 */
(function () {

    var _ = require('lodash'),
        log = require('loglevel'),
        Actor = require('./actor');

     var ButtonCharacterActor = Actor.extend( {
        // constructor is now in base class!
        enterScene: function() {
            this.buildActor();
            if( this.data.speechAnimation ) {
                this.addSpeechAnimation();
            }
        },
        getRequiredFields: function() {
            return [ "location", "variable" ];
        },
        buildActor: function() {
            var imageId = this.modelInterface.getValue(this.data.image);
            if( imageId ) {
                if (this.data.speechAnimation) {
                    imageId += "-talk";
                }
                this.sprite = this.game.add.button( this.data.location[0], this.data.location[1], this.theme.textureKey,
                    this.onClick, this,
                    this.theme.buttons[this.data.image].over, this.theme.buttons[this.data.image].out,
                    this.theme.buttons[this.data.image].down, this.theme.buttons[this.data.image].up);

                if( this.data.scale ) {
                    this.sprite.scale.setTo( this.data.scale[0], this.data.scale[1]);
                }
            } else {
                this.sprite = this.game.add.button( this.data.location[0], this.data.location[1], this.theme.textureKey,
                    this.onClick, this,
                    this.theme.buttons[this.data.image].over, this.theme.buttons[this.data.image].out,
                    this.theme.buttons[this.data.image].down, this.theme.buttons[this.data.image].up);
                this.sprite.width = this.data.size[0];
                this.sprite.height = this.data.size[1];
                this.addDebugBox();
            }
            this.sprite.inputEnabled = true;
            this.sprite.input.useHandCursor = true;
                /**
             * This is one of the most CPU/expensive things you can do in phaser.
             */
            this.sprite.input.pixelPerfectOver = true;
            

        },
        addDebugBox: function() {
            if( window.isDebugging ) {
                this.debugBox = new Phaser.Graphics(this.game, this.data.location[0], this.data.location[1]);
                this.debugBox.beginFill(0x000000, 1.0);
                this.debugBox.drawRect(0, 0, this.data.size[0], this.data.size[1]);
                this.debugBox.endFill();
                this.game.add.existing(this.debugBox);
            }
        },
        addSpeechAnimation: function() {
            var aSpeechAnimation = this.theme.speechAnimations[this.modelInterface.getValue(this.data.image)];
            if( !aSpeechAnimation ) {
                log.error("Could not add speech animation for character: " + this.data.name);
                log.error("Speech animation not found for " + this.data.image );
                log.error("Check that you have a speechAnimations section in your theme.");
                return;
            }
            this.speechAnimation = this.game.add.sprite(
                this.data.location[0] + aSpeechAnimation.mouthOffset[0],
                this.data.location[1] + aSpeechAnimation.mouthOffset[1],
                this.theme.textureKey,
                aSpeechAnimation.images[0]);
            this.speechAnimation.animations.add('talk', aSpeechAnimation.images);
            this.speechAnimationSet = aSpeechAnimation.images;
            this.speechAnimationDefault = aSpeechAnimation.images[0];

            if( this.data.scale ) {
                this.speechAnimation.scale.setTo( this.data.scale[0], this.data.scale[1]);
                this.speechAnimation.x = this.data.location[0] + (aSpeechAnimation.mouthOffset[0] * this.data.scale[0]);
                this.speechAnimation.y = this.data.location[1] + (aSpeechAnimation.mouthOffset[1] * this.data.scale[1]);
            }
        },
        onGameSpeech: function (speech) {
            var audio = this.modelInterface.getValue(speech.audio);
            if( speech.key ) {
                audio = this.modelInterface.getValue(speech.key) + "_" + audio;
            }
            log.warn("On game speech: " + audio);
            if( this.speechAnimation && this.theme.soundSyncData
              && this.theme.soundSyncData[audio] && this.data.speechAudio === audio ) {
                this.soundSyncData = this.theme.soundSyncData[audio];
                if( ! this.timer ) {
                    var FRAME_RATE = this.data.frameRate ? this.data.frameRate : 10;
                    this.timer = this.game.time.create(false);
                    this.speechIndex = 0;
                    this.timer.loop(1000 / FRAME_RATE, this.incrementSpeech, this);
                    this.timer.start();
                }
            }
        },
        incrementSpeech: function() {
            if( this.soundSyncData ) {
                this.speechIndex++;
                this.speechAnimation.frameName = this.speechAnimationSet[this.soundSyncData[this.speechIndex]];
            }
        },
        onGameSpeechStop: function (speech) {
            if( this.speechAnimation && this.soundSyncData) {
                this.timer.stop();
                this.timer.destroy();
                this.timer = null;
                this.soundSyncData = null;
                this.speechAnimation.frameName = this.speechAnimationDefault;
            }
        },
        onClick: function( event ) {
            var varSet = {};
            varSet[this.data.variable] = this.data.name;
            this.dispatchGameChoice( varSet );
        },
        destroy: function() {
            if ( this.sprite ) {
                this.sprite.inputEnabled = false;
                this.sprite.destroy();
            }
            if( this.speechAnimation ) {
                this.speechAnimation.destroy();
            }
            if( this.debugBox ) {
                this.debugBox.destroy();
            }
            if( this.timer ) {
                this.timer.destroy();
            }
            this.freeBaseActor();
        }
    });

    module.exports = ButtonCharacterActor;
}());
},{"./actor":"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene\\actors\\actor.js","lodash":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\lodash\\index.js","loglevel":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\loglevel\\lib\\loglevel.js"}],"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene\\actors\\actor-button.js":[function(require,module,exports){
/**
 * @author George Frick
 * @version 1.0.0
 * @creation 07/01/2015
 * Copyright 2015 Children's Hospital
 * This software is the property of Children's Hospital.
 *
 * The button actor. This actor can be used for simple actions, such as opening the cell phone. In many 'plays', this actors
 * isn't needed.
 *
 * Creating a button actor:
 * {
 *     "name": "phone1", // a unique identifier
 *     "type": "button", // the required type.
 *     "image": "phone", // the images to use from the button section of the theme.
 *     "audio": "ring", // an optional sound to play when the button is clicked. Don't play long audio!***
 *     "sfx": {
 *        "over": "ding" // optional sounds to play on up/over/down/out. Add support as needed. Over added.
 *     },
 *     "location": [ x, y ],
 *     "variable": "show_cell_phone" // if you open the phone, the variable 'show_cell_phone' will be set to 'phone1'.
 *     "animated": "true", // optional; theme.buttonAnimations.<image> item name containing a list of images
 *     "animationFrameRate": 30, // optional, default is 30 fps; ignored if animated is not true
 *     "animationLoop": "true", // optional, default is false; ignored if animated is not true
 *     "animationRepeat": 4000, // optional, time in seconds, default is no repeat; overrides animationLoop if both are specified; ignored if animated is not true
 *     "alpha": 0.4 // optional, opacity coefficient
 *     // optional "scale": [ 1.1, 1.1 ], // Use negative scales to 'flip' the images.
 *     // optional "startDelay": 1000 // delay in ticks before adding the actor (think of a tick as a millisecond; it is defined in main.js)
 * }
 *
 *  *** If you want to play long audio on a button, use an event and add the audio actor. This is meant for things like
 *      clicks and beeps that play for about a second.
 */
(function () {

    var _ = require('lodash'),
        log = require('loglevel'),
        Actor = require('./actor'),
        TweenHelper = require("./tween-helper");

    var BUTTON_TIMEOUT = 200; // Use this so the audio has a chance to play.

    var ButtonActor = Actor.extend( {
        // constructor is in parent.
        enterScene: function() {
            this.buildActor();
        },
        getRequiredFields: function() {
            return [ "location", "image", "variable" ];
        },
        buildActor: function() {
            if( !this.theme.buttons || !this.theme.buttons[this.data.image] ) {
                throw "Button Actor requires buttons entry in theme, with specific entry matching " + this.data.image;
            }

            var x = this.data.location[0],
                y = this.data.location[1],
                anchorX = 0,
                anchorY = 0;

            if( x === "center" ) {
                x = this.game.world.centerX;
                anchorX = 0.5;
            }

            if( y === "center" ) {
                y = this.game.world.centerY;
                anchorY = 0.5;
            }

            if (this.data.anchor === "left") {
                anchorX = 0;
            } else if (this.data.anchor === "center") {
                anchorX = 0.5;
            } else if (this.data.anchor === "right") {
                anchorX = 1;
            }

            if( this.data.anchor ) {
                anchorX = this.data.anchor[0];
                anchorY = this.data.anchor[1];
            }

            this.button = this.game.add.button( x,y, this.getTextureKey(this.data),
                this.onPointerUp, this,
                this.theme.buttons[this.data.image].over, this.theme.buttons[this.data.image].out,
                this.theme.buttons[this.data.image].down, this.theme.buttons[this.data.image].up);
            this.buttonIsAnimated = ( typeof this.data.animated !== "undefined" ) && ( this.data.animated === true );
            if ( this.buttonIsAnimated ) {
                this.button.animations.add(this.data.image, this.theme.buttonAnimations[this.data.image]);
                this.animationFrameRate = ( typeof this.data.animationFrameRate !== "undefined" ) ? this.data.animationFrameRate : 30;
                this.loopAnimation = ( typeof this.data.animationLoop !== "undefined" ) ? this.data.animationLoop : false;
                this.animationRepeat = ( typeof this.data.animationRepeat !== "undefined" ) ? this.data.animationRepeat : 0;
                if ( this.animationRepeat > 0 ) {
                    this.loopAnimation = false; // timed repeat overrides looping
                    this.animationTimerEvent = this.game.time.events.loop( this.animationRepeat, this.animateButton, this );
                }
                this.animateButton();
            }
            this.button.inputEnabled = true;
            this.button.input.useHandCursor = true;
            this.button.anchor.setTo( anchorX, anchorY );

            if( this.data.scale ) {
                this.button.scale.setTo( this.data.scale[0], this.data.scale[1]);
            }

            if (this.data.alpha) {
                this.button.alpha = this.data.alpha;
            }

            var fontName;
            var textX = this.button.width / 2;
            var textY = this.button.height / 2;
            var anchor = [0.5, 0.45];

            /**
             * GJF - this was already here and I don't want to break backwards compatibility. so I'm adding a
             * "textData" section below.
             */
            if( this.data.text ) {
                fontName = this.data.font;
                this.style = this.getFont((typeof fontName !== 'undefined') ? fontName : "questionText");
                this.textSprite = this.game.add.text(textX, textY, this.data.text, this.style);
            }

            if( this.data.textData ) {
                var textData = this.data.textData;
                fontName = textData.font;
                this.style = this.getFont((typeof fontName !== 'undefined') ? fontName : "questionText");

                if( textData.textX ) {
                    textX = textData.textX;
                }
                if( textData.textY ) {
                    textY = textData.textY;
                }
                if( textData.anchor ) {
                    anchor = textData.anchor;
                }
                this.textSprite = this.game.add.text(textX, textY, textData.text, this.style);
            }

            if( this.textSprite ) {
                this.textSprite.anchor.setTo( anchor[0], anchor[1] );
                this.button.addChild(this.textSprite);
            }

            this.button.onInputOver.add(this.onMouseOver, this);

            if( this.data.tween ) {
                if (_.isUndefined(this.tweenHelper)) {
                    this.tweenHelper = new TweenHelper(this.game, this);
                }
                this.tweenHelper.addTweens(this.data.tween, this.button);
                if (this.textSprite) {
                    this.tweenHelper.addTweens(this.data.tween, this.textSprite);
                }
            }
        },
        onMouseOver: function() {
           if( this.data.sfx && this.data.sfx.over ) {
               var eventData = {"text": "", "audio" : this.data.sfx.over, "priority": "sfx" };
               this.playAudio( eventData);
           }
        },
        animateButton: function() {
            if ( this.buttonIsAnimated ) {
                this.button.animations.play(this.data.image, this.animationFrameRate, this.loopAnimation, false);
            }
        },
        onPointerUp: function( event ) {

            if( this.data.audio ) {
                var eventData = {"text": "", "audio" : this.data.audio, "priority": "sfx" };
                this.playAudio( eventData);
            }

            this.button.inputEnabled = false;
            var that = this;
            setTimeout( function() {
                that.button.inputEnabled = true;
                var varSet = {};
                varSet[that.data.variable] = that.data.name;
                that.events.onGameChoice.dispatch( that.data.name, varSet );

            }, BUTTON_TIMEOUT);

        },
        destroy: function() {
            if ( this.button ) {
                if (!_.isUndefined(this.tweenHelper)) {
                    this.tweenHelper.removeTweens(this.button);
                }
                if ( typeof this.animationTimerEvent != 'undefined' ) {
                    this.game.time.events.remove( this.animationTimerEvent );
                }
                this.button.destroy();
            }
            if( this.textSprite ) {
                if (!_.isUndefined(this.tweenHelper)) {
                    this.tweenHelper.removeTweens(this.textSprite);
                }
                this.textSprite.destroy();
            }
            this.freeBaseActor();
        }
    });

    module.exports = ButtonActor;
}());

},{"./actor":"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene\\actors\\actor.js","./tween-helper":"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene\\actors\\tween-helper.js","lodash":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\lodash\\index.js","loglevel":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\loglevel\\lib\\loglevel.js"}],"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene\\actors\\actor-character.js":[function(require,module,exports){
/**
 * @author George Frick
 * @version 1.0.0
 * @creation 07/01/2015
 * Copyright 2015 Children's Hospital
 * This software is the property of Children's Hospital.
 *
 * The character actor. This actor can be used for selecting a character (clickable with text bubble), or can be
 * used for animating a character that is talking (provide mouth animation)
 *
 * Creating a character actor:
 *
 * {
 *     "name": "mandy", // a unique identifier
 *     "type": "character", // the required type.
 *     "image": "mandy", // the image to use from the theme.
 *     "speechAnimation": true|false, // if there is a speech animation.
 *     "location": [ 200, 200 ], // where on the screen to play this actor
 *     "size": [ w, h ], // provide this if you do not provide an image.
 *     "text": "Mandy", // what to put in a text bubble during mouse over.
 *     "audio": "6th_01", // optional audio to speak on mouse over.
 *     "key": "mandy", // optional audio key, if not present, name will be used.
 *     "variable": "character_2", // if you click this character, the variable 'character_2' will be set to 'mandy'.
 *     "startDelay": 1000 // optional, delay in ticks before adding the actor (think of a tick as a millisecond, defined in main.js)
 *
 * }
 *
 *  If you set speechAnimation to true, -talk will be appended to the characters image name.
 * speechAnimation/speechLocation are optional.
 *
 * See also theme.json's speechAnimations, which specify speaking-animation images and location offsets:
 *
 *   "speechAnimations": {
 *    "janelle": {
 *      "images": ["talking-janelle-mouth1.png", "talking-janelle-mouth1.png", "talking-janelle-mouth2.png"],
 *      "mouthOffset": [65, 165]   // where within the actor "-talk" image to place the animation
 *    }
 *
 *  Your theme should have a 'bubbleTextWidth' entry to specify how wide to make the text bubble.
 */
(function () {

    var _ = require('lodash'),
        log = require('loglevel'),
        Actor = require('./actor');

     var CharacterActor = Actor.extend( {
        // constructor is now in base class!
        enterScene: function() {
            this.buildActor();
            if( this.data.text ) {
                this.addTextBox();
            }
            if( this.data.speechAnimation ) {
                this.addSpeechAnimation();
            }
        },
        getRequiredFields: function() {
            return [ "location" ];
        },
        buildActor: function() {
            var imageId = this.modelInterface.getValue(this.data.image);
            if( imageId ) {
                if (this.data.speechAnimation) {
                    imageId += "-talk";
                }
                this.sprite = this.game.add.sprite(this.data.location[0], this.data.location[1], this.theme.textureKey,
                    this.getImage(imageId, 'actorImages'));
                
                if( this.data.scale ) {
                    this.sprite.scale.setTo( this.data.scale[0], this.data.scale[1]);
                }
            } else {
                this.sprite = this.game.add.sprite(this.data.location[0], this.data.location[1]);
                this.sprite.width = this.data.size[0];
                this.sprite.height = this.data.size[1];
                this.addDebugBox();
            }

            if (this.data.text) {
                this.sprite.events.onInputOver.add( this.onMouseIn, this);
                this.sprite.events.onInputOut.add( this.onMouseOut, this);
            }
            if (this.data.variable) {
                this.sprite.events.onInputUp.add( this.onPointerUp, this);
            }

            if (this.data.text || this.data.variable) {
                this.sprite.inputEnabled = true;
                this.sprite.input.useHandCursor = true;
                /**
                 * This is one of the most CPU/expensive things you can do in phaser.
                 */
                this.sprite.input.pixelPerfectOver = true;
            }
        },
        addDebugBox: function() {
            if( window.isDebugging ) {
                this.debugBox = new Phaser.Graphics(this.game, this.data.location[0], this.data.location[1]);
                this.debugBox.beginFill(0x000000, 1.0);
                this.debugBox.drawRect(0, 0, this.data.size[0], this.data.size[1]);
                this.debugBox.endFill();
                this.game.add.existing(this.debugBox);
            }
        },
        addTextBox: function() {
            if( !this.theme.bubbleTextWidth ) {
                log.error("You must specify a bubbleTextWidth in your theme when using character labels.");
            }
            var boxY = this.sprite.height / 4,
                boxX = this.sprite.width / 2,
                boxWidth = this.theme.bubbleTextWidth,
                font = this.getFont('bubbleIcon'),
                labelX = this.data.location[0] + boxX,
                labelY = this.data.location[1] + boxY;

            font.wordWrap = true;
            font.wordWrapWidth = boxWidth * 0.9;

            var text = new Phaser.Text(this.game, boxWidth / 2, 10, this.data.text, font  );
            text.anchor.setTo( 0.5, 0 );

            var boxHeight = text.height + 10;

            // ACT-353 If it is overlapping the edge of the screen, adjust the location.
            if( labelX + boxWidth + 3 > this.game.world.width ) {
                labelX = (this.game.world.width - boxWidth - 3);
            }

            if( labelY + boxHeight + 3 > this.game.world.height) {
                labelY = (this.game.world.height - boxHeight - 3);
            }

            this.graphics = new Phaser.Graphics(this.game, labelX, labelY);
            this.graphics.beginFill( 0x000000, 1.0 );
            this.graphics.drawRoundedRect( 3, 3, boxWidth, boxHeight, 9 );
            this.graphics.endFill();
            this.graphics.beginFill(0xffffff);
            this.graphics.drawRoundedRect(0, 0, boxWidth, boxHeight , 9);
            this.graphics.endFill();
            this.graphics.visible = false;
            this.graphics.addChild(text);
            this.game.add.existing(this.graphics);

        },
        addSpeechAnimation: function() {
            var aSpeechAnimation = this.theme.speechAnimations[this.modelInterface.getValue(this.data.image)];
            if( !aSpeechAnimation ) {
                log.error("Could not add speech animation for character: " + this.data.name);
                log.error("Speech animation not found for " + this.data.image );
                log.error("Check that you have a speechAnimations section in your theme.");
                return;
            }
            this.speechAnimation = this.game.add.sprite(
                this.data.location[0] + aSpeechAnimation.mouthOffset[0],
                this.data.location[1] + aSpeechAnimation.mouthOffset[1],
                this.theme.textureKey,
                aSpeechAnimation.images[0]);
            this.speechAnimation.animations.add('talk', aSpeechAnimation.images);
            this.speechAnimationSet = aSpeechAnimation.images;
            this.speechAnimationDefault = aSpeechAnimation.images[0];

            if( this.data.scale ) {
                this.speechAnimation.scale.setTo( this.data.scale[0], this.data.scale[1]);
                this.speechAnimation.x = this.data.location[0] + (aSpeechAnimation.mouthOffset[0] * this.data.scale[0]);
                this.speechAnimation.y = this.data.location[1] + (aSpeechAnimation.mouthOffset[1] * this.data.scale[1]);
            }
        },
        onGameSpeech: function (speech) {
            var audio = this.modelInterface.getValue(speech.audio);
            if( speech.key ) {
                audio = this.modelInterface.getValue(speech.key) + "_" + audio;
            }
            log.warn("On game speech: " + audio);
            if( this.speechAnimation && this.theme.soundSyncData && this.theme.soundSyncData[audio] ) {
                this.soundSyncData = this.theme.soundSyncData[audio];
                if( ! this.timer ) {
                    this.timer = this.game.time.create(false);
                    this.speechIndex = 0;
                    this.timer.loop(100, this.incrementSpeech, this);
                    this.timer.start();
                }
            }
        },
        incrementSpeech: function() {
            if( this.soundSyncData ) {
                this.speechIndex++;
                this.speechAnimation.frameName = this.speechAnimationSet[this.soundSyncData[this.speechIndex]];
            }
        },
        onGameSpeechStop: function (speech) {
            if( this.speechAnimation && this.soundSyncData) {
                this.timer.stop();
                this.timer.destroy();
                this.timer = null;
                this.soundSyncData = null;
                this.speechAnimation.frameName = this.speechAnimationDefault;
            }
        },
        onMouseIn: function( event ) {
            if( this.graphics ) {
                this.graphics.visible = true;
                this.game.world.bringToTop(this.graphics);
                if( this.data.audio ) {
                    this.dispatchGameSpeech( {
                        "text": this.data.text,
                        "audio": this.data.audio,
                        "key": this.data.key || this.data.name });
                }
            }
        },
        onMouseOut: function( event ) {
            if( this.graphics && this.graphics.visible === true) {
                this.graphics.visible = false;
            }
        },
        onPointerUp: function( event ) {
            var varSet = {};
            varSet[this.data.variable] = this.data.name;
            this.dispatchGameChoice( varSet );
        },
        destroy: function() {
            if ( this.sprite ) {
                this.sprite.inputEnabled = false;
                this.sprite.destroy();
            }
            if( this.data.text ) {
                this.graphics.destroy(true);
            }
            if( this.speechAnimation ) {
                this.speechAnimation.destroy();
            }
            if( this.debugBox ) {
                this.debugBox.destroy();
            }
            if( this.timer ) {
                this.timer.destroy();
            }
            this.freeBaseActor();
        }
    });

    module.exports = CharacterActor;
}());

},{"./actor":"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene\\actors\\actor.js","lodash":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\lodash\\index.js","loglevel":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\loglevel\\lib\\loglevel.js"}],"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene\\actors\\actor-click-animation.js":[function(require,module,exports){
/**
 * @author George Frick
 * @version 1.0.0
 * @creation 07/01/2015
 * Copyright 2015 Children's Hospital
 * This software is the property of Children's Hospital.
 *
 * The click-animation actor. Will start with an image, and when clicked; will animate and then set to final image.
 * Will generate events for each
 *
 * Creating a click-animation actor, a starting, animation set, and ending image:
 * {
 *     "name": "portrait1", // a unique identifier
 *     "type": "click-animation", // the required type.
 *     "images": "phone", // the images to use from the button section of the theme.
 *     "key": "whatevs", // optional image key
 *     "textureKey": "key", // optional text key to get animation from
 *     "location": [ x, y ],
 *     "audio": "audio", // optional audio to play during animation.
 *     "scale": [ x, y], // optional x/y scale.
 *     "startDelay": 1000 // optional, delay in ticks before adding the actor (think of a tick as a millisecond, defined in main.js)
 *     "variable": "x" // variable to send out 2nd click events, will be name + "_playing" and name + "_finished"
 * }
 *
 */
(function () {

    var _ = require('lodash'),
        Actor = require('./actor');

    var ClickAnimationActor = Actor.extend( {
        // constructor in parent
        getRequiredFields: function() {
            return [ "location", "images" ];
        },
        enterScene: function() {
            this.buildActor();
        },
        buildActor: function() {
            this.sprite = this.game.add.sprite( this.data.location[0], this.data.location[1],
                this.getTextureKey(this.data), this.getImage( this.data.images, this.data.key)[0]);
            this.sprite.inputEnabled = true;
            /**
             * This is one of the most CPU/expensive things you can do in phaser.
             */
            this.sprite.input.pixelPerfectOver = true;
            this.sprite.input.useHandCursor = true;

            this.sprite.events.onInputUp.add( this.onPointerUp, this);

            this.animation = this.sprite.animations.add('animation', this.getImage( this.data.images, this.data.key) );
            this.animation.onComplete.add( this.onAnimationComplete, this);

            var anchorX = 0, anchorY = 0;
            var x = this.data.location[0],
                y = this.data.location[1];
            this.scaleX = 1.0;
            this.scaleY = 1.0;

            if( this.data.scale ) {
                this.scaleX = this.data.scale[0];
                this.scaleY = this.data.scale[1];
            }
            this.sprite.scale.setTo( this.scaleX, this.scaleY );

            if( x === "center" ) {
                x = this.game.world.centerX;
                anchorX = 0.5;
            }

            if( y === "center" ) {
                y = this.game.world.centerY;
                anchorY = 0.5;
            }

            if( this.data.anchor ) {
                anchorX = this.data.anchor[0];
                anchorY = this.data.anchor[1];
            }

            this.sprite.anchor.setTo( anchorX, anchorY);
            this.sprite.x = x;
            this.sprite.y = y;
            this.animated = false;
        },
        onPointerUp: function(  ) {
            var varSet = {};
            var suffix;
            if( this.isAnimated === true ) {
                suffix = "_finished";
            } else {
                suffix = "_playing";
                varSet[this.data.variable] = this.data.name + "_playing";
                this.sprite.animations.play("animation", 10, false);
                this.isAnimated = true;
                if (this.data.audio) {
                    this.playAudio( { audio: this.data.audio, key: null});
                }
            }
            varSet[this.data.variable] = this.data.name + suffix;
            this.events.onGameChoice.dispatch(this.data.name, varSet, this);
        },
        onAnimationComplete: function(  ) {
            this.isAnimated = true;
        },
        destroy: function() {
            if ( this.sprite ) {
                this.sprite.destroy();
            }
            this.freeBaseActor();
        }
    });

    module.exports = ClickAnimationActor;
}());

},{"./actor":"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene\\actors\\actor.js","lodash":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\lodash\\index.js"}],"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene\\actors\\actor-decoration.js":[function(require,module,exports){
/**
 * @author George Frick
 * @version 1.0.0
 * @creation 07/01/2015
 * Copyright 2015 Children's Hospital
 * This software is the property of Children's Hospital.
 *
 * The decoration actor. Just an image on the screen.
 *
 * Creating a decoration actor, a simple image:
 * {
 *     "name": "portrait1",     // a unique identifier
 *     "type": "decoration",    // the required type.
 *     "image": "phone",        // the images to use from the button section of the theme.
 *     "key": "something",      // an optional key to look under for the image.
 *     "location": [ x, y ],
 *     "scale": [ x, y],        // optional x/y scale.
 *     "angle": -30,            // optional, degrees from north (-180 to 180)
 *     "rotation": 0.5,         // optional, radians in units of PI. This overrides angle if both are set.
 *     "startDelay": 1000 // optional, delay in ticks before adding the actor (think of a tick as a millisecond, defined in main.js)
 *     "alpha": 0.5 // optional alpha transparency
 *     "tween": [Object] // optional transition object
 * }
 *
 */
(function () {

    var _ = require('lodash'),
        Actor = require('./actor');

    var DecorationActor = Actor.extend( {
        // constructor in parent
        getRequiredFields: function() {
            return [ "location", "image" ];
        },
        enterScene: function() {
            this.buildActor();
        },
        buildActor: function() {
            this.sprite = this.game.add.sprite( this.data.location[0], this.data.location[1],
                this.getTextureKey(this.data), this.getImage( this.data.image, this.data.key));
            var anchorX = 0, anchorY = 0;
            var x = this.data.location[0],
                y = this.data.location[1];

            if( this.data.scale ) {
                this.sprite.scale.setTo( this.data.scale[0], this.data.scale[1]);
            }

            if( x === "center" ) {
                x = this.game.world.centerX;
                anchorX = 0.5;
            }

            if( y === "center" ) {
                y = this.game.world.centerY;
                anchorY = 0.5;
            }

            if( this.data.anchor ) {
                anchorX = this.data.anchor[0];
                anchorY = this.data.anchor[1];
            }

            this.sprite.anchor.setTo( anchorX, anchorY);
            this.sprite.x = x;
            this.sprite.y = y;

            if ( this.data.alpha ) {
                this.sprite.alpha = this.data.alpha;
            }

            if ( this.data.angle ) {
                this.sprite.angle = this.data.angle;
            }

            if ( this.data.rotation ) {
                this.sprite.rotation = Math.PI * this.data.rotation;
            }

            if( this.data.tween ) {
                var tweenData = this.data.tween;

                var delay = tweenData.delay ? tweenData.delay : 0;
                var easing = ( typeof tweenData.easing != "undefined" ) ? tweenData.easing : "Linear";

                if( tweenData.location ) {
                    this.game.add.tween(this.sprite).to( { x: tweenData.location[0], y: tweenData.location[1]  }, tweenData.time, easing, true, delay);
                }
                if( tweenData.scale ) {
                    this.game.add.tween(this.sprite.scale).to( { x: tweenData.scale[0], y: tweenData.scale[1]  }, tweenData.time, easing, true, delay);
                }
                if( !_.isUndefined(tweenData.alpha) ) {
                    this.game.add.tween(this.sprite).to( {alpha: tweenData.alpha}, tweenData.time, easing, true, delay);
                }
            }
        },
        destroy: function() {
            if ( this.sprite ) {
                this.sprite.destroy();
            }
            this.freeBaseActor();
        }
    });

    module.exports = DecorationActor;
}());

},{"./actor":"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene\\actors\\actor.js","lodash":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\lodash\\index.js"}],"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene\\actors\\actor-drag.js":[function(require,module,exports){
/**
 * @author George Frick
 * @version 1.0.0
 * @creation 07/01/2015
 * Copyright 2015 Children's Hospital
 * This software is the property of Children's Hospital.
 *
 * The drag actor. An image on the screen with optional text that can be dragged around.
 *
 * Creating a decoration actor, a simple image:
 * {
 *     "name": "portrait1", // a unique identifier
 *     "type": "drag", // the required type.
 *     "images": { "normal" : "phone", // the images to use from the images section the theme.
 *                 "dragging" : "phone", // optional image while dragging
 *                 "overlap" : "phone", // optional image when overlapping.
 *     "key": "something", // an optional key to look under for the image(s).
 *     "location": [ x, y ],
 *     "variable": "string" // name of variable to be set when this is dragging/dropped/etc.
 * }
 *
 */
(function () {

    var _ = require('lodash'),
        log = require('loglevel'),
        Actor = require('./actor');

    var DragActor = Actor.extend( {
        // constructor in parent
        getRequiredFields: function() {
            return [ "location", "images", "variable" ];
        },
        enterScene: function() {
            this.buildActor();
        },
        buildActor: function() {
            var sprite = this.game.add.sprite( this.data.location[0], this.data.location[1],
                this.theme.textureKey, this.getImage( this.getFrame(), this.data.key));
            this.game.physics.enable(sprite, Phaser.Physics.ARCADE);
            sprite.body.setSize( 1, 1,  sprite.width/2, sprite.height/2);
            sprite.inputEnabled = true;
            sprite.input.pixelPerfectOver = true;
            sprite.input.enableDrag(true, true);
            sprite.input.useHandCursor = true;
            sprite.events.onDragStop.add(this.itemDragStop, this);
            sprite.events.onDragStart.add(this.itemDragStart, this);
            sprite.origLoc = [ sprite.x, sprite.y];
            this.sprite = sprite;

            var fontName;
            var textX = this.sprite.width / 2;
            var textY = this.sprite.height / 2;
            var anchor = [0.5, 0.5];

            if( this.data.textData ) {
                var textData = this.data.textData;
                fontName = textData.font;
                this.style = this.getFont((typeof fontName !== 'undefined') ? fontName : "questionText");

                if( textData.textX ) {
                    textX = textData.textX;
                }
                if( textData.textY ) {
                    textY = textData.textY;
                }
                if( textData.anchor ) {
                    anchor = textData.anchor;
                }
                this.textSprite = this.game.add.text(textX, textY, textData.text, this.style);
            }

            if( this.textSprite ) {
                this.textSprite.anchor.setTo( anchor[0], anchor[1] );
                this.sprite.addChild(this.textSprite);
            }
        },
        returnToHome: function() {

        },
        itemDragStop: function () {
            this.isDragging = false;
            this.updateImage();
            var temp = {};
            temp["dropped"] = this.data.name;
            this.dispatchGameChoice(temp);
            // It will have been dropped, and possibly removed from scene.
            if( this.sprite ) {
                this.sprite.x = this.sprite.origLoc[0];
                this.sprite.y = this.sprite.origLoc[1];
            }
        },
        itemDragStart: function ( ) {
            this.isDragging = true;
            this.updateImage();
            var temp = {};
            temp["dragging"] = this.data.name;
            this.dispatchGameChoice(temp);
        },
        destroy: function() {
            if ( this.sprite ) {
                this.sprite.body.destroy();
                this.sprite.inputEnabled = false;
                this.sprite.events.onDragStop.removeAll();
                this.sprite.events.onDragStart.removeAll();
                this.sprite.destroy(true);
                this.sprite = null;
            }
            if( this.textSprite ) {
                this.textSprite.destroy();
            }
            this.style = null;
            this.freeBaseActor();
        },
        getFrame: function(type) {
            var frameName = this.data.images.normal;
            if(type === "overlap" && this.data.images.overlap ) {
                frameName = this.data.images.overlap;
            } else if( (type === "dragging" || !frameName) && this.data.images.dragging ) {
                frameName = this.data.images.dragging;
            }
            return frameName;
        },
        updateImage: function() {
            var frame;
            if( this.isOverlapping !== null ) {
                frame = this.getFrame("overlap");
            } else if( this.isDragging === true ) {
                frame = this.getFrame("dragging");
            } else {
                frame = this.getFrame("normal");
            }
            this.sprite.frameName = this.getImage( frame, this.data.key);
            this.sprite.body.setSize( 1, 1,  this.sprite.width/2, this.sprite.height/2);
        },
        getBody: function() {
            if( this.sprite ) {
                return this.sprite.body;
            }
            return null;
        },
        onOverlapping: function( otherActor ) {
            if( this.isOverlapping === otherActor ) {
                return;
            }
            this.isOverlapping = otherActor;
            // change to overlapping image.
            this.updateImage();
        }
    });

    module.exports = DragActor;
}());

},{"./actor":"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene\\actors\\actor.js","lodash":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\lodash\\index.js","loglevel":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\loglevel\\lib\\loglevel.js"}],"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene\\actors\\actor-draw.js":[function(require,module,exports){
/**
 * @author Zack Biernat
 * @version 1.0.0
 * @creation 6/26/2018
 * Copyright 2018 Children's Hospital
 * This software is the property of Children's Hospital.
 *
 * The blocker actor. This actor can be used to block input events from the actors behind it.
 *
 * Creating a draw actor:
 *
 * {
 *     "name": "draw-demo", // a unique identifier
 *     "type": "draw", // the required type.
 *     "fieldLocations": [[400, 300], [500, 300]], // The target coordinates for each selectable field
 *     "fieldSize": 50, // the radius of each area
 *     "variable": "drawChooser" // The variable name for dispatched events
 * }
 */
(function () {

    var log = require('loglevel'),
        Actor = require('./actor');

     var DrawActor = Actor.extend( {
        // constructor is now in base class!
        enterScene: function() {
            this.buildActor();
        },
        getRequiredFields: function() {
            return [];
        },
        buildActor: function() {
            if (!this.data.fieldSize || !this.data.fieldLocations) {
                throw "Required field size or field locations not found";
            }
            this.bmd = this.game.make.bitmapData(this.game.width, this.game.height);
            this.bmd.addToWorld();
            this.addDebugBox();
            this.game.input.onDown.add(this.onMouseDown, this);
            this.game.input.onUp.add(this.onMouseUp, this);

            this.positions = [];
        },
        onMouseDown: function(pointer) {
            if (this.bmd) {
                this.bmd.clear();
            }

            this.bmd.ctx.beginPath();
            this.bmd.ctx.strokeStyle = "#005996"
            this.bmd.ctx.lineWidth = 8;
            this.bmd.ctx.moveTo(pointer.x, pointer.y);

            this.game.input.addMoveCallback(this.onDraw, this);
        },
        onDraw: function(pointer, x, y) {
            if (this.positions.length < 100) {
                this.positions.push([x, y])
            }
            this.bmd.ctx.lineTo(x, y);
            this.bmd.ctx.stroke();
        },
        onMouseUp: function() {
            this.calculateAverage();
            this.bmd.ctx.closePath();
            this.game.input.deleteMoveCallback(this.onDraw, this);
        },
        calculateAverage: function() {
            if (this.positions.length < 20) {
                return;
            }
            var aveX = 0;
            var aveY = 0;
            for (var i = 0; i < this.positions.length; i++) {
                aveX += this.positions[i][0];
                aveY += this.positions[i][1];
            }
            aveX /= this.positions.length;
            aveY /= this.positions.length;

            this.positions = [];

            this.checkTargets(aveX, aveY);
            
        },
        checkTargets: function(x, y) {
            var targets = this.data.fieldLocations;
            var range = this.data.fieldSize;
            var choice = targets.length;

            for (var i = 0; i < targets.length; i++) {
                if (y < range + targets[i][1] && 
                    targets[i][1] < y && 
                    x < 100 + targets[i][0] && 
                    targets[i][0] < x) {
                    choice = i;
                }
            }

            var varSet = {};
            varSet[this.data.variable] = choice; //This needs to determine which thing was selected
            this.dispatchGameChoice(varSet);
            this.game.time.events.add(10, function() {
                this.lastBmd = this.bmd;
                this.lastBmd.addToWorld(); 
            }, this)
        },
        addDebugBox: function() {
            if( window.isDebugging ) {
                this.debugBox = new Phaser.Graphics(this.game, this.data.location[0], this.data.location[1]);
                this.debugBox.beginFill(0x000000, 1.0);
                this.debugBox.drawRect(0, 0, this.data.size[0], this.data.size[1]);
                this.debugBox.endFill();
                this.game.add.existing(this.debugBox);
            }
        },
        destroy: function() {
            if ( this.bmd ) {
                this.bmd.clear();
            }
            if( this.debugBox ) {
                this.debugBox.destroy();
            }
            this.game.input.deleteMoveCallback(this.onDraw, this);
            this.game.input.onDown.remove(this.onMouseDown, this);
            this.game.input.onUp.remove(this.onMouseUp, this);
            this.freeBaseActor();
        }
    });

    module.exports = DrawActor;
}());

},{"./actor":"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene\\actors\\actor.js","loglevel":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\loglevel\\lib\\loglevel.js"}],"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene\\actors\\actor-drop.js":[function(require,module,exports){
/**
 * @author George Frick
 * @version 1.0.0
 * @creation 07/01/2015
 * Copyright 2015 Children's Hospital
 * This software is the property of Children's Hospital.
 *
 * The drop actor. You can drop drag actors onto this one, triggering it's variable and optional image stage.
 *
 * Creating a decoration actor, a simple image:
 * {
 *     "name": "portrait1", // a unique identifier
 *     "type": "drop", // the required type.
 *     "images": { "normal" : "phone", // the images to use from the images section the theme.
 *                 "overlap" : "phone", // optional image when overlapping.
 *     "key": "something", // an optional key to look under for the image(s).
 *     "location": [ x, y ],
 *     "body": [ width%, height%, offsetx, offsety ], // optional body.
 *     "variable": "string" // name of variable to be set when this is dropped/etc.
 * }
 *
 */
(function () {

    var _ = require('lodash'),
        log = require('loglevel'),
        Actor = require('./actor');

    var DropActor = Actor.extend( {
        // constructor in parent
        getRequiredFields: function() {
            return [ "location", "images", "variable" ];
        },
        enterScene: function() {
            this.buildActor();
        },
        buildActor: function() {
            var sprite = this.game.add.sprite( this.data.location[0], this.data.location[1],
                this.theme.textureKey, this.getImage( this.data.images.overlap, this.data.key));
            this.game.physics.enable(sprite, Phaser.Physics.ARCADE);
            var body = [sprite.width * 0.6, sprite.height * 0.6,  sprite.width * 0.2, sprite.height * 0.2];
            if( this.data.body ) {
                body[0] = sprite.width * this.data.body[0];
                body[1] = sprite.height * this.data.body[1];
                body[2] = this.data.body[2] || body[2];
                body[3] = this.data.body[3] || body[3];
            }
            sprite.body.setSize( body[0], body[1], body[2], body[3] );
            sprite.inputEnabled = true;
            sprite.input.pixelPerfectOver = true;
            this.sprite = sprite;
            sprite.visible = false;

            var fontName;
            var textX = this.sprite.width / 2;
            var textY = this.sprite.height / 2;
            var anchor = [0.5, 0.5];

            if( this.data.textData ) {
                var textData = this.data.textData;
                fontName = textData.font;
                this.style = this.getFont((typeof fontName !== 'undefined') ? fontName : "questionText");

                if( textData.textX ) {
                    textX = textData.textX;
                }
                if( textData.textY ) {
                    textY = textData.textY;
                }
                if( textData.anchor ) {
                    anchor = textData.anchor;
                }
                this.textSprite = this.game.add.text(textX, textY, textData.text, this.style);
                if ( (typeof (this.style["lineSpacing"])) !== 'undefined' ) {
                    this.textSprite.lineSpacing = this.style["lineSpacing"];
                }

            }

            if( this.textSprite ) {
                this.textSprite.anchor.setTo( anchor[0], anchor[1] );
                this.sprite.addChild(this.textSprite);
            }
        },
        getFrame: function(type) {
            var frameName = null;
            if( type === "normal" && this.data.images.normal ) {
                frameName = this.data.images.normal;
            } else if(type === "overlap" && this.data.images.overlap ) {
                frameName = this.data.images.overlap;
            } else if( (type === "dragging" || !frameName) && this.data.images.dragging ) {
                frameName = this.data.images.dragging;
            }
            return frameName;
        },
        updateImage: function() {
            var frame = null;
            if( this.isOverlapping !== null ) {
                frame = this.getFrame("overlap");
            } else if( this.isDragging === true ) {
                frame = this.getFrame("dragging");
            } else {
                frame = this.getFrame("normal");
            }
            if( frame !== null ) {
                this.sprite.visible = true;
                this.sprite.frameName = this.getImage(frame, this.data.key);
            } else {
                this.sprite.visible = false;
            }
        },
        getBody: function() {
            if( this.sprite ) {
                return this.sprite.body;
            }
            return null;
        },
        onOverlapping: function( otherActor ) {

            if( this.isOverlapping === otherActor ) {
                return;
            }
            this.isOverlapping = otherActor;
            // change to overlapping image.
            this.updateImage();
        },
        onReceiveDrop: function( otherActorName ) {
            log.warn("Received drop? " + otherActorName);
            var temp = {};
            temp[this.data.variable] = otherActorName;
            this.dispatchGameChoice(temp);
        },
        destroy: function() {
            this.isOverlapping = null;
            if ( this.sprite ) {
                this.sprite.body.destroy();
                this.sprite.inputEnabled = false;
                this.sprite.destroy(true);
                this.sprite = null;
            }
            if( this.textSprite ) {
                this.textSprite.destroy();
            }
            this.style = null;
            this.freeBaseActor();
        }
    });

    module.exports = DropActor;
}());

},{"./actor":"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene\\actors\\actor.js","lodash":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\lodash\\index.js","loglevel":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\loglevel\\lib\\loglevel.js"}],"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene\\actors\\actor-fadeout.js":[function(require,module,exports){
/**
 * @author Syd Grosclaude
 * @version 1.0.0
 * @creation 09/23/2015
 * Copyright 2015 Children's Hospital
 * This software is the property of Children's Hospital.
 *
 * The fadeout actor. This actor can be used to fade out the screen
 *
 * Creating a blocker actor:
 *
 * {
 *     "name": "alertBlocker", // a unique identifier
 *     "type": "fadeout", // the required type.
 *     "location": [ 0, 0 ], // optional, default is [0,0]; where on the screen to play this actor
 *     "size": [ 800, 600 ], // optional, default is [game.world.width,game.world.height] how large
 *     "color" : "0x000000", // optional, default is black (0x000000)
 *     "startDelay": 1000, // optional, delay in ticks before adding the actor (think of a tick as a millisecond, defined in main.js)
 *     "fadePeriod": 3000, //  how long to fade over.
 *     "variable": "x" // variable to set upon completion.
 * }
 */
(function () {

    var log = require('loglevel'),
        Actor = require('./actor');

    var FadeoutActor = Actor.extend({
        // constructor is now in base class!
        enterScene: function () {
            this.buildActor();
        },
        getRequiredFields: function () {
            return ["fadePeriod", "variable"];
        },
        buildActor: function () {
            var blockerX = (typeof this.data.location === 'undefined') ? 0 : this.data.location[0];
            var blockerY = (typeof this.data.location === 'undefined') ? 0 : this.data.location[1];
            var blockerWidth = (typeof this.data.size === 'undefined') ? this.game.world.width : this.data.size[0];
            var blockerHeight = (typeof this.data.size === 'undefined') ? this.game.world.height : this.data.size[1];
            var blockerTint = (typeof this.data.blockerTint === 'undefined') ? 0x000000 : this.data.blockerTint;

            this.graphics = this.game.add.graphics(0, 0);
            this.graphics.beginFill(blockerTint);
            this.graphics.drawRect(blockerX, blockerY, blockerWidth, blockerHeight);
            this.graphics.endFill();
            this.graphics.inputEnabled = true;

            if (this.data.fadePeriod) {
                this.graphics.alpha = 0;
                this.fadeTween = this.game.add.tween(this.graphics).to({alpha: 1}, this.data.fadePeriod, 'Linear', false);
                this.fadeTween.onComplete.add(this.onComplete, this);
                this.fadeTween.start();
            }
        },
        onComplete: function () {
            var varSet = {};
            varSet[this.data.variable] = this.data.name;
            this.events.onGameChoice.dispatch(this.data.name, varSet);
        },
        destroy: function () {
            if (this.graphics) {
                this.graphics.inputEnabled = false;
                this.graphics.destroy(true);
            }
            if( this.fadeTween ) {
                this.fadeTween.stop();
                this.fadeTween = null;
            }
            this.freeBaseActor();
        }
    });

    module.exports = FadeoutActor;
}());

},{"./actor":"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene\\actors\\actor.js","loglevel":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\loglevel\\lib\\loglevel.js"}],"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene\\actors\\actor-input-field.js":[function(require,module,exports){
/**
 * @author Paul Knell
 * @version 1.0.0
 * @creation 11/02/2018
 * Copyright Children's Hospital
 * This software is the property of Children's Hospital.
 *
 * This actor uses the phaser-input.js extension to add a text input field to the scene.
 *
 * {
 *     "name": "textInput1", // unique name for this actor.
 *     "type": "input-field", // required type.
 *     "location": [ x, y ],
 *     "options": {padding: 8, borderWidth: 1, borderColor: '#000'} // optional options to be passed to the InputField, refer to phaser-input.js docs for full details: https://github.com/orange-games/phaser-input
 *  }
 *
 */
(function () {

    var _ = require('lodash'),
        log = require('loglevel'),
        Actor = require('./actor');

    var InputFieldActor = Actor.extend({
        // constructor in parent
        getRequiredFields: function() {
            return [ "location" ]
        },
        enterScene: function() {
            this.location = this.data.location;
            this.options = this.data.options;

            this.buildActor();
        },
        buildActor: function () {
            this.inputField = this.game.add.inputField(
                this.location[0], this.location[1], this.options);
        },
        onGameSpeech: function( choice ) {

        },
        destroy: function () {
            this.location = null;
            this.options = null;
            this.inputField.destroy();
            this.freeBaseActor();
        }
    });

    module.exports = InputFieldActor;
}());

},{"./actor":"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene\\actors\\actor.js","lodash":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\lodash\\index.js","loglevel":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\loglevel\\lib\\loglevel.js"}],"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene\\actors\\actor-instruction-bubble.js":[function(require,module,exports){
/**
 * @author George Frick
 * @version 1.0.0
 * @creation 07/01/2015
 * Copyright 2015 Children's Hospital
 * This software is the property of Children's Hospital.
 *
 * An instruction bubble. This is a specialized actor for showing large font text with no speech in a fixed size
 * bubble. Normally used for the end of an activity.
 *
 *  Creating an instruction bubble actor:
 *
 * {
 *     "name": "endofactivity", // a unique identifier
 *     "type": "instruction", // the required type.
 *     "text": "Please move on to next activity", // text to show.
 *     "startDelay": 1000 // optional, delay in ticks before adding the actor (think of a tick as a millisecond, defined in main.js)
 * }
 */
(function () {
    'use strict';
    var _ = require('lodash'),
        log = require('loglevel'),
        Actor = require('./actor');

    var marginX = 8,
        marginY = 12;

    var InstructionBubbleActor = Actor.extend({
        getRequiredFields: function() {
            return [ "text", "location" ];
        },
        enterScene: function () {
            this.text = this.data.text;
            this.addWindow(this.data.location[0], this.data.location[1]);
        },
        addWindow: function (x, y) {
            if( !this.theme.textWindows || !this.theme.textWindows.instruction ) {
                throw "Instruction actor requires textWindows theme entry, and instruction area inside it.";
            }

            this.window = this.game.add.sprite(x, y, this.theme.textureKey, this.theme.textWindows.instruction);
            this.fStyle = this.getFont('moveOn');
            this.fStyle.wordWrap = true;
            this.fStyle.wordWrapWidth = this.window.width * 0.9;
            this.currentText = new Phaser.Text(this.game, this.window.width / 2, this.window.height/2, this.text, this.fStyle);
            this.currentText.anchor.setTo(0.5,0.5);
            this.window.addChild(this.currentText);
        },
        destroy: function () {
            if ( this.window ) {
                this.window.destroy(true);
            }
            this.fStyle = null;
            this.freeBaseActor();
        }
    });

    module.exports = InstructionBubbleActor;
}());

},{"./actor":"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene\\actors\\actor.js","lodash":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\lodash\\index.js","loglevel":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\loglevel\\lib\\loglevel.js"}],"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene\\actors\\actor-line.js":[function(require,module,exports){
/**
 * @author George Frick
 * @version 1.0.0
 * @creation 07/17/2017
 * Copyright 2015 Children's Hospital
 * This software is the property of Children's Hospital.
 *
 * This is the line actor, which will:
 *   - Draw a line on the screen
 *
 * {
 *     "name": "snitchingOrTelling_feedback_01", // unique name for this actor.
 *     "type": "line", // required type.
 *     "start": [ x, y ], // or "center" for either field.
 *     "end": [ x, y ], // or "center" for either field.
 *     "color": "rgba(0,0,0,1)", // optional, default is black
 *     "width": "5", // optional, default is 1
 *     "alpha": "0.5", // optional, default is 1.0
 *     "startDelay": 1000 // optional, delay in ticks before adding the actor (think of a tick as a millisecond, defined in main.js)
 *  }
 *
 */
(function () {

    var _ = require('lodash'),
        log = require('loglevel'),
        Actor = require('./actor');

    var LineActor = Actor.extend({
        // constructor in parent
        getRequiredFields: function() {
            return [ "start", "end"]
        },
        enterScene: function() {
            this.startLoc = this.data.start;
            this.endLoc = this.data.end;

            this.buildActor();
        },
        buildActor: function () {
            this.graphics = this.game.add.graphics( 0,0);
            var color = 0xFF3300;
            var width = 20;
            var alpha = 1;

            if( this.data.color ) {
                color = this.data.color;
            }

            if( this.data.width ) {
                width = parseInt(this.data.width, 10);
            }

            if( this.data.alpha ) {
                alpha = parseFloat(this.data.alpha);
            }

            this.graphics.lineStyle(width, color, alpha);
            this.graphics.moveTo(this.startLoc[0], this.startLoc[1]);
            this.graphics.lineTo(this.endLoc[0], this.endLoc[1]);

        },
        onGameSpeech: function( choice ) {

        },
        destroy: function () {
            this.startLoc = null;
            this.endLoc = null;
            this.graphics.destroy();
            this.freeBaseActor();
        }
    });

    module.exports = LineActor;
}());

},{"./actor":"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene\\actors\\actor.js","lodash":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\lodash\\index.js","loglevel":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\loglevel\\lib\\loglevel.js"}],"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene\\actors\\actor-no-input-character.js":[function(require,module,exports){
/**
 * @author Zack Biernat
 * @version 1.0.0
 * @creation 04/23/2015
 * Copyright 2015 Children's Hospital
 * This software is the property of Children's Hospital.
 *
 * The no-input-character actor. This actor cannot be interacted with. It speaks when it's audio bit is played, but is otherwise a decoration.
 * Creating a no-input-character actor:
 *
 * {
 *     "name": "mandy", // a unique identifier
 *     "type": "character", // the required type.
 *     "image": "mandy", // the image to use from the theme.
 *     "speechAnimation": true|false, // if there is a speech animation.
 *     "frameRate": 24 // optional frame rate for the speech animation, defaults to 10.
 *     "location": [ 200, 200 ], // where on the screen to play this actor
 *     "size": [ w, h ], // provide this if you do not provide an image.
 *     "audio": "6th_01", // optional audio to speak on mouse over.
 *     "key": "mandy", // optional audio key, if not present, name will be used.
 *     "startDelay": 1000 // optional, delay in ticks before adding the actor (think of a tick as a millisecond, defined in main.js)
 * }
 *
 *  If you set speechAnimation to true, -talk will be appended to the characters image name.
 * speechAnimation/speechLocation are optional.
 *
 * See also theme.json's speechAnimations, which specify speaking-animation images and location offsets:
 *
 *   "speechAnimations": {
 *    "janelle": {
 *      "images": ["talking-janelle-mouth1.png", "talking-janelle-mouth1.png", "talking-janelle-mouth2.png"],
 *      "mouthOffset": [65, 165]   // where within the actor "-talk" image to place the animation
 *    }
 * 
 * There must additionally be "Sound Sync Data", defining which image to show...
 *
 * "soundSyncData": {
 *   "6th_01": [
 *     0,1,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,0,0,0,0,1,1
 *   ], ...
 * }
 *
 *  The 0s and 1s represent which image, and could be 0,1,2,3 etc if there are more than 2. The key should match
 *  the "speechAudio" of this actor as well as the audio being played. 
 *  NOTE: Most of the speechSyncData does not contain '1's and looks like [0,0,2,3,3,3,2,0,2,3,2,0,0,0,2,3,4,4,3,4,2,0].
 *  In this case it is advised to use the [A, B, B, C, D] pattern for the different frames in your theme.
 */
(function () {

    var _ = require('lodash'),
        log = require('loglevel'),
        Actor = require('./actor');

     var NoInputCharacterActor = Actor.extend( {
        // constructor is now in base class!
        enterScene: function() {
            this.buildActor();
            if( this.data.speechAnimation ) {
                this.addSpeechAnimation();
            }
        },
        getRequiredFields: function() {
            return [ "location" ];
        },
        buildActor: function() {
            var imageId = this.data.image;
            if( imageId ) {
                this.sprite = this.game.add.sprite(this.data.location[0], this.data.location[1], this.theme.textureKey,
                    this.getImage(imageId, 'actorImages'));
                
                if( this.data.scale ) {
                    this.sprite.scale.setTo( this.data.scale[0], this.data.scale[1]);
                }
            } else {
                this.sprite = this.game.add.sprite(this.data.location[0], this.data.location[1]);
                this.sprite.width = this.data.size[0];
                this.sprite.height = this.data.size[1];
                this.addDebugBox();
            }
        },
        addDebugBox: function() {
            if( window.isDebugging ) {
                this.debugBox = new Phaser.Graphics(this.game, this.data.location[0], this.data.location[1]);
                this.debugBox.beginFill(0x000000, 1.0);
                this.debugBox.drawRect(0, 0, this.data.size[0], this.data.size[1]);
                this.debugBox.endFill();
                this.game.add.existing(this.debugBox);
            }
        },
        addSpeechAnimation: function() {
            var aSpeechAnimation = this.theme.speechAnimations[this.modelInterface.getValue(this.data.image)];
            if( !aSpeechAnimation ) {
                log.error("Could not add speech animation for character: " + this.data.name);
                log.error("Speech animation not found for " + this.data.image );
                log.error("Check that you have a speechAnimations section in your theme.");
                return;
            }
            this.speechAnimation = this.game.add.sprite(
                this.data.location[0] + aSpeechAnimation.mouthOffset[0],
                this.data.location[1] + aSpeechAnimation.mouthOffset[1],
                this.theme.textureKey,
                aSpeechAnimation.images[0]);
            this.speechAnimation.animations.add('talk', aSpeechAnimation.images);
            this.speechAnimationSet = aSpeechAnimation.images;
            this.speechAnimationDefault = aSpeechAnimation.images[0];
            if (this.data.flipMouth && this.data.scale) {
                this.speechAnimation.scale.setTo( this.data.scale[0] * -1, this.data.scale[1]);
                this.speechAnimation.x = this.data.location[0] + (aSpeechAnimation.mouthOffset[0] * this.data.scale[0]);
                this.speechAnimation.y = this.data.location[1] + (aSpeechAnimation.mouthOffset[1] * this.data.scale[1]);
            } else if( this.data.scale ) {
                this.speechAnimation.scale.setTo( this.data.scale[0], this.data.scale[1]);
                this.speechAnimation.x = this.data.location[0] + (aSpeechAnimation.mouthOffset[0] * this.data.scale[0]);
                this.speechAnimation.y = this.data.location[1] + (aSpeechAnimation.mouthOffset[1] * this.data.scale[1]);
            }
        },
        onGameSpeech: function (speech) {
            var audio = this.modelInterface.getValue(speech.audio);
            if( speech.key ) {
                audio = this.modelInterface.getValue(speech.key) + "_" + audio;
            }
            log.warn("On game speech: " + audio);
            if( this.speechAnimation && this.theme.soundSyncData && this.theme.soundSyncData[audio] && this.data.speechAudio === audio ) {
                this.soundSyncData = this.theme.soundSyncData[audio];
                if( ! this.timer ) {
                    var FRAME_RATE = this.data.frameRate ? this.data.frameRate : 10;
                    this.timer = this.game.time.create(false);
                    this.speechIndex = 0;
                    this.timer.loop(1000 / FRAME_RATE, this.incrementSpeech, this);
                    this.timer.start();
                }
            }
        },
        incrementSpeech: function() {
            if( this.soundSyncData ) {
                this.speechIndex++;
                this.speechAnimation.frameName = this.speechAnimationSet[this.soundSyncData[this.speechIndex]];
            }
        },
        onGameSpeechStop: function (speech) {
            if( this.speechAnimation && this.soundSyncData) {
                this.timer.stop();
                this.timer.destroy();
                this.timer = null;
                this.soundSyncData = null;
                this.speechAnimation.frameName = this.speechAnimationDefault;
            }
        },
        destroy: function() {
            if ( this.sprite ) {
                this.sprite.inputEnabled = false;
                this.sprite.destroy();
            }
            if( this.data.text ) {
                this.graphics.destroy(true);
            }
            if( this.speechAnimation ) {
                this.speechAnimation.destroy();
            }
            if( this.debugBox ) {
                this.debugBox.destroy();
            }
            if( this.timer ) {
                this.timer.destroy();
            }
            this.freeBaseActor();
        }
    });

    module.exports = NoInputCharacterActor;
}());

},{"./actor":"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene\\actors\\actor.js","lodash":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\lodash\\index.js","loglevel":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\loglevel\\lib\\loglevel.js"}],"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene\\actors\\actor-question.js":[function(require,module,exports){
/**
 * @author Syd Grosclaude
 * @version 1.0.0
 * @creation 08/05/2015
 * Copyright 2015 Children's Hospital
 * This software is the property of Children's Hospital.
 *
 * This is the question actor, which will:
 *   - show the player a (single selection/radio) multiple choice question
 *   - play any audio/text associated with asking question
 *
 * {
 *     "name": "questions_snitchingOrTelling_01",      // unique name for this actor.
 *     "type": "question", // required type.
 *     "font": "questionText",
 *     "submitButtonImage": "submit",                  // button image from theme.buttons
 *     "submitButtonID": "snitOrTellSubmitButton",     // to identify the text event coming from it
 *     "submitButtonLocation": [ 546, 255 ],
 *     "location": [ 90, 35 ],
 *     "startQuestion": "snitOrTell_question_01",      // which choice to start with from the choiceMap set.
 *     "choiceMap": {
 *       "snitOrTell_question_01": { // this is the name of this question, used when linking questions
 *          "text": (optional) "Shandra stumbled upon some pretty nasty comments online about Brianna. They were calling her a slut, among other things. Shandra decides to mention it to her mom.[br][br]Is this snitching or telling?" // question
 *          "audio": (optional) "snitchingOrTelling_question_01", // audio key.
 *          "key": (optional) "mandy", // a prefix for the audio key. (becomes "mandy_snitchingOrTelling_question_01" in this example)
 *          "choices": [
 *            {
 *               "text": "Snitching",                  // displayed text of this choice.
 *               "variable": "snitOrTell_question_01", // variable to set when chosen
 *               "value": "incorrect"                  // value to set variable to when chosen
 *            },
 *            {
 *               "text": "Telling",                    // displayed text of this choice.
 *               "variable": "snitOrTell_question_01", // variable to set when chosen
 *               "value": "correct"                    // value to set variable to when chosen
 *            }
 *            ... // as many choices as you want.
 *         ]
 *       },
 *     },
 *     "startDelay": 1000 // optional, delay in ticks before adding the actor (think of a tick as a millisecond, defined in main.js)
 *  }
 *
 *  For a decision point, you can stll do a variable/value and link.
 */
(function () {

    var _ = require('lodash'),
        log = require('loglevel'),
        Actor = require('./actor');

    var QuestionActor = Actor.extend({
        constructor: function (game, data, theme) {
            if (!game) {
                throw "Decoration actor requires game constructor argument.";
            }
            if (!data) {
                throw "Decoration actor requires data constructor argument.";
            }

            this.game = game;
            this.theme = theme;
            this.data = data;
            this.events = {
                onGameChoice: new Phaser.Signal(),
                onGameSpeech: new Phaser.Signal()
            };
            this.choiceMap = this.data.choiceMap;
            this.currentQuestionName = this.data.startQuestion;
            this.currentQuestion = this.choiceMap[this.currentQuestionName];
            this.marginY = 6;

            var fontName = this.data.font;
            this.style = this.getFont((typeof fontName !== 'undefined') ? fontName : "questionText");

            this.location = this.data.location;

            this.radioGroup = this.game.add.group();
            this.radioTextGroup = this.game.add.group();

            // Track where we are at moving down the screen.
            this.currentX = (this.location !== 'undefined') ?
                this.location[0] : this.theme.snitchingOrTellingleftMargin * 3;
            this.currentY = (this.location !== 'undefined') ? this.location[1] : 35;
        },
        enterScene: function() {
            // Determine the number of questions and build the correct choice list.
            this.determineChoiceList();
            this.buildActor();
            this.populateChoices();
        },
        determineChoiceList: function() {
        },
        buildActor: function () {
            if (typeof this.currentQuestion.text !== 'undefined') {
                this.questionText = this.game.add.text(this.currentX, this.currentY,
                    this.currentQuestion.text, this.style);
                this.currentY += (this.questionText.height + this.marginY);
            }

            if( !this.data.submitButtonImage || !this.data.submitButtonID || !this.data.submitButtonLocation) {
                throw "Question Actor requires submit button configuration in scene data";
            }
            if( !this.theme.buttons || !this.theme.buttons[this.data.submitButtonImage]) {
                throw "Question Actor requires a submit button entry in theme";
            }

            this.submitButton = this.game.add.button( this.data.submitButtonLocation[0], this.data.submitButtonLocation[1],
                this.theme.textureKey, this.onSubmitButtonPointerUp, this,
                this.theme.buttons[this.data.submitButtonImage].over, this.theme.buttons[this.data.submitButtonImage].out,
                this.theme.buttons[this.data.submitButtonImage].down, this.theme.buttons[this.data.submitButtonImage].up);
            this.submitButton.inputEnabled = false;
        },
        populateChoices: function () {
            var question = (this.currentQuestion);

            // Build a list of options.
            var startY = this.currentY,
                currRadioButton,
                currText,
                optionIndex = 0;

            var choices = question.choices;
            _.each(choices, function (choice) {
                currRadioButton = this.radioGroup.create(0, 0,
                    this.theme.textureKey, this.theme.buttons.radioButtonGroup.unselected);
                currRadioButton.inputEnabled = true;
                currRadioButton.events.onInputDown.add(this.onChooseOption, this);
                currRadioButton.group = this.radioGroup;
                currRadioButton.x = this.theme.snitchingOrTellingleftMargin * 3;
                currRadioButton.y = this.currentY + 2;
                currRadioButton.frameName = this.theme.buttons.radioButtonGroup.unselected;
                currRadioButton.variable = choice.variable;
                currRadioButton.value = choice.value;
                currRadioButton.scale.set(0.75 , 0.75 );

                currText = new Phaser.Text(this.game, this.theme.snitchingOrTellingleftMargin * 4, 0,
                    choice.text, this.style);
                this.radioTextGroup.add(currText);
                currText.y = this.currentY;
                currText.inputEnabled = true;
                currText.events.onInputDown.add(this.onChooseOption, this);
                currText.group = this.radioTextGroup;
                currText.variable = choice.variable;
                currText.value = choice.value;
                currText.radioButton = currRadioButton; // link the text and radio button together.
                currRadioButton.optionText = currText;
                this.currentY += currRadioButton.optionText.height;
                optionIndex++;
            }, this);

            if( question.text || question.audio ) {
                var eventData = {"text": question.text, "audio": question.audio, "key": question.key};
                this.playAudio( eventData);
            }
        },
        onChooseOption: function (selectedInput) {
            // Adjust the other radio buttons.
            if( selectedInput.radioButton ) {
                selectedInput.radioButton.group.setAll('frameName', this.theme.buttons.radioButtonGroup.unselected);
                selectedInput.radioButton.frameName = this.theme.buttons.radioButtonGroup.selected;
            } else {
                selectedInput.group.setAll('frameName', this.theme.buttons.radioButtonGroup.unselected);
                selectedInput.frameName = this.theme.buttons.radioButtonGroup.selected;
            }
            // Save the whether the selected answer is correct.
            var varSet = {};
            varSet[selectedInput.variable] = selectedInput.value;

            this.events.onGameChoice.dispatch( this.data.name, varSet );

            this.lastResponseValue = selectedInput.value;
            this.submitButton.inputEnabled = true;
        },
        onSubmitButtonPointerUp: function( event ) {
            var eventData = {"text": this.lastResponseValue };
            this.playAudio(  eventData);
        },
        destroy: function () {
            if (this.radioGroup) {
                this.radioGroup.forEachExists(function (radio) {
                    if (radio.optionText) {
                        radio.optionText = null;
                    }
                    radio.destroy();
                },this);
                this.radioGroup.destroy();
            }
            if( this.radioTextGroup ) {
                this.radioTextGroup.forEachExists(function (radioText) {
                    if (radioText.radioButton) {
                        radioText.radioButton = null;
                    }
                    radioText.destroy();
                },this);
                this.radioTextGroup.destroy();
            }
            if ( this.submitButton ) {
                this.submitButton.destroy();
            }
            if ( this.questionText ) {
                this.questionText.destroy();
            }
            this.events.onGameChoice.dispose();
            this.events.onGameSpeech.dispose();
            this.events.length = 0;
        }
    });

    module.exports = QuestionActor;
}());

},{"./actor":"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene\\actors\\actor.js","lodash":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\lodash\\index.js","loglevel":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\loglevel\\lib\\loglevel.js"}],"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene\\actors\\actor-rectangle.js":[function(require,module,exports){
/**
 * @author George Frick
 * @version 1.0.0
 * @creation 09/19/2017
 * Copyright Children's Hospital
 * This software is the property of Children's Hospital.
 *
 * This is the rectangle actor, which will:
 *   - Draw a rectangle on the screen, with optional border.
 *
 * {
 *     "name": "snitchingOrTelling_feedback_01", // unique name for this actor.
 *     "type": "rectangle", // required type.
 *     "start": [ x, y ],
 *     "color": "rgba(0,0,0,1)", // optional, default is black
 *     "width": "5", // optional, default is 1
 *     "height": "5", // optional, default is 1
 *     "alpha": "0.5", // optional, default is 1.0
 *     "border" : "1", // optional, thickness of border (none of not provided)
 *     "borderColor": "rbga(0,0,0,1)", // optional, default is black
 *     "roundness": "28", // default 28
 *     "startDelay": 1000 // optional, delay in ticks before adding the actor (think of a tick as a millisecond, defined in main.js)
 *  }
 *
 */
(function () {

    var _ = require('lodash'),
        log = require('loglevel'),
        Actor = require('./actor');

    var RectangleActor = Actor.extend({
        // constructor in parent
        getRequiredFields: function() {
            return [ "start"]
        },
        enterScene: function() {
            this.startLoc = this.data.start;
            this.endLoc = this.data.end;

            this.buildActor();
        },
        buildActor: function () {
            this.graphics = this.game.add.graphics( 0,0);
            var color = 0xFF3300, borderColor = 0xFF3300;
            var alpha = 1;
            var roundness = 28;
            var width = 440, height = 200;
            var x = this.startLoc[0], y = this.startLoc[1];
            var border = 0;

            this.rectangle = this.game.add.group();

            if( this.data.color ) {
                color = this.data.color;
            }

            if( this.data.borderColor ) {
                borderColor = this.data.borderColor;
            }

            if( this.data.width ) {
                width = parseInt(this.data.width, 10);
            }

            if( this.data.height ) {
                height = parseInt(this.data.height, 10);
            }

            if( this.data.roundness ) {
                roundness = parseInt(this.data.roundness, 10);
            }

            if( this.data.alpha ) {
                alpha = parseFloat(this.data.alpha);
            }

            if( this.data.border ) {
                border = parseInt(this.data.border, 10);
            }

            this.graphics.beginFill(color);
            this.graphics.drawRoundedRect(x, y, width, height, roundness); // draw a rounded rect mask
            this.graphics.endFill();
            if( border && border > 0 ) {
                this.graphics.lineStyle( border, borderColor, 1);
                this.graphics.drawRoundedRect(x, y, width, height, roundness);
            }
            this.graphics.alpha = alpha;

        },
        onGameSpeech: function( choice ) {

        },
        destroy: function () {
            this.startLoc = null;
            this.endLoc = null;
            if(this.graphics){
                this.graphics.destroy();
            }
            this.freeBaseActor();
        }
    });

    module.exports = RectangleActor;
}());

},{"./actor":"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene\\actors\\actor.js","lodash":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\lodash\\index.js","loglevel":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\loglevel\\lib\\loglevel.js"}],"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene\\actors\\actor-speech-bubble.js":[function(require,module,exports){
/**
 * @author George Frick
 * @version 1.0.0
 * @creation 07/01/2015
 * Copyright 2015 Children's Hospital
 * This software is the property of Children's Hospital.
 *
 * A speech bubble. It displays text and requests that audio be played. A speech bubble can have its own text/audio
 * and can also listen for text/audio events to show.
 * The speech bubble will adjust its size to fit the provided/set text.
 *
 *{
 *    "name": "choiceBubble", // name.
 *    "type": "speech-bubble",
 *    "text": "", // text to show.
 *    "audio": "", // audio key to play.
 *    "hidden": true, // set to true to optionally hide the bubble initially, used when character isn't the first to talk.
 *    "startDelay": 1000 // optional, delay in ticks before adding the actor (think of a tick as a millisecond, defined in main.js)
 *},
 */
(function () {
    'use strict';
    var _ = require('lodash'),
        log = require('loglevel'),
        Actor = require('./actor');

    var marginX = 12, marginY = 12;

    var SpeechBubbleActor = Actor.extend({
        // constructor in parent.
        getRequiredFields: function() {
            return []; // No required fields.
        },
        enterScene: function () {
            this.text = this.data.text || " ";
            this.audio = this.data.audio || "";
            this.key = this.data.key;

            this.addWindow(200, 50);
            this.setSpeech();
            // ACT-352 Hide empty speech bubbles.
            if( this.data.hidden || !this.text || this.text === " " ) {
                this.windowGroup.visible = false;
            }
        },
        addWindow: function (x, y) {
            if( !this.theme.textWindows || !this.theme.textWindows.small ) {
                throw "Instruction actor requires textWindows theme entry, and small definition inside it.";
            }

            var windowGroup = this.game.add.group();
            windowGroup.x = x;
            windowGroup.y = y;

            var topWindow = windowGroup.create(0, 0, this.theme.textureKey, this.theme.textWindows.small.top);

            this.fStyle = this.getFont('bubbleText');
            this.rStyle = this.getFont('replayAudio');

            this.fStyle.wordWrap = true;
            this.fStyle.wordWrapWidth = topWindow.width * 0.85;

            this.currentText = new Phaser.Text(this.game, marginX, marginY, " ", this.fStyle);
            windowGroup.add(this.currentText);

            var bottomWindow = windowGroup.create(0, 0 , this.theme.textureKey, this.theme.textWindows.small.bottom);

            // subtract 30 because the top speech bubble is 40 px tall.
            var middleWindow = new Phaser.TileSprite(this.game, 0, topWindow.height,
                338, this.currentText.height - 30, this.theme.textureKey, this.theme.textWindows.small.middle);
            windowGroup.add(middleWindow);

            bottomWindow.y = topWindow.height + middleWindow.height;

            // 5. Add eventing.
            this.windows = {
                top: topWindow,
                middle: middleWindow,
                bottom: bottomWindow
            };

            _.each(this.windows, function (bubble) {
                bubble.inputEnabled = true;
                bubble.events.onInputOver.add(this.onMouseIn, this);
                bubble.events.onInputOut.add(this.onMouseOut, this);
                bubble.events.onInputUp.add(this.onPointerUp, this);
            }, this);


            this.replayText = new Phaser.Text(this.game, (bottomWindow.x + bottomWindow.width - 40) / 2,
                (topWindow.height + bottomWindow.height + middleWindow.height) / 2, "Replay Audio", this.rStyle);
            this.replayText.anchor.setTo(0.5,0.5);
            windowGroup.add(this.replayText);
            this.replayText.visible = false;

            this.currentText.bringToTop();
            this.replayText.bringToTop();
            this.windowGroup = windowGroup;
            windowGroup.x -= topWindow.width / 2;
        },
        resize: function() {
            // subtract 30 because the top speech bubble is 40 px tall.
            this.windows.middle.height = this.currentText.height - 30;
            this.windows.bottom.y = this.windows.top.height + this.windows.middle.height;
        },
        onMouseIn: function () {
            this.fStyle.fill = this.theme.tints.bubbleText;
            this.currentText.setStyle(this.fStyle);
            this.replayText.visible = true;
        },
        onMouseOut: function () {
            this.fStyle.fill = this.getFont('bubbleText').fill;
            this.currentText.setStyle(this.fStyle);
            this.replayText.visible = false;
        },
        onPointerUp: function () {
            this.playAudio(  {text: this.text, audio: this.audio, key: this.key});
        },
        setSpeech: function () {
            var text = this.substituteText(this.getText(this.text, this.key));
            this.currentText.setText( text );
            this.playAudio( {text: text, audio: this.audio, key: this.key});
            this.resize();
        },
        onGameSpeech: function (speech) {
            //log.warn("speech bubble received");
            //log.warn(speech);
            this.text = speech.text;
            this.key = speech.key;
            this.audio = speech.audio;
            this.currentText.setText( this.substituteText(this.getText(this.text, this.key)) );
            this.resize();
            // ACT-352 Hide empty speech bubbles, here, show it if there is text.
            if(  this.text && this.text !== " " ) {
                this.windowGroup.visible = true;
            }
        },
        destroy: function () {
            this.rStyle = null;
            this.fStyle = null;
            if ( this.windows ) {
                _.each(this.windows, function (bubble) {
                    bubble.inputEnabled = false;
                }, this);
            }
            this.windows = null;
            this.currentText = null;
            if ( this.windowGroup ) {
                this.windowGroup.destroy(true);
            }
            this.freeBaseActor();
        }
    });

    module.exports = SpeechBubbleActor;
}());

},{"./actor":"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene\\actors\\actor.js","lodash":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\lodash\\index.js","loglevel":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\loglevel\\lib\\loglevel.js"}],"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene\\actors\\actor-text-bubble.js":[function(require,module,exports){
/**
 * @author Jeff Blume
 * @version 1.0.0
 * @creation 07/24/2017
 * Copyright 2015 Children's Hospital
 * This software is the property of Children's Hospital.
 *
 * A speech bubble that only displays text and a bubble behind it. Allows for movable carrot. Auto adjusts to text size.
 * NOTE: NEEDS DEFAULT PARAMETER VALUES AND/OR REQUIREMENT CHECKING AND ERROR HANDLING
 *
 *{
 *    "name": "choiceBubble", // name.
 *    "type": "text-bubble",
 *    "carrotSide": "bottom", // "top", "bottom", "left" or "right" - side of bubble the carrot is to be positioned
 *    "location": [0,0],
 *    "carrotPosition": 0.5, // location, as percentage of length or width of carrotSide
 *    "centerFill": "0xffffff",
 *    "text": "", // text to show.
 *    "bubbleWidth": 200,
 *    "textPadding": 20, // Padding between bubble and text
 *    "hidden": true, // set to true to optionally hide the bubble initially, used when character isn't the first to talk.
 *    "startDelay": 1000 // optional, delay in ticks before adding the actor (think of a tick as a millisecond, defined in main.js)
 *},
 */
(function () {
    'use strict';
    var _ = require('lodash'),
        log = require('loglevel'),
        Actor = require('./actor');

    var marginX = 12, marginY = 12;

    var TextBubbleActor = Actor.extend({
        // constructor in parent.
        getRequiredFields: function() {
            return []; // No required fields.
        },
        enterScene: function () {
            this.carrotSide = this.data.carrotSide;
            this.location = this.data.location;
            this.carrotPosition = this.data.carrotPosition;
            this.centerFill = this.data.centerFill;
            this.text = this.data.text;
            this.bubbleWidth = this.data.bubbleWidth
            this.textPadding = this.data.textPadding;
            this.hidden = this.data.hidden;
            this.startDelay = this.data.startDelay;


            this.addWindow(this.location[0], this.location[1]);
            //this.setSpeech();
            // ACT-352 Hide empty speech bubbles.
            if( this.data.hidden ) {
                this.windowGroup.visible = false;
            }
        },
        addWindow: function (x, y) {
            if( !this.theme.textBubbleImages ) {
                throw "Instruction actor requires textBubbleImages theme entry.";
            }

            var windowGroup = this.game.add.group();
            windowGroup.x = x;
            windowGroup.y = y;

            var bubbleTopLeft = windowGroup.create(0, 0, this.theme.textureKey, this.theme.textBubbleImages.topLeft);
            var bubbleTop = windowGroup.create(bubbleTopLeft.width, 0, this.theme.textureKey, this.theme.textBubbleImages.top);
            var bubbleTopRight = windowGroup.create(bubbleTopLeft.width + bubbleTop.width, 0, this.theme.textureKey, this.theme.textBubbleImages.topRight);
            var bubbleRight = windowGroup.create(bubbleTopRight.x, bubbleTopRight.height, this.theme.textureKey, this.theme.textBubbleImages.right);
            var bubbleBottomRight = windowGroup.create(bubbleTopRight.x, bubbleTopRight.height + bubbleRight.height, this.theme.textureKey, this.theme.textBubbleImages.bottomRight);
            var bubbleBottom = windowGroup.create(bubbleTop.x, bubbleBottomRight.y, this.theme.textureKey, this.theme.textBubbleImages.bottom);
            var bubbleBottomLeft = windowGroup.create(0, bubbleBottomRight.y, this.theme.textureKey, this.theme.textBubbleImages.bottomLeft);
            var bubbleLeft = windowGroup.create(0, bubbleTopLeft.height, this.theme.textureKey, this.theme.textBubbleImages.left);
            var bubbleCenter = this.game.add.graphics(bubbleTopLeft.width, bubbleTopLeft.height, windowGroup);

            this.fStyle = this.getFont('textBubbleText');
            this.fStyle.wordWrap = true;
            this.fStyle.wordWrapWidth = this.bubbleWidth - (this.textPadding * 2);

            this.currentText = new Phaser.Text(this.game, this.textPadding, this.textPadding, this.text, this.fStyle);
            windowGroup.add(this.currentText);

            var bubbleTopWidth = this.bubbleWidth - bubbleTopLeft.width - bubbleTopRight.width;
            var tops = Math.ceil(bubbleTopWidth / bubbleTop.width);
            var topRemainder = bubbleTopWidth % bubbleTop.width;
            for (var i = 1; i < tops; i++) {
                var thisTop = windowGroup.create(bubbleTopLeft.width + (i * bubbleTop.width), 0, this.theme.textureKey, this.theme.textBubbleImages.top);
            }
            if(topRemainder !== 0){
                thisTop.x -= bubbleTop.width - topRemainder;
            }

            bubbleTopRight.x = this.bubbleWidth - bubbleTopRight.width;
            bubbleRight.x = bubbleBottomRight.x = bubbleTopRight.x;
            var bubbleRightHeight = this.currentText.height + (2 * this.textPadding) - bubbleTop.height - bubbleBottom.height;
            var rights = Math.ceil(bubbleRightHeight / bubbleRight.height);
            var rightRemainder = bubbleRightHeight % bubbleRight.height;
            for (i = 1; i < rights; i++) {
                var thisRight = windowGroup.create(bubbleTopRight.x, bubbleTopRight.height + (bubbleRight.height * i), this.theme.textureKey, this.theme.textBubbleImages.right);
            }
            if(rightRemainder !== 0){
                thisRight.y -= bubbleRight.height - rightRemainder;
            }


            bubbleBottomRight.y = bubbleTopRight.height + bubbleRightHeight;
            bubbleBottom.y = bubbleBottomRight.y;
            for (i = 1; i < tops; i++) {
                var thisBottom = windowGroup.create(bubbleTopLeft.width + (i * bubbleTop.width), bubbleBottom.y, this.theme.textureKey, this.theme.textBubbleImages.bottom);
            }
            if(topRemainder !== 0){
                thisBottom.x -= bubbleTop.width - topRemainder;
            }


            bubbleBottomLeft.y = bubbleBottomRight.y;
            for (i = 1; i < rights; i++) {
                var thisLeft = windowGroup.create(0, bubbleTopRight.height + (bubbleRight.height * i), this.theme.textureKey, this.theme.textBubbleImages.left);
            }
            if(rightRemainder !== 0){
                thisLeft.y -= bubbleRight.height - rightRemainder;
            }

            var carrot = null;
            switch(this.carrotSide){
                case "top":
                    carrot = windowGroup.create(this.bubbleWidth * this.carrotPosition, this.theme.textBubbleImages.carrotOverlap, this.theme.textureKey, this.theme.textBubbleImages.carrot);
                    carrot.scale.y = -1;
                    carrot.anchor.x = 0.5;
                    break;
                case "right":
                    carrot = windowGroup.create(this.bubbleWidth - this.theme.textBubbleImages.carrotOverlap, (bubbleRightHeight + bubbleTopRight.height + bubbleBottomRight.height) * this.carrotPosition, this.theme.textureKey, this.theme.textBubbleImages.carrot);
                    carrot.anchor.x = 0.5;
                    carrot.rotation = -90 * (Math.PI/180);
                    break;
                case "bottom":
                    carrot = windowGroup.create(this.bubbleWidth * this.carrotPosition, bubbleRightHeight + bubbleTopRight.height + bubbleBottomRight.height - this.theme.textBubbleImages.carrotOverlap, this.theme.textureKey, this.theme.textBubbleImages.carrot);
                    carrot.anchor.x = 0.5;
                    break;
                case "left":
                    carrot = windowGroup.create(this.theme.textBubbleImages.carrotOverlap, (bubbleRightHeight + bubbleTopRight.height + bubbleBottomRight.height) * this.carrotPosition, this.theme.textureKey, this.theme.textBubbleImages.carrot);
                    carrot.anchor.x = 0.5;
                    carrot.rotation = 90 * (Math.PI/180);
                    break;
            }

            bubbleCenter.beginFill(this.centerFill);
            bubbleCenter.drawRect(0, 0, bubbleTopWidth, bubbleRightHeight);
            bubbleCenter.endFill();

            windowGroup.bringToTop(this.currentText);
            this.windowGroup = windowGroup;
        },
        destroy: function () {
            this.rStyle = null;
            /*this.fStyle = null;
            if ( this.windows ) {
                _.each(this.windows, function (bubble) {
                    bubble.inputEnabled = false;
                }, this);
            }
            this.windows = null;*/
            this.currentText = null;
            if ( this.windowGroup ) {
                this.windowGroup.destroy(true);
            }
            this.freeBaseActor();
        }
    });

    module.exports = TextBubbleActor;
}());

},{"./actor":"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene\\actors\\actor.js","lodash":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\lodash\\index.js","loglevel":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\loglevel\\lib\\loglevel.js"}],"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene\\actors\\actor-text.js":[function(require,module,exports){
/**
 * @author Syd Grosclaude
 * @version 1.0.0
 * @creation 08/07/2015
 * Copyright 2015 Children's Hospital
 * This software is the property of Children's Hospital.
 *
 * This is the text actor, which will:
 *   - show the specified text
 *   - play any audio/text associated with the text
 *
 * {
 *     "name": "snitchingOrTelling_feedback_01",    // unique name for this actor.
 *     "type": "text",                              // required type.
 *     "text": "Correct. Click the Next button to find out why."
 *     "font": "questionText",
 *     "location": [ x, y ],    // or "center" for either field.
 *     "angle": -30,            // optional, degrees from north (-180 to 180)
 *     "rotation": 0.5,         // optional, radians in units of PI. This overrides angle if both are set.
 *     "anchor": (optional) "left",     // which side to anchor the text sprite. Can also set anchor to specific position [x,y]
 *     "audio": (optional) "snitchingOrTelling_feedback_01",    // audio key.
 *     "key": (optional) "mandy", // a prefix for the audio key. (becomes "mandy_snitchingOrTelling_feedback_01" in this example),
 *     "wordWrapWidth": #,  // optionally set a wrapping width
 *     "bullet": true,
 *     "bulletOffset": 3, // optional, space in pixels after bullet if you want other than default spacing
 *     "shadowX": 5, // optional, drop shadow width in pixels; default is no shadow - same as shadowY if only one is specified - 5 if only color is specified
 *     "shadowY": 5, // optional, drop shadow height in pixels; default is no shadow - same as shadowX if only one is specified - 5 if only color is specified
 *     "shadowColor": "rgba(0,0,0,1)", // optional, default is black with alpha 1.0
 *     "startDelay": 1000, // optional, delay in ticks before adding the actor (think of a tick as a millisecond, defined in main.js)
 *     "tween": {                      // optional, tween to be applied to the text
 *       "time": 300,                  // (required for tween) duration of the tween
 *       "location": [ 190, 150 ],     // (required for tween) location to tween to, required
 *       "delay": 10000,               // (optional for tween) delay in milliseconds before tweening
 *       "yoyo": true                  // (optional for tween) return to original position after tween?
 *       "align": "left"               // optional, align value that will override the style setting in the theme (added by Jeff Blume 12.17.2019)
 *     }
 *  }
 *
 *  Note that this actor recognizes optional properties in the font style:
 *
 *      "lineSpacing" (a number of pixels to add to the normal wrapped text line spacing). For example, to reduce line spacing by 15 pixels:
 *
 *          "lesson_light": { "font": "35px flashdligregular", "wordWrap": true, "wordWrapWidth": 200, "lineSpacing": -15 }
 *
 *     "alpha" (opacity, a number between 0 and 1)
 *
 *          "lesson_light": { "font": "35px flashdligregular", "alpha": 0.5 }
 *
 *     "shadowX": (include a drop shadow with this width, in pixels) This will be set to the value in shadowY if only
 *          one is specified, or set to 5 pixels if only shadowColor is specified.
 *     "shadowY": (include a drop shadow with this height, in pixels) This will be set to the value in shadowX if only
 *          one is specified, or set to 5 pixels if only shadowColor is specified.
 *     "shadowColor": (include a drop shadow with this color and alpha value) If shadowX and/or shadowY are specified
 *          but shadowColor is not specified, default is black with alpha 1.0
 *     "shadowBlur": (gaussian blur to soften shadow) optional, A number from 0 (no blur) up to approximately
 *          10 (depending on scene).
 *
 *     For example, to specify an 8-pixel wide and 3-pixel high blurred drop shadow in red:
 *
 *          "lesson_redShadow": { "font": "35px flashdligregular", "shadowX": 8, "shadowY": 3, "shadowColor": "rgba(255,0,0,1)", "shadowBlur": 5 }
 *
 */
(function () {

    var _ = require('lodash'),
        log = require('loglevel'),
        Actor = require('./actor');

    var TextActor = Actor.extend({
        // constructor in parent
        getRequiredFields: function() {
            return [ "location", "font", "text" ]
        },
        enterScene: function() {
            this.text = this.data.text;
            this.location = this.data.location;
            this.audio = this.data.audio;
            this.key = this.data.key;

            var fontName = this.data.font;
            this.style = this.getFont((typeof fontName !== 'undefined') ? fontName : "questionText");

            if( this.data.wordWrapWidth ) {
                this.style.wordWrap = true;
                this.style.wordWrapWidth = parseInt(this.data.wordWrapWidth, 10);
            }

            if(this.data.align){
                this.style.align = this.data.align;
            }

            this.buildActor();
        },
        buildActor: function () {
            
            this.text = this.substituteText(this.text); 

            var x = this.location[0],
                y = this.location[1],
                anchorX = 0,
                anchorY = 0;

            if( x === "center" ) {
                x = this.game.world.centerX;
                anchorX = 0.5;
            }

            if( y === "center" ) {
                y = this.game.world.centerY;
                anchorY = 0.5;
            }

            if (this.data.anchor === "left") {
              anchorX = 0;
            } 
            else if (this.data.anchor === "center") {
              anchorX = 0.5;
            } 
            else if (this.data.anchor === "right") {
              anchorX = 1;
            }
            else if( this.data.anchor ) {
                anchorX = this.data.anchor[0];
                anchorY = this.data.anchor[1];
            }

            this.bulletX = x;
            if( this.data.bullet ) {
                var useBulletOffset = ((typeof (this.data.bulletOffset)) !== 'undefined');
                var bulletText = useBulletOffset ? "•" : "• ";
                var bulletOffsetWidth = 0; //initialize width from bullet to text
                if(useBulletOffset){
                    bulletOffsetWidth = this.data.bulletOffset; //sets bulletOffset from theme.json
                }
                var anchorFactor = anchorX; 
                
                if(anchorX === 0.5)
                {
                    //for centered text only
                    this.textSprite = this.game.make.text(x, y, this.text, this.style);
                    this.bulletSprite = this.game.make.text(x, y,bulletText, this.style);  
                    var alignmentAdjustment = ((this.bulletSprite.width + bulletOffsetWidth + this.textSprite.width)/2); // length to center
                    this.bulletSprite.destroy();
                    this.bulletSprite = this.game.add.text(x - alignmentAdjustment, y, bulletText, this.style); 
                    var calculatedTextX = x - (this.bulletSprite.position.x - (this.bulletSprite.width /2)); // get x position of text
                    this.textSprite.destroy();
                    this.textSprite = this.bulletSprite.addChild(this.game.make.text(calculatedTextX , y - this.bulletY, this.text, this.style));
                }
                else
                {
                    //for left OR right aligned text
                    this.bulletSprite = this.game.add.text(x  + bulletOffsetWidth, y, bulletText, this.style);
                    this.textSprite = this.bulletSprite.addChild(this.game.make.text(this.bulletSprite.width, y - this.bulletY, this.text, this.style));
                }
            }
            else
            {
                this.textSprite = this.game.add.text(x, y, this.text, this.style);
            }

            this.textX = x;

            if ( (typeof (this.style.lineSpacing)) !== 'undefined' ) {
                this.textSprite.lineSpacing = this.style.lineSpacing;
            }

            if ( (typeof (this.style.alpha)) !== 'undefined' ) {
                this.textSprite.alpha = this.style.alpha;
            }

            var hasX = (( typeof (this.style.shadowX)) !== undefined );
            var hasY = (( typeof (this.style.shadowY)) !== undefined );
            var hasColor = (( typeof (this.style.shadowColor)) !== undefined );
            var hasBlur = (( typeof (this.style.shadowBlur)) !== undefined );
            if ( hasX || hasY || hasColor || hasBlur ) {
                var shadowX = 5;
                var shadowY = 5;
                if ( hasX ) {
                    shadowX = this.style.shadowX;
                    if ( !hasY ) {
                        shadowY = shadowX;
                    }
                }
                if ( hasY ) {
                    shadowY = this.style.shadowY;
                    if ( !hasX ) {
                        shadowX = shadowY;
                    }
                }
                var shadowColor = "rgba(0,0,0,1)";
                if ( hasColor ) {
                    shadowColor = this.style.shadowColor;
                }
                var shadowBlur = 0;
                if ( hasBlur ) {
                    shadowBlur = this.style.shadowBlur;
                }
                this.textSprite.setShadow( shadowX, shadowY, shadowColor, shadowBlur );
            }
            this.textSprite.anchor.setTo( anchorX, anchorY );

            if( this.data.scale ) {
                this.textSprite.scale.setTo( this.data.scale[0], this.data.scale[1]);
            }

            if( this.audio ) {
                var eventData = {"audio": this.audio, "key": this.key};
                this.playAudio( eventData);
            }

            if ( this.data.angle ) {
                if (this.bulletSprite) {
                    this.bulletSprite.angle = this.data.angle;
                }
                else {
                    this.textSprite.angle = this.data.angle;
                }
            }
            

            if ( this.data.rotation ) {
                if (this.bulletSprite) {
                    this.bulletSprite.rotation = Math.PI * this.data.rotation;
                }
                else {
                    this.textSprite.rotation = Math.PI * this.data.rotation;
                }
            }
            

            if( this.data.tween ) {
                var tweenData = this.data.tween;

                var textOffset = this.textX - this.bulletX;
                var yoyo = ( typeof tweenData.yoyo != "undefined" ) ? tweenData.yoyo : false;
                var delay = ( typeof tweenData.delay != "undefined" ) ? tweenData.delay : 0;
                var easing = ( typeof tweenData.easing != "undefined" ) ? tweenData.easing : "Linear";

                if( tweenData.location ) {
                    if( this.data.bullet ) {
                        this.game.add.tween(this.bulletSprite).to( { x: tweenData.location[0], y: tweenData.location[1]  },
                            tweenData.time, easing, true, delay, 0, yoyo);
                    }else{
                        this.game.add.tween(this.textSprite).to( { x: (tweenData.location[0] + textOffset), y: tweenData.location[1]  },
                        tweenData.time, easing, true, delay, 0, yoyo);
                    }
                }

                if( tweenData.scale ) {
                    this.game.add.tween(this.textSprite.scale).to( { x: tweenData.scale[0], y: tweenData.scale[1]  }, tweenData.time, easing, true, delay);
                }

                if( !_.isUndefined(tweenData.alpha) ) {
                    this.game.add.tween(this.textSprite).to( { alpha: tweenData.alpha }, tweenData.time, easing, true, delay);
                }
            }
        },
        onGameSpeech: function( choice ) {
            if( choice && choice.text ) {
                this.textSprite.setText(choice.text);
            }
        },
        destroy: function () {
            if ( this.textSprite ) {
                this.textSprite.destroy();
            }
            if( this.bulletSprite ) {
                this.bulletSprite.destroy();
            }
            if( this.audio ) {
                var eventData = { "audio": this.audio, "key": this.key, "priority": "stop"};
                this.playAudio(  eventData);
            }
            this.location = null;
            this.freeBaseActor();
        }
    });

    module.exports = TextActor;
}());

},{"./actor":"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene\\actors\\actor.js","lodash":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\lodash\\index.js","loglevel":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\loglevel\\lib\\loglevel.js"}],"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene\\actors\\actor-timeline.js":[function(require,module,exports){
/**
 * @author David Lee
 * @version 1.0.0
 * @creation 04/04/2018
 * Copyright 2018 Children's Hospital
 * This software is the property of Children's Hospital
 * 
 * A timeline actor that updates a variable after a given period (in ms) has elapsed. 
 * This actor has no visible rendered component.
 * It does *NOT* remove itself once the variable has been set; this is left to the scripter if that behavior is desired.
 * 
 * Creating a Timeline actor:
 * {
 *      "name": "event1",               // A unique name for the actor
 *      "type": "timeline",             // Required type
 *      "period": 1000,                 // Number of miliseconds to wait before 
 *      "variable": "timeline_event"    // After the given period has elapsed, update this variable with the name of this actor
 *
 *      "startDelay": 0                 // I *STRONGLY* recommend against using this value, but if you do, remember the event will not fire until period + startDelay ms have elapsed since the actor was added to the scene.
 * }
 */

(function () {

    var _ = require('lodash'),
        log = require('loglevel'),
        Actor = require('./actor');


    var TimelineActor = Actor.extend({
        // constructor in parent.

        getRequiredFields: function() {
            return [ "period", "variable" ];
        },
        enterScene: function() {
            this.buildActor();
        },
        buildActor: function() {
            if (!this.data.period) {
                throw "Timer Actor requires a period to be set";
            }
            if (!this.data.variable) {
                throw "Timer Actor requires a variable to be set";
            }
            // There may be some use for period == 0, in the same vein as setTimeout(fn, 0) so I'll allow it for now
            if (this.data.period < 0 ) {
                throw "Timer Actor requires period to be >= 0";
            }

            this.timerEvent = this.game.time.events.add(this.data.period, this.timerFired, this);
        },
        timerFired: function() {
            var varSet = {};
            varSet[this.data.variable] = this.data.name;
            this.dispatchGameChoice(varSet);
        },
        destroy: function() {
            if (this.timerEvent) {
                this.game.time.events.remove(this.timerEvent);
            }
            this.freeBaseActor();
        }
    });

    module.exports = TimelineActor;
}());
},{"./actor":"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene\\actors\\actor.js","lodash":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\lodash\\index.js","loglevel":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\loglevel\\lib\\loglevel.js"}],"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene\\actors\\actor-toggle-button.js":[function(require,module,exports){
/**
 * @author George Frick
 * @version 1.0.0
 * @creation 07/01/2015
 * Copyright 2015 Children's Hospital
 * This software is the property of Children's Hospital.
 *
 * The toggle button actor. This actor can be used for simple actions, such as opening the cell phone, and will
 * remember its internal state of on or off. In many 'plays', this actors isn't needed.
 *
 * Creating a toggle button actor:
 * {
 *     "name": "mute1", // a unique identifier
 *     "type": "toggle-button", // the required type.
 *     "images": {
 *      "on": "muteon",
 *      "off": "muteoff"
 *     }, // the images to use from the button section of the theme.
 *     "location": [ x, y ],
 *     "variable": "mute_game",
 *     "values": {
 *          "on": "mute_on",  // the value used instead of the name when the variable is set.
 *          "off": "mute_off"
 *     }
 *     // optional "scale": [ 1.1, 1.1 ] // Use negative scales to 'flip' the images.
 *     // optional: "active": true/false, // will default to false.
 *     // optional: "startDelay": 1000 // delay in ticks before adding the actor (think of a tick as a millisecond, defined in main.js)
 * }
 *
 */
(function () {

    var _ = require('lodash'),
        log = require('loglevel'),
        Actor = require('./actor');

    var ToggleActor = Actor.extend( {
        // constructor in parent.
        getRequiredFields: function() {
            return [ "location", "images", "values", "variable" ];
        },
        enterScene: function() {
            this.isActive = false;
            if( this.data.active && this.data.active === true) {
                this.isActive = true;
            }

            this.buildActor();
            // Even though the user could set active, check the model...
            if( this.data.variable === "mute_game"   ) {
                this.isActive = !this.game.sound.mute;
            }
            this.buttonOn.visible = this.isActive;
            this.buttonOff.visible = !this.isActive;
        },
        buildActor: function() {
            if( !this.theme.buttons || !this.theme.buttons[this.data.images.off] || !this.theme.buttons[this.data.images.on]) {
                throw "Button Actor requires buttons entry in theme, with specific entry matching images off/on";
            }

            this.buttonOff = this.game.add.button( this.data.location[0], this.data.location[1], this.theme.textureKey,
                this.onPointerUp, this,
                this.theme.buttons[this.data.images.off].over, this.theme.buttons[this.data.images.off].out,
                this.theme.buttons[this.data.images.off].down, this.theme.buttons[this.data.images.off].up);
            this.buttonOff.inputEnabled = true;

            this.buttonOn = this.game.add.button( this.data.location[0], this.data.location[1], this.theme.textureKey,
                this.onPointerUp, this,
                this.theme.buttons[this.data.images.on].over, this.theme.buttons[this.data.images.on].out,
                this.theme.buttons[this.data.images.on].down, this.theme.buttons[this.data.images.on].up);
            this.buttonOn.inputEnabled = true;

            if( this.data.scale ) {
                this.buttonOff.scale.setTo( this.data.scale[0], this.data.scale[1]);
                this.buttonOn.scale.setTo( this.data.scale[0], this.data.scale[1]);
            }
        },
        onAction: function() {
            var varSet = {};
            varSet[this.data.variable] = this.isActive ? this.data.values["on"] : this.data.values["off"];
            this.events.onGameChoice.dispatch( this.data.name, varSet );
            this.buttonOn.visible = this.isActive;
            this.buttonOff.visible = !this.isActive;
        },
        onPointerUp: function(  ) {
            this.isActive = !this.isActive;
            this.onAction();
        },
        destroy: function() {
            if ( this.buttonOff ) {
                this.buttonOff.inputEnabled = false;
                this.buttonOff.destroy();
            }
            if ( this.buttonOn ) {
                this.buttonOn.inputEnabled = false;
                this.buttonOn.destroy();
            }
            this.freeBaseActor();
        }
    });

    module.exports = ToggleActor;
}());

},{"./actor":"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene\\actors\\actor.js","lodash":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\lodash\\index.js","loglevel":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\loglevel\\lib\\loglevel.js"}],"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene\\actors\\actor-url-button-invisible.js":[function(require,module,exports){
/**
 * @author George Frick
 * @version 1.0.0
 * @creation 07/01/2015
 * Copyright 2015 Children's Hospital
 * This software is the property of Children's Hospital.
 *
 * The invisible button url actor. Place it over text to provide hyperlink-like functionality, opening
 * the specified link in a new window or tab.
 *
 * Creating a url-button-invisible actor:
 * {
 *     "name": "href1", // a unique identifier
 *     "type": "urlInvisible", // the required type.
 *     "location": [ x, y ],
 *     "width": w,
 *     "height": h,
 *     "url": "www.google.com",
 *     "variable": "show_url", // if you click the button, the variable 'show_url' will be set to 'href1'.
 *     "startDelay": 1000 // optional, delay in ticks before adding the actor (think of a tick as a millisecond, defined in main.js)
 * }
 *
 */
(function () {

    var _ = require('lodash'),
        Actor = require('./actor');

    var UrlButtonInvisibleActor = Actor.extend( {
        // constructor is in parent.
        enterScene: function() {
            this.buildActor();
        },
        getRequiredFields: function() {
            return [ "location", "width", "height", "url", "variable" ];
        },
        buildActor: function() {
            this.button = this.game.add.button( this.data.location[0], this.data.location[1],
                null,
                this.onPointerUp, this,
                null, null, null, null);
            this.button.inputEnabled = true;
            this.button.width = this.data.width;
            this.button.height = this.data.height;
        },
        onPointerUp: function( event ) {
            window.open(this.data.url, "_blank");
            var varSet = {};
            varSet[this.data.variable] = this.data.name;
            this.events.onGameChoice.dispatch( this.data.name, varSet );
        },
        destroy: function() {
            if ( this.button ) {
                this.button.destroy();
            }
            this.freeBaseActor();
        }
    });

    module.exports = UrlButtonInvisibleActor;
}());

},{"./actor":"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene\\actors\\actor.js","lodash":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\lodash\\index.js"}],"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene\\actors\\actor-url-button.js":[function(require,module,exports){
/**
 * @author Syd Grosclaude
 * @version 1.0.0
 * @creation 08/20/2015
 * Copyright 2015 Children's Hospital
 * This software is the property of Children's Hospital.
 *
 * The url actor. This actor can be used to provide a button; when clicked, open a url in a new window/tab.
 *
 * Creating a url actor:
 * {
 *     "name": "href1", // a unique identifier
 *     "type": "url-button", // the required type.
 *     "image": "resourceImage", // the images to use from the buttons section of the theme.
 *     "location": [ x, y ],
 *     "url": "www.google.com",
 *     "variable": "show_url" // if you click the button, the variable 'show_url' will be set to 'href1'.
 *     // optional "scale": [ 1.1, 1.1 ] // Use negative scales to 'flip' the images.
 *     // optional "startDelay": 1000 // delay in ticks before adding the actor (think of a tick as a millisecond, defined in main.js)
 * }
 *
 */
(function () {
	var _ = require("lodash"),
		ButtonActor = require("./actor-button");

	var UrlButtonActor = ButtonActor.extend({
		getRequiredFields: function () {
			var myRequired = ["url"];
			var baseRequired = this.base();
			var allRequired =
				typeof baseRequired != "undefined"
					? baseRequired.concat(myRequired)
					: myRequired;
			return allRequired;
		},
		onPointerUp: function (event) {
			window.open(this.game.config.assetPath + this.data.url, "_blank");
			this.base(event);
		},
	});

	module.exports = UrlButtonActor;
})();

},{"./actor-button":"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene\\actors\\actor-button.js","lodash":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\lodash\\index.js"}],"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene\\actors\\actor-wistia.js":[function(require,module,exports){
/**
 * @author George Frick
 * @version 1.0.0
 * @creation 07/01/2015
 * Copyright 2015 Children's Hospital
 * This software is the property of Children's Hospital.
 *
 * A a video actor usin Wistia.
 *
 * {
 *    "name": "video1",
 *     "type": "wistia",
 *     "location": [ 2, 5 ], // location on screen.
 *     "size": [ 300, 200 ],
 *     "video" : "dun1fuu253",
 *     "closeButtonLocation" : [ 70, 44 ], // optional, default is top right of video
 *     "hideCloseButton": true, // optional, will hide the close button.
 *     "blockerTint" : "0x000000", // optional, default is black (0x000000)
 *     "blockerAlpha" : 0.5, // optional, default is 0.5
 *     "blockInput": false, // block input until video is done, optional
 *     "startDelay": 1000, // optional, delay in ticks before adding the actor (think of a tick as a millisecond, defined in main.js)
 *     "autoplay": true, // optional. will automatically start the video.
 *     "variable": "string", // optional variable. If present, will be set to started and finished
 *     "markers": [ 5, 15, 20 ] // optional. At specified markers, variable will be set to marker value.
 * },
 *
 */
(function () {
	"use strict";
	var _ = require("lodash"),
		log = require("loglevel"),
		Actor = require("./actor"),
		$ = require("jquery");

	var WistiaActor = Actor.extend({
		// constructor in parent.
		getRequiredFields: function () {
			return ["location", "size", "video"];
		},
		enterScene: function () {
			if (!Wistia) {
				throw "Wistia appears to be missing, cannot create wistia actor.";
			}
			this.video = this.data.video;
			this.blockInput = this.data.blockInput || false;
			this.element = $(this.game.canvas.parentElement);

			if (this.blockInput) {
				this.blockingSprite = this.createBlockingSprite();
				this.blockingSprite.bringToTop();
				this.blockingSprite.visible = false;
			}

			this.currentX = this.data.location[0];
			this.currentY = this.data.location[1];
			this.width = this.data.size[0];
			this.height = this.data.size[1];
			if (this.currentX === "center") {
				this.currentX = this.game.world.centerX - this.width / 2;
			}
			if (this.currentY === "center") {
				this.currentY = this.game.world.centerY - this.height / 2;
			}

			_.bindAll(this, "addWindow");
			window.wistiaInit = this.addWindow;
		},
		addListeners: function () {
			// Bind these, otherwise "this" will be lost. Wistia doesn't accept a context!
			_.bindAll(this, "onWistiaEnd");
			_.bindAll(this, "onWistiaPlay");
			this.wistiaEmbed.bind("play", this.onWistiaPlay);
			this.wistiaEmbed.bind("end", this.onWistiaEnd);
			if (this.data.variable) {
				_.bindAll(this, "onWistiaMarker");
				if (this.data.markers && _.isArray(this.data.markers)) {
					this.wistiaEmbed.bind("secondchange", this.onWistiaMarker);
				}
			}
		},
		onGameSpeech: function (speech) {
			if (speech.audio && speech.audio !== this.video) {
				this.pause();
			}
		},
		pause: function () {
			if (typeof this.wistiaEmbed != "undefined") {
				this.wistiaEmbed.pause();
			}
		},
		onWistiaMute: function (isMuted) {
			log.warn("Called onWistiaMute: " + isMuted);
			if (isMuted) {
				this.wistiaEmbed.volume(0);
			} else {
				this.wistiaEmbed.volume(1);
			}
		},
		onWistiaMarker: function (seconds) {
			_.each(
				this.data.markers,
				function (marker) {
					if (parseInt(marker, 10) === seconds) {
						var varSet = {};
						varSet[this.data.variable] = seconds;
						this.dispatchGameChoice(varSet);
						return false; // exit loop.
					}
				},
				this
			);
		},
		onWistiaEnd: function () {
			if (this.data.variable) {
				var varSet = {};
				varSet[this.data.variable] = "finished";
				this.dispatchGameChoice(varSet);
			}
		},
		onWistiaPlay: function () {
			this.onWistiaMute(this.game.sound.mute);
			this.playAudio({ audio: this.video, key: null });
			if (this.data.variable) {
				var varSet = {};
				varSet[this.data.variable] = "started";
				this.dispatchGameChoice(varSet);
			}
		},
		addWindow: function () {
			/**
			 * This should be a handlebars template but we're having internet trouble so here it is... text.
			 * @type {string}
			 */
			//console.log("wistia api loaded");
			if (this.element) {
				// Check for existance in case someone is 'fast' and tries closing the video before Wistia is done
				// loading it.

				var videoContainer = document.createElement("div");
				if (this.theme.internal_autoScale == true) {
					// This property is tacked onto the theme by play.js if set to true in the play.json settings.
					console.log(
						"currentX: " + this.currentX + " - currentY: " + this.currentY
					);
					console.log("this.data.size[0]: " + this.data.size[0]);
					var leftPct = (this.currentX / this.game.world.width) * 100;
					var topPct = (this.currentY / this.game.world.height) * 100;
					var scalePct = (this.data.size[0] / this.game.world.width) * 100;
					videoContainer.setAttribute(
						"style",
						"position: absolute; z-index: 150; width: " +
							scalePct +
							"%; top: " +
							topPct +
							"%; left: " +
							leftPct +
							"%;"
					);
				} else {
					videoContainer.setAttribute(
						"style",
						"position: absolute; z-index: 150; width: " +
							this.width +
							"px; height: " +
							this.height +
							"px; top: " +
							this.currentY +
							"px; left: " +
							this.currentX +
							"px;"
					);
				}

				videoContainer.setAttribute("id", "videoContainer");

				this.videoElement = document.createElement("div");
				var classString = "wistia_embed wistia_async_" + this.video;
				//classString += " endVideoBehavior=reset";
				//classString += " playbar=false";
				if (this.game.device.iPad) {
					classString += " qualityMax=360";
				}
				if (this.data.autoScale == true || this.data.autoScale == null) {
					// enable by default, even if not declared
					classString += " videoFoam=true";
				}
				this.videoElement.setAttribute("class", classString);
				this.videoElement.setAttribute(
					"style",
					"width:" + this.width + "px; height:" + this.height + "px;"
				);
				this.videoElement.setAttribute("id", "videoElement");

				videoContainer.appendChild(this.videoElement);
				var gameContainer = document.querySelector("#gameContainer");
				gameContainer.appendChild(videoContainer);

				window._wq = window._wq || [];
				_.bindAll(this, "onWistiaEmbed");
				_wq.push({ id: this.video, onReady: this.onWistiaEmbed });
			}
		},
		onWistiaEmbed: function (video) {
			//console.log("wistia video loaded");
			if (this.element && !this.wistiaEmbed) {
				// Check for existance in case someone is 'fast' and tries closing the video before Wistia is done
				// loading it. this.wistiaEmbed checked to keep function from running multiple times when slide is revisited - Wistia seems to doesn't clear the onReady event binding.
				this.wistiaEmbed = video;

				this.showBlockingSprite();
				this.addCloseButton();

				if (this.blockInput) {
					this.blockingSprite.visible = true;
				}

				this.addListeners();
				if (this.data.autoplay === true) {
					this.wistiaEmbed.play();
				}
			}
		},
		showBlockingSprite: function () {
			if (this.blockInput) {
				this.game.add.existing(this.blockingSprite);
			}
		},
		addCloseButton: function () {
			if (this.data.hideCloseButton !== true) {
				var closeButtonX, closeButtonY;
				if (typeof this.data.closeButtonLocation === "undefined") {
					closeButtonX = this.currentX + this.width;
					closeButtonY = this.currentY;
				} else {
					closeButtonX = this.data.closeButtonLocation[0];
					closeButtonY = this.data.closeButtonLocation[1];
				}

				this.button = new Phaser.Button(
					this.game,
					closeButtonX,
					closeButtonY,
					this.theme.textureKey,
					this.onClose,
					this,
					this.theme.buttons.videoClose.over,
					this.theme.buttons.videoClose.out,
					this.theme.buttons.videoClose.down,
					this.theme.buttons.videoClose.up
				);
				if (typeof this.data.closeButtonLocation == "undefined") {
					// We're using the default close button location, so move it up by its height to sit above the video.
					this.button.y -= this.button.height;
				}
				this.button.bringToTop();
				this.button.input.useHandCursor = true;
				this.game.add.existing(this.button);
			}
		},
		createBlockingSprite: function () {
			var blockerTint =
				typeof this.data.blockerTint === "undefined"
					? 0x000000
					: this.data.blockerTint;
			var blockerAlpha =
				typeof this.data.blockerAlpha === "undefined"
					? 0.5
					: this.data.blockerAlpha;

			var sprite = new Phaser.Sprite(this.game, 0, 0);
			var graphics = new Phaser.Graphics(this.game, 0, 0);
			sprite.addChild(graphics);
			graphics.beginFill(blockerTint, blockerAlpha);
			graphics.drawRect(0, 0, this.game.world.width, this.game.world.height);
			graphics.endFill();
			sprite.inputEnabled = true;
			return sprite;
		},
		onClose: function () {
			this.destroy();
		},
		destroy: function () {
			if (this.element) {
				// Check for existance in case someone is 'fast' and tries closing the video before Wistia is done
				// loading it.
				if (this.wistiaEmbed) {
					this.wistiaEmbed.unbind();
					this.wistiaEmbed.remove();
					this.wistiaEmbed = null;
				}
				if (this.blockInput) {
					this.blockingSprite.visible = false;
				}
				if (this.button) {
					this.button.visible = false;
					this.button.destroy();
					this.button = null;
				}
				//log.warn(this.videoElement.attr('id'));
				$("#videoContainer").hide();
				var temp = {};
				temp[this.data.name] = "closed";
				this.events.onGameChoice.dispatch(this.data.name, temp);
				// Now, delete it all.
				if (this.blockInput) {
					this.blockingSprite.destroy(true);
				}
				//log.warn(this.videoElement.attr('id'));
				$("#videoContainer").remove();
				this.element = null;
				this.freeBaseActor();
			}
		},
	});

	module.exports = WistiaActor;
})();

},{"./actor":"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene\\actors\\actor.js","jquery":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\jquery\\dist\\jquery.js","lodash":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\lodash\\index.js","loglevel":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\loglevel\\lib\\loglevel.js"}],"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene\\actors\\actor.js":[function(require,module,exports){
/**
 * @author George Frick
 * @version 1.0.0
 * @creation 07/01/2015
 * Copyright 2015 Children's Hospital
 * This software is the property of Children's Hospital.
 *
 * An generic actor. It cannot be instantiated. It provides functionality to all actors
 *
 *  "inverseEvents": true // optional. Events will go only to this sprite, instead of only to others.
 */
(function () {
    'use strict';
    var _ = require('lodash'),
        log = require('loglevel'),
        Base = require('basejs');

    var DEFAULT_FONT = { "font": "20px Tahoma", "fill": "#000000",  "fontWeight": "bold"},
        DEFAULT_TEXT = "Text Not Found.",
        DEFAULT_IMAGE = "Image Not Found.";

    var Actor = Base.extend({
        constructor: function(game,  data, theme) {
            if( !game ) {
                throw "Actor requires game constructor argument.";
            }
            if( !data ) {
                throw "Actor requires data constructor argument.";
            }
            if( !theme ) {
                throw "Actor requires data constructor argument.";
            }
            this.game = game;
            this.theme = theme;
            this.data = data;
            this.validate();
            this.events = {
                onGameChoice: new Phaser.Signal(),
                onGameSpeech: new Phaser.Signal()
            };
        },
        freeBaseActor: function() {
            if (this.events) {
                if (this.events.onGameChoice) {
                    this.events.onGameChoice.removeAll();
                    this.events.onGameChoice.dispose();
                }
                if (this.events.onGameSpeech) {
                    this.events.onGameSpeech.removeAll();
                    this.events.onGameSpeech.dispose();
                }
            }
            this.events = null;
            this.theme = null;
            //this.game = null;
            //this.data = null;
        },
        /**
         * A basic validation function.
         * This will check some basic/common data errors, including required fields.
         */
        validate: function() {
            if( !this.data.name ) {
                throw "Actor has data, but no name. Name is required.";
            }

            if( !this.data.type ) {
                throw "Actor has data, but no name. Name is required.";
            }

            _.each( this.getRequiredFields(), function(field) {
                if( this.data[field] === undefined || this.data[field] === null ) {
                    throw "[" + this.data.type + "] Actor [" + this.data.name + "] is missing required field: " + field;
                }
            }, this);

            if( this.data.name && this.data.name.charAt(0) === "$" ) {
                throw "Actor names cannot be variables, and will not be resolved.";
            }
        },
        getType: function() {
            return this.data.type;
        },
        getName: function() {
            return this.data.name;
        },
        getPrimarySprite: function() {
            return this.sprite;
        },
        /**
         * An abstract method for children to implement.
         * ex: return [ "name", "location" ];
         */
        getRequiredFields: function() {
            throw "You must implement this function. Return an array of field names.";
        },
        setModelInterface: function( modelInterface ) {
            this.modelInterface = modelInterface;
        },
        getFont: function(name) {
            log.warn("Asking for font with " + name );
            if( this.theme && this.theme.fonts && this.theme.fonts[name] ) {
                return _.clone(this.theme.fonts[name]);
            }
            log.error("Font not found for " + name);
            return _.clone(DEFAULT_FONT);
        },
        /**
         * Look up a piece of text in the theme.
         * If not there, treat as literal.
         *
         */
        getText: function( name, key ) {
            log.warn("Asking for text with " + name + " / " + key);
            var sName = name,
                sKey = key;
            if( this.modelInterface ) {
                sName = this.modelInterface.getValue(name);
                sKey = this.modelInterface.getValue(key);
            }
            log.warn("--> Asking for text with " + sName + " / " + sKey);
            if( !this.theme || (!this.theme.texts && !sKey) ) {
                log.error("text unavailable for " + sName + " / " + sKey);
                return (DEFAULT_TEXT);
            }
            var text = this.theme.texts[sName];
            if( !text && !sKey ) {
                return sName; // might be a string literal.
            } else if( sKey && this.theme.texts[sKey] ) {
                text = this.theme.texts[sKey][sName];
            }
            log.warn("returning " + text);
            return text || sName;
        },
        getTextureKey: function( spriteData ) {
            if( spriteData && spriteData.textureKey ) {
                return spriteData.textureKey;
            }
            return this.theme.textureKey;
        },
        /**
         * Look up an image in the theme.
         * If not there, treat as literal.
         */
        getImage: function( name, key ) {
            log.warn("Asking for image with " + name + " / " + key);
            var sName = name,
                sKey = key;
            if( this.modelInterface ) {
                sName = this.modelInterface.getValue(name);
                sKey = this.modelInterface.getValue(key);
            }
            log.warn("--> Asking for image with " + sName + " / " + sKey);
            if( !this.theme || (!this.theme.images && !sKey) ) {
                log.error("image not found for " + sName + " / " + sKey);
                return (DEFAULT_IMAGE);
            }
            var image = this.theme.images[sName];
            if( !image && !sKey ) {
                return sName; // might be a string literal, so return it.
            } else if( sKey ) {
                image = this.theme.images[sKey][sName];
            }
            if (!isNaN(Number(image.endIndex))) {
                var start = Number(image.startIndex) || 1;
                var end = Number(image.endIndex);
                var zeroPad = image.zeroPad || 4;
                var prefix = image.filenamePrefix || "";
                var suffix = image.filenameSuffix || ".png";
                image = Phaser.Animation.generateFrameNames(prefix, start, end, suffix, zeroPad);
            }
            return image;
        },
        getMyValue: function() {
            var value;
            if( this.data.variable && this.modelInterface ) {
                value = this.modelInterface.getValue("$" + this.data.variable);
            }
            return value;
        },
        destroy: function() {
            log.error("Failed to implement destroy for actor type: " + this.data.type);
        },
        createBlockingSprite: function() {
            var sprite = new Phaser.Sprite(this.game, 0,0);
            var graphics = new Phaser.Graphics(this.game, 0, 0);
            sprite.addChild(graphics);
            graphics.beginFill(0x000000, 0.01);
            graphics.drawRect(0, 0, this.game.world.width, this.game.world.height);
            graphics.endFill();
            sprite.inputEnabled = true;
            return sprite;
        },
        substituteText: function( text ) {
            log.warn("Doing substitution on: " + text);
            var leftIndex, rightIndex;
            leftIndex = text.indexOf("$");
            if( leftIndex === -1 ) {
                return text;
            }
            rightIndex = text.indexOf("$", leftIndex + 1);
            if( rightIndex === -1 ) {
                return text;
            }
            var key = text.substring( leftIndex, rightIndex +1);
            var key2 = key.substring(0, key.length - 1); // remove trailing dollarsign.
            var finalText = this.modelInterface.getValue(key2);
            if(typeof finalText === 'undefined' || finalText === null)
            {
                return text;
            }
            finalText = finalText.charAt(0).toUpperCase() + finalText.slice(1);
            return text.replace(key, finalText );
        },
        dispatchGameChoice: function(data) {
            this.events.onGameChoice.dispatch( this.data.name, data, this );
        },
        dispatchGameSpeech: function(data) {
            this.playAudio(  data, this);
        },
        isSoundEventInverse: function() {
            return this.data && this.data.inverseSoundEvents === true;
        },
        // override if you have physics.
        getBody: function() {
            return null;
        },
        /**
         * This will be called if this sprite is overlapping another sprite and getBody() does not return null;
         * The other sprite will also not be returning null for getBody().
         * @param otherActor
         */
        onOverlapping: function( otherActorName ) {

        },
        /**
         * Receive a dropped sprite.
         */
        onReceiveDrop: function( otherActorName ) {

        },
        playAudio: function( eventData ) {
            if( this.data.audioKey ) {
                eventData.channel = this.data.audioKey;
            }
            this.events.onGameSpeech.dispatch(this.data.name, eventData);
        },
        getVariableList: function() {
            return [];
        },
        clearVariables: function() {
            if( this.data.variable) {
                this.modelInterface.clearValue(this.data.variable);
            }
            _.each( this.getVariableList(), function( eachVar) {
                this.modelInterface.clearValue(eachVar);
            }, this);
        }
    });

    module.exports = Actor;
}());

},{"basejs":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\basejs\\Base.js","lodash":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\lodash\\index.js","loglevel":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\loglevel\\lib\\loglevel.js"}],"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene\\actors\\iuc\\actor-book.js":[function(require,module,exports){
/**
 * @author George Frick
 * @version 1.0.0
 * @creation 07/01/2015
 * Copyright 2015 Children's Hospital
 * This software is the property of Children's Hospital.
 *
 * This is the book actor, which will show the player a book with flippable pages. It will also
 * play any audio/text associated with asking questions and text.
 *
 * {
 *     "name": "choices_mandy_1", // unique name for this actor.
 *     "type": "iucbook", // required type.
 *     "pages":  [
 *     {
 *     "title": "What are Drugs?",
 *     "subtitle": "This is a subtitle!",
 *     "type": "question"|"information" // will there be questions?
 *
 *     }
 *     ]
 * }
 */
(function () {

    var _ = require('lodash');
    var log = require('loglevel');
    var Actor = require('../actor');

    var ItsUrChoiceBookActor = Actor.extend({
        // constructor in parent.
        getRequiredFields: function () {
            return ["pages"];
        },
        enterScene: function () {
            this.pages = this.data.pages;
            this.buildActor();
        },
        buildActor: function () {
            this.buttons = [];
            this.pages = [];
            this.currentPageIndex = 0;
            this.fonts = {
                "bookQuestionTitle": this.getFont("bookQuestionTitle"),
                "bookQuestionSubtitle": this.getFont("bookQuestionSubtitle"),
                "bookQuestionText": this.getFont("bookQuestionText"),
                "bookQuestionRemediation": this.getFont("bookQuestionRemediation"),
                "bookPageTitle": this.getFont("bookPageTitle"),
                "bookPageSubtitle": this.getFont("bookPageSubtitle"),
                "bookPageContent": this.getFont("bookPageContent"),
                "bookPageNumber": this.getFont("bookPageNumber")
            };
            this.PAGE_FLIP_SOUND = this.theme.bookSounds.pageFlipSound;
            this.ANSWER_CORRECT_SOUND = this.theme.bookSounds.correctSound;
            this.ANSWER_INCORRECT_SOUND = this.theme.bookSounds.incorrectSound;

            this.addBackground();          // 01. Background image. This may also later need a border drawn?
            this.addActionButtons();       // 02. Turn pages.
            this.addPages();
            this.setCurrentPage(0);
        },
        addBackground: function () {
            this.bgImage = this.game.add.sprite(this.game.world.width/2, 15, this.theme.textureKey, this.getImage("background", "book"));
            this.bgImage.anchor.setTo(0.5, 0);
            this.leftPageImage = this.game.add.sprite(90, 28, this.theme.textureKey, this.getImage("left-page", "book"));
            this.rightPageImage = this.game.add.sprite(402, 28, this.theme.textureKey, this.getImage("right-page", "book"));
        },
        addActionButtons: function () {
            this.nextPageButton = this.game.add.button(750, 175, this.theme.textureKey,
                this.onNextPageAction, this,
                this.theme.buttons['nextPage'].over, this.theme.buttons['nextPage'].out,
                this.theme.buttons['nextPage'].down, this.theme.buttons['nextPage'].up);
            this.previousPageButton = this.game.add.button(10, 175, this.theme.textureKey,
                this.onPreviousPageAction, this,
                this.theme.buttons['previousPage'].over, this.theme.buttons['previousPage'].out,
                this.theme.buttons['previousPage'].down, this.theme.buttons['previousPage'].up);
        },
        addPages: function() {
            var pageGroup;
            var title, subtitle, content, remediation, pageNumber;
            var bulletImages, bullet;
            _.each( this.data.pages, function(page, pageIndex) {
                pageGroup = this.game.add.group();
                pageGroup.audio = page.audio;

                if( page.content ) {
                    // Title.
                    title = new Phaser.Text(this.game, 565, 50, page.title, this.fonts.bookPageTitle);
                    title.anchor.setTo( 0.5, 0);
                    pageGroup.add(title);

                    // Subtitle.
                    subtitle = new Phaser.Text(this.game, 410, 85, page.subtitle, this.fonts.bookPageSubtitle);
                    pageGroup.add(subtitle);

                    // Content!
                    content = new Phaser.Text(this.game, 412, 110, page.content, this.fonts.bookPageContent);
                    pageGroup.add(content);

                } else if( page.questions ) {
                    // Title.
                    title = new Phaser.Text(this.game, 565, 50, page.title, this.fonts.bookQuestionTitle);
                    title.anchor.setTo( 0.5, 0);
                    pageGroup.add(title);

                    // Subtitle.
                    subtitle = new Phaser.Text(this.game, 565, 85, page.subtitle, this.fonts.bookQuestionSubtitle);
                    subtitle.anchor.setTo( 0.5, 0);
                    pageGroup.add(subtitle);

                    // Content!
                    _.each( page.questions , function( eachQuestion, questionIndex) {
                        bulletImages = this.theme.buttons['bookChoice' + questionIndex];
                        bullet = this.game.add.button( 410, 110 + (questionIndex * 35), this.theme.textureKey,
                            this.onPointerUp, this,
                            bulletImages.over, bulletImages.out,
                            bulletImages.down, bulletImages.up);
                        bullet.inputEnabled = true;
                        bullet.events.onInputOver.add( this.onMouseIn, this);

                        content = new Phaser.Text(this.game, 435, 120 + (questionIndex * 35),
                            eachQuestion.text, this.fonts.bookQuestionText);
                        content.lineSpacing = -6;
                        bullet.answer = eachQuestion;
                        pageGroup.add(bullet);
                        pageGroup.add(content);
                    }, this);

                    // Remediation
                    remediation = new Phaser.Text(this.game, 413, 265,
                        "nothing", this.fonts.bookQuestionRemediation);
                    remediation.lineSpacing = -3;
                    pageGroup.add(remediation);
                    pageGroup.remediation = remediation;
                    remediation.visible = false;
                }

                // Page #
                pageNumber = new Phaser.Text(this.game, 690, 448, pageIndex + 1, this.fonts.bookPageNumber);
                pageGroup.add(pageNumber);

                pageGroup.visible = false;
                this.pages.push(pageGroup);
            }, this);
            this.pages[0].visible = true;
        },
        setCurrentPage: function( pageIndex ) {
            if( pageIndex < 0 || pageIndex >= this.pages.length ) {
                return;
            }
            this.pages[this.currentPageIndex].visible = false;
            this.currentPageIndex = pageIndex;
            this.pages[this.currentPageIndex].visible = true;

            this.previousPageButton.visible = (this.currentPageIndex !== 0);
            this.nextPageButton.visible = (this.currentPageIndex !== (this.pages.length - 1));

            this.playAudio( { audio: this.pages[this.currentPageIndex].audio, key: null, priority: 'queue' });

        },
        onNextPageAction: function() {
            this.playAudio({audio: this.PAGE_FLIP_SOUND, key: null, "priority": "stopall" });
            this.playAudio({ audio: this.PAGE_FLIP_SOUND, key: null });
            this.setCurrentPage(this.currentPageIndex + 1);
        },
        onPreviousPageAction: function() {
            this.playAudio({audio: this.PAGE_FLIP_SOUND, key: null, "priority": "stopall" });
            this.playAudio( { audio: this.PAGE_FLIP_SOUND, key: null});
            this.setCurrentPage(this.currentPageIndex - 1);
        },
        onMouseIn: function() {
            // currently, clicking the answer also causes as mouse in? This is causing problems...
            // this.events.onGameSpeech.dispatch(this.data.name, { audio: "bubble_slow", key: null, restart: true});
        },
        onPointerUp: function (choice) {
           // this.events.onGameSpeech.dispatch(this.data.name, { audio: "bubble_slow", key: null, stop: true});
            var page = this.pages[this.currentPageIndex];
            page.remediation.setText(choice.answer.response.text);
            page.remediation.visible = true;
            this.playAudio( {audio: this.ANSWER_CORRECT_SOUND, key: null, "priority": "stopall" });
            if( choice.answer.response.correct ) {
                this.playAudio( {audio: this.ANSWER_CORRECT_SOUND, key: null});
            } else {
                this.playAudio(  { audio: this.ANSWER_INCORRECT_SOUND, key: null});
            }
            this.playAudio(  { audio: choice.answer.response.audio, key: null, "priority": 'queue' });
        },
        destroy: function () {
            this.bgImage.destroy();
            this.leftPageImage.destroy();
            this.rightPageImage.destroy();
            this.nextPageButton.destroy();
            this.previousPageButton.destroy();

            var temp;
            while( this.pages.length > 0 ) {
                temp = this.pages.pop();
                temp.remediation = null;
                temp.destroy(true);
            }
            this.freeBaseActor();
        }
    });

    module.exports = ItsUrChoiceBookActor;
}());

},{"../actor":"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene\\actors\\actor.js","lodash":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\lodash\\index.js","loglevel":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\loglevel\\lib\\loglevel.js"}],"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene\\actors\\iuc\\actor-chat.js":[function(require,module,exports){
/**
 * @author George Frick
 * @version 1.0.0
 * @creation 07/01/2015
 * Copyright 2015 Children's Hospital
 * This software is the property of Children's Hospital.
 *
 * This is the chat actor, which will show the player a conversation. It will also
 * play any audio/text associated with asking question.
 *
 * {
 *     "name": "choices_mandy_1", // unique name for this actor.
 *     "type": "iucchat", // required type.
 *     "background": "purpleWall",
 *     "portrait": "mrsRiley",
 *     "portraitLabel": "Mrs. Riley",
 *     "chooseLabel": "Choose your response.",
 *     "variable": "x", // the variable to set when the user leaves
 *     "conversation":  {
              "responses": [
                {
                  "text": {
                    "audio": "audio/day1/melissa_intro.mp3",
                    "text": "Oh, hi. I was just asking your dad if I could borrow his toolbox. I'm fixing some shelves in Josh's room. Your dad will be right back. How's it going? How's school? I'm kind of worried about Seth because he hasn't even thought of college yet, much less his Algebra homework tomorrow. I wish he could be more like Josh and develop some short and long-term goals. He once told me that he felt like everything was out of control and nothing mattered. I hope he was just in a bad mood and that he's not experimenting with anything."
                  },
                  "triggers": "q1,q2,q3,q4,q5",
                  "name": "intro"
                },
                {
                  "text": {
                    "audio": "audio/day1/melissa_1r.mp3",
                    "text": "A short-term goal is simply a goal you want to achieve in a few days, a few weeks or a few months."
                  },
                  "triggers": "q1_a,q2,q3,q4,q5",
                  "name": "r1"
                },

              ],
              "questions": [
                  {
                    "text": "Maybe Seth doesn't know what a short-term goal is. I know I don't.",
                    "name": "q1",
                    "response": "r1",
                    "value": "X" // set the variable to X.
                  },
                  {
                    "text": "All right, Mrs. Riley. I'm going to need an example.",
                    "name": "q1_a",
                    "response": "r1_a"
                  },
                  {
                    "text": "What's a long-term goal?",
                    "name": "q2",
                    "objectiveMet": "4",
                    "response": "r2"
                  }
                ]
            }
 * }
 */
(function () {

    var _ = require('lodash'),
        log = require('loglevel'),
        RoundedChatRect = require('./rounded-chat-rect');
    Actor = require('../actor');

    var MAX_CHOICES = 5,
        marginY = 3,
        RESPONSE_START_Y = 323;
    var RESPONSE_TEXT_X = 40;
    var COLOR_VISITED_OPTION = "#b5b3b2";
    var COLOR_ACTIVE_OPTION = "#000000";

    var ChatActor = Actor.extend({
        // constructor in parent.
        getRequiredFields: function () {
            return ["conversation", "background", "portrait", "portraitLabel", "chooseLabel", "variable"];
        },
        enterScene: function () {
            this.conversation = this.data.conversation;
            this.currentResponse = this.findResponse("intro");
            if (!this.currentResponse) {
                throw "You must have an intro response: " + this.data.name;
            }
            this.isMuted = this.game.sound.mute;

            this.buildActor();
            this.populateChoice();
        },
        buildActor: function () {
            this.buttons = [];
            this.text = [];
            this.completed = [];

            this.addBackground();          // 01. Background image. This may also later need a border drawn?
            this.addPortrait();            // 02, 03. Portrait + Label
            this.addSpeechBubble();        // 04. Speech Bubble (and 10. speech text)
            this.addResponseTitle();       // 05, 06. "Choose your response." w/line
            this.addChoiceBox();           // 07. Choice box
            this.addActionButtons();       // 08, 09. Audio Mute and Leave Conversation button
            this.addChoiceText();          // 11. Current Choice(s) text / Links, possibly grayed out.
        },
        addBackground: function () {
            this.bgImage = this.game.add.sprite(0, 0, this.theme.textureKey, this.getImage(this.data.background, this.data.key));
        },
        addPortrait: function () {
            this.portrait = this.game.add.sprite(581, 43, this.theme.textureKey, this.getImage(this.data.portrait, this.data.key));

            // 03. Portrait label
            var fontName = this.data.portraitFont;
            this.labelStyle = this.getFont((typeof fontName !== 'undefined') ? fontName : "chatLabel");
            this.labelStyle.align = "center";
            var labelX = this.portrait.x + (this.portrait.width / 2);
            var labelY = this.portrait.y + this.portrait.height + 15;
            this.portraitLabel = this.game.add.text(labelX, labelY, this.data.portraitLabel, this.labelStyle);
            this.portraitLabel.anchor.setTo(0.5, 0.0);
        },
        addSpeechBubble: function () {
            this.speechBubble = new RoundedChatRect(this.game, this.theme);
            this.speechBubble.show();
        },
        addResponseTitle: function () {
            var fontName = this.data.chooseFont;
            var styleChoose = this.getFont((typeof fontName !== 'undefined') ? fontName : "chatLabel");
            var chooseLabelX = 150;
            var chooseLabelY = this.portrait.y + this.portrait.height + 65;
            this.chooseLabel = this.game.add.text(chooseLabelX, chooseLabelY, this.data.chooseLabel, styleChoose);
            this.chooseLabel.anchor.setTo(0.5, 1.0);
        },
        addChoiceBox: function () {
            var choiceGraphics = this.game.add.graphics(0, 0);
            choiceGraphics.lineStyle(3, 0xc73248, 1);
            choiceGraphics.moveTo(40, RESPONSE_START_Y - 15);
            choiceGraphics.lineTo(760, RESPONSE_START_Y - 15);
            choiceGraphics.lineStyle(1, 0xffffff, 1);
            choiceGraphics.beginFill(0xFFFFFF, 1);
            choiceGraphics.drawRect(30, RESPONSE_START_Y - 5, 740, 150);
            this.choiceGraphics = choiceGraphics;
        },
        addActionButtons: function () {
            this.muteOnButton = this.game.add.button(450, 535, this.theme.textureKey,
                this.onMuteAction, this,
                this.theme.buttons['soundOff'].over, this.theme.buttons['soundOff'].out,
                this.theme.buttons['soundOff'].down, this.theme.buttons['soundOff'].up);
            this.muteOffButton = this.game.add.button(450, 535, this.theme.textureKey,
                this.onMuteAction, this,
                this.theme.buttons['soundOn'].over, this.theme.buttons['soundOn'].out,
                this.theme.buttons['soundOn'].down, this.theme.buttons['soundOn'].up);
            var text;
            if (this.isMuted) {
                this.muteOnButton.visible = false;
                text = "Audio Off";
            } else {
                this.muteOffButton.visible = false;
                text = "Audio On";
            }

            var buttons = this.theme.buttons.leaveChat;
            if( this.data.button ) {
                buttons = this.theme.buttons[this.data.button];
            }
            this.leaveButton = this.game.add.button(560, 547, this.theme.textureKey,
                this.onLeaveAction, this, buttons.over, buttons.out, buttons.down, buttons.up);

            var styleChoose = this.getFont("chatMute");

            this.muteText = this.game.add.text(450, 520, text, styleChoose);
        },
        addChoiceText: function () {
            var locationY = RESPONSE_START_Y,
                buttonCnt,
                currButton;
            this.styleChoose = this.getFont("chatOption");
            this.styleChoose.wordWrap = true;
            this.styleChoose.wordWrapWidth = 725;
            for (buttonCnt = 0; buttonCnt < MAX_CHOICES; buttonCnt++) {
                currButton = this.game.add.text(RESPONSE_TEXT_X, locationY, "answer text", this.styleChoose);
                currButton.lineSpacing = -6;
                locationY += currButton.height + marginY;
                this.buttons.push(currButton);
                currButton.answerIndex = buttonCnt;
            }
        },
        addTextAnswerBox: function (answerText) {
            if (answerText.buttonGraphics) {
                answerText.buttonGraphics.borderGraphic.destroy();
                answerText.buttonGraphics.borderGraphic = null;
                answerText.buttonGraphics.destroy();
                answerText.buttonGraphics = null;

            }
            var choiceGraphics = this.game.add.graphics(30, answerText.y - 3);
            choiceGraphics.beginFill(0xffffff, 1);
            choiceGraphics.drawRect(2, 0, 736, answerText.height + 1);
            choiceGraphics.endFill();

            var choiceGraphics2 = this.game.add.graphics(30, answerText.y - 3);
            choiceGraphics2.lineStyle(2, 0xffffff);
            choiceGraphics2.drawRect(2, 0, 736, answerText.height + 1);

            choiceGraphics.inputEnabled = true;
            choiceGraphics.input.useHandCursor = true;
            choiceGraphics.isTopButton = true;
            choiceGraphics.borderGraphic = choiceGraphics2;

            choiceGraphics.events.onInputOver.add(this.onMouseOver, this);
            choiceGraphics.events.onInputOut.add(this.onMouseOut, this);
            choiceGraphics.events.onInputUp.add(this.onMouseUp, this);

            answerText.buttonGraphics = choiceGraphics;
            answerText.bringToTop();
        },
        onMouseOver: function (x) {
            if (x.isTopButton === true) {
                x.tint = 0xffd480;
                x.borderGraphic.tint = 0xffaa00;
            }
        },
        onMouseOut: function (x) {
            if (x.isTopButton === true) {
                x.tint = 0xfeffff;
                x.borderGraphic.tint = 0xfeffff;
            }
        },
        onMouseUp: function (x) {
            this.onChoice(x.question);
        },
        findResponse: function (name) {
            var response = null;
            _.each(this.conversation.responses, function (eachResponse, responseIndex) {
                if (eachResponse.name === name) {
                    response = eachResponse;
                    return false;
                }
            }, this);
            return response;
        },
        findQuestions: function (setName) {
            if (!setName) {
                return [];
            }
            var names = setName.split(",");
            var questions = [];
            _.each(names, function (eachName) {
                _.each(this.conversation.questions, function (eachQuestion) {
                    if (eachQuestion.name === eachName) {
                        questions.push(eachQuestion);
                    }
                }, this);
            }, this);
            return questions;
        },
        populateChoice: function () {

            var questions = [];
            if (this.currentResponse) {
                this.speechBubble.showResponse(this.currentResponse);
                if (this.currentResponse.triggers) {
                    questions = this.findQuestions(this.currentResponse.triggers);
                    var y = RESPONSE_START_Y;
                    // questions = _.shuffle(questions);
                    _.each(questions, function (eachQuestion, questionIndex) {
                        var prefix = eachQuestion.name;
                        this.buttons[questionIndex].visible = true;
                        this.buttons[questionIndex].setText(eachQuestion.text);
                        this.buttons[questionIndex].y = y;
                        y += this.buttons[questionIndex].height + marginY;
                        this.addTextAnswerBox(this.buttons[questionIndex]);
                        this.buttons[questionIndex].buttonGraphics.question = eachQuestion;
                        var found = false;
                        _.each( this.completed, function(eachCompleted) {
                            if( prefix.startsWith(eachCompleted) ) {
                                found = true;
                            }
                        }, this);
                        if (found) {
                            this.buttons[questionIndex].addColor(COLOR_VISITED_OPTION, 0);
                        } else {
                            this.buttons[questionIndex].addColor(COLOR_ACTIVE_OPTION, 0);
                        }
                    }, this);
                }
            }

            for (var loop = MAX_CHOICES - 1; loop >= questions.length; loop--) {
                this.buttons[loop].visible = false;
                if (this.buttons[loop].buttonGraphics) {
                    this.buttons[loop].buttonGraphics.borderGraphic.destroy();
                    this.buttons[loop].buttonGraphics.borderGraphic = null;
                    this.buttons[loop].buttonGraphics.destroy();
                    this.buttons[loop].buttonGraphics = null;
                }
            }

            if (this.currentResponse && this.currentResponse.text && this.currentResponse.text.audio) {
                var eventData = { "audio": this.currentResponse.text.audio};
                this.playAudio( eventData );
            }
        },
        destroy: function () {
            var temp;
            while (this.text.length > 0) {
                temp = this.text.shift();
                temp.destroy();
                temp = null;
            }
            while (this.buttons.length > 0) {
                temp = this.buttons.shift();
                if (temp.buttonGraphics) {
                    temp.buttonGraphics.borderGraphic.destroy();
                    temp.buttonGraphics.borderGraphic = null;
                    temp.buttonGraphics.destroy();
                    temp.buttonGraphics = null;
                }
                temp.destroy();
                temp = null;
            }
            this.bgImage.destroy();
            this.portrait.destroy();
            this.portraitLabel.destroy();
            this.speechBubble.destroy();
            this.chooseLabel.destroy();
            this.choiceGraphics.destroy();
            this.muteOnButton.destroy();
            this.muteOffButton.destroy();
            this.leaveButton.destroy();
            this.muteText.destroy();
            this.freeBaseActor();
        },
        onLeaveAction: function () {

            var eventData = {"text": "", "audio": this.theme.chat.exit};
            this.playAudio(eventData);

            var varSet = {};
            varSet[this.data.variable] = this.data.name;
            this.events.onGameChoice.dispatch(this.data.name, varSet);
        },
        onMuteAction: function () {
            var text;
            this.isMuted = !this.isMuted;
            if (this.isMuted) {
                text = "Audio Off";
            } else {
                text = "Audio On";
            }
            var varSet = {"mute_game": this.isMuted ? "mute_on" : "mute_off"};
            this.events.onGameChoice.dispatch(this.data.name, varSet);
            this.muteOnButton.visible = !this.isMuted;
            this.muteOffButton.visible = this.isMuted;
            this.muteText.setText(text);
        },
        onChoice: function (data) {
            var eventData = {"text": "", "audio": this.theme.chat.sound};
            this.playAudio(  eventData);


            if (data.branched) {
                this.completed.push(data.branched);
            }

            if (data.objectiveMet) {
                var varSet = {};
                varSet[data.objectiveMet] = "complete";
                this.events.onGameChoice.dispatch(this.data.name, varSet);
            }

            if (data.response) {
                this.currentResponse = this.findResponse(data.response);
                this.populateChoice();
            }

            if (data.value) {
                var valueSet = {};
                valueSet[this.data.variable] = data.value;
                this.events.onGameChoice.dispatch(this.data.name, valueSet);
            }

        }
    });

    module.exports = ChatActor;
}());

},{"../actor":"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene\\actors\\actor.js","./rounded-chat-rect":"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene\\actors\\iuc\\rounded-chat-rect.js","lodash":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\lodash\\index.js","loglevel":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\loglevel\\lib\\loglevel.js"}],"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene\\actors\\iuc\\actor-file-drag.js":[function(require,module,exports){
/**
 * @author George Frick
 * @version 1.0.0
 * @creation 07/01/2015
 * Copyright 2015 Children's Hospital
 * This software is the property of Children's Hospital.
 *
 * The custom file cabinet drag actor. Dragged around the screen, represented by image, has heading and text.
 *
 * Creating a decoration actor, a simple image:
 * {
 *     "name": "portrait1", // a unique identifier
 *     "type": "drag", // the required type.
 *     "images": { "normal" : "phone", // the images to use from the images section the theme.
 *                 "dragging" : "phone", // optional image while dragging
 *                 "overlap" : "phone", // optional image when overlapping.
 *     "key": "something", // an optional key to look under for the image(s).
 *     "location": [ x, y ],
 *     "variable": "string" // name of variable to be set when this is dragging/dropped/etc.
 * }
 *
 */
(function () {

    var _ = require('lodash'),
        log = require('loglevel'),
        Actor = require('../actor');

    var ItsUrChoiceDragActor = Actor.extend( {
        // constructor in parent
        getRequiredFields: function() {
            return [ "location", "images", "variable" ];
        },
        enterScene: function() {
            this.buildActor();
            this.isOverlapping = null;
            if( this.data.audio ) {
                this.playAudio( { audio: this.data.audio, key: null});
            }
        },
        buildActor: function() {
            var sprite = this.game.add.sprite( this.data.location[0], this.data.location[1],
                this.theme.textureKey, this.getImage( this.getFrame(), this.data.key));
            this.game.physics.enable(sprite, Phaser.Physics.ARCADE);
            sprite.body.setSize( 1, 1,  sprite.width/2, sprite.height/2);
            sprite.inputEnabled = true;
            sprite.input.pixelPerfectOver = true;
            sprite.input.enableDrag(false, true);
            sprite.events.onDragStop.add(this.itemDragStop, this);
            sprite.events.onDragStart.add(this.itemDragStart, this);
            sprite.events.onDragUpdate.add(function (sprite, pointer, x, y) {
                var pos = sprite.game.input.getLocalPosition(sprite.parent, pointer);
                    sprite.x = pos.x - sprite.width/2;
                    sprite.y = pos.y - sprite.height/2;

            }, sprite);
            sprite.origLoc = [ sprite.x, sprite.y];
            this.sprite = sprite;

            var fontHeaderName, fontBodyName;
            if( this.data.textData ) {
                var textData = this.data.textData;
                fontHeaderName = textData.fontHeading;
                fontBodyName = textData.fontBody;
                this.headerStyle = this.getFont((typeof fontHeaderName !== 'undefined') ? fontHeaderName : "questionText");
                this.bodyStyle = this.getFont((typeof fontBodyName !== 'undefined') ? fontBodyName : "questionText");

                this.headingSprite = this.game.add.text(8, 8, textData.heading, this.headerStyle);
                this.bodySprite = this.game.add.text(9, 35, textData.body, this.bodyStyle);

                this.sprite.addChild(this.headingSprite);
                this.sprite.addChild(this.bodySprite);
            }

            if( this.data.angle ) {
                this.sprite.angle = this.data.angle;
            }

        },
        returnToHome: function() {

        },
        itemDragStop: function () {
            this.isDragging = false;
            this.updateImage();
            var temp = {};
            temp["dropped"] = this.data.name;
            this.dispatchGameChoice(temp);
            // It will have been dropped, and possibly removed from scene.
            if( this.sprite ) {
                this.sprite.x = this.sprite.origLoc[0];
                this.sprite.y = this.sprite.origLoc[1];
            }
        },
        itemDragStart: function ( ) {
            if( this.data.audio ) {
                this.playAudio(  { audio: this.data.audio, key: null});
            }
            this.isDragging = true;
            this.updateImage();
            var temp = {};
            temp["dragging"] = this.data.name;
            this.dispatchGameChoice(temp);
            this.sprite.x = this.game.input.activePointer.position.x - 10;
            this.sprite.body.x = this.game.input.activePointer.position.x - 10;
            this.sprite.y = this.game.input.activePointer.position.y - 10;
            this.sprite.body.y = this.game.input.activePointer.position.y - 10;
        },
        getFrame: function(type) {
            var frameName = this.data.images.normal;
            if(type === "overlap" && this.data.images.overlap ) {
                frameName = this.data.images.overlap;
            } else if( (type === "dragging" || !frameName) && this.data.images.dragging ) {
                frameName = this.data.images.dragging;
            }
            return frameName;
        },
        updateImage: function() {
            var frame;
            if( this.headingSprite ) {
                this.headingSprite.visible = false;
                this.bodySprite.visible = false;
            }
            if( this.isOverlapping !== null ) {
                frame = this.getFrame("overlap");
            } else if( this.isDragging === true ) {
                frame = this.getFrame("dragging");
            } else {
                frame = this.getFrame("normal");
                if( this.headingSprite ) {
                    this.headingSprite.visible = true;
                    this.bodySprite.visible = true;
                }
            }
            this.sprite.frameName = this.getImage( frame, this.data.key);
            this.sprite.body.setSize( 1, 1,  this.sprite.width/2, this.sprite.height/2);
        },
        getBody: function() {
            if( this.sprite ) {
                return this.sprite.body;
            }
            return null;
        },
        onOverlapping: function( otherActor ) {
            if( this.isOverlapping === otherActor ) {
                return;
            }
            this.isOverlapping = otherActor;
            // change to overlapping image.
            this.updateImage();
        },
        destroy: function() {
            if ( this.sprite ) {
                this.sprite.input.disableDrag();
                this.sprite.body.destroy();
                this.sprite.events.onDragStop.removeAll();
                this.sprite.events.onDragStart.removeAll();
                this.sprite.events.onDragUpdate.removeAll();
                this.sprite.inputEnabled = false;
                this.sprite.destroy(true);
                this.sprite = null;
            }
            if( this.headingSprite ) {
                this.headingSprite.destroy();
                this.bodySprite.destroy();
            }
            this.style = null;
            this.freeBaseActor();
        }
    });

    module.exports = ItsUrChoiceDragActor;
}());

},{"../actor":"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene\\actors\\actor.js","lodash":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\lodash\\index.js","loglevel":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\loglevel\\lib\\loglevel.js"}],"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene\\actors\\iuc\\actor-map.js":[function(require,module,exports){
/**
 * @author George Frick
 * @version 1.0.0
 * @creation 07/01/2015
 * Copyright 2015 Children's Hospital
 * This software is the property of Children's Hospital.
 *
 * The map actor.
 *
 * Creating a map actor:
 *
 * {
 *     "name": "mandy", // a unique identifier
 *     "type": "iucmap", // the required type.
 *     "variable": "locationChoice"
 *     "night": true, // makes it night, defaults to false
 * }
 */
(function () {

    var _ = require('lodash'),
        log = require('loglevel'),
        Actor = require('../actor');
    var Base = require('basejs');

    var LargeBird = require('./map/actor-bird-large');
    var SmallBird = require('./map/actor-bird-small');
    var BasicCar = require('./map/actor-car-basic');
    var YellowCar = require('./map/actor-car-yellow');

    var EXTRA_WAIT_TIME = 8000;

     var MapActor = Actor.extend( {
        // constructor is now in base class!
        enterScene: function() {
            this.buildActor();
            this.blueFlag.animations.play('wave', 24, true);
            this.usFlag.animations.play('wave', 24, true);
            this.mapTimer.start();
        },
        getRequiredFields: function() {
            return [  "variable" ];
        },
        buildActor: function() {
            this.bg = this.game.add.sprite(0, 0, this.theme.textureKey, this.getImage("citymap"));
            this.houses = [];
            this.labels = [];
            _.each( this.theme.mapInfo.buildings, function( building, buildingIndex ) {
                this.houses.push(
                    this.game.add.sprite(building.x, building.y, this.theme.textureKey, building.image)
                );
                var label = building.hover;
                this.labels.push(
                    this.game.add.sprite(label.x, label.y, this.theme.textureKey, label.image)
                );
                this.houses[buildingIndex].clickValue = building.key;
                this.houses[buildingIndex].isBuilding = true;
                this.houses[buildingIndex].buildingIndex = buildingIndex;
                this.houses[buildingIndex].inputEnabled = true;
                this.houses[buildingIndex].input.useHandCursor = true;
                this.houses[buildingIndex].events.onInputOver.add(this.onMouseOver, this);
                this.houses[buildingIndex].events.onInputOut.add(this.onMouseOut, this);
                this.houses[buildingIndex].events.onInputUp.add(this.onMouseUp, this);
            }, this);

            this.blueFlag = this.game.add.sprite( 180, 70, this.theme.textureKey, this.theme.mapInfo.blueFlagFrames[0]);
            this.blueFlag.animations.add('wave', this.theme.mapInfo.blueFlagFrames );

            this.usFlag = this.game.add.sprite( 180, 38, this.theme.textureKey, this.theme.mapInfo.usFlagFrames[0]);
            this.usFlag.animations.add('wave', this.theme.mapInfo.usFlagFrames );

            this.smallBird = new SmallBird(this.game, this.theme);
            this.largeBird = new LargeBird(this.game, this.theme);
            this.randomCar = new BasicCar(this.game, this.theme);
            this.yellowCar = new YellowCar(this.game, this.theme);
            this.smallBird.events.playAudio.add(this.onSubSpeech, this);
            this.largeBird.events.playAudio.add(this.onSubSpeech, this);
            this.randomCar.events.playAudio.add(this.onSubSpeech, this);
            this.yellowCar.events.playAudio.add(this.onSubSpeech, this);

            this.fg = this.game.add.sprite(0, 0, this.theme.textureKey, this.getImage("citymapfg"));

            if( this.data.night === true ) {
                this.blockerSprite = new Phaser.Sprite(this.game, 0, 0);
                var graphics = new Phaser.Graphics(this.game, 0, 0);
                this.blockerSprite.addChild(graphics);
                graphics.beginFill( 0x000000, 0.35 );
                graphics.drawRect( 0, 0, this.game.world.width, this.game.world.height );
                graphics.endFill();
                this.blockerSprite.bringToTop();
                this.game.add.existing(this.blockerSprite);
            }

            _.each( this.labels, function( eachLabel ) {
                eachLabel.scale.setTo(0.80,0.80);
                eachLabel.bringToTop();
                eachLabel.visible = false;
            }, this);

            this.mapTimer = this.game.time.create(false);
            this.mapTimer.loop(EXTRA_WAIT_TIME, this.showExtraOnMap, this);
        },
         onSubSpeech: function(name, speech) {
             if( name && speech ) {
                 this.events.onGameSpeech.dispatch(name, speech);
             }
         },
         onGameSpeech: function(speech) {
            // nothing.
         },
         showExtraOnMap: function () {
             var randomValue = this.game.rnd.integerInRange(0, 4);
             switch (randomValue) {
                 case 0: {
                     this.largeBird.play();
                     break;
                 }
                 default:
                 case 1: {
                     this.smallBird.play();
                     break;
                 }
                 case 2: {
                     this.yellowCar.play();
                     break;
                 }
                 case 4:
                 case 3: {
                     this.randomCar.play();
                     break;
                 }
             }
         },
         onMouseOver: function (x) {
             if (x.isBuilding === true) {
                 this.labels[x.buildingIndex].visible = true;
             }
         },
         onMouseOut: function (x) {
             if (x.isBuilding === true) {
                 this.labels[x.buildingIndex].visible = false;
             }
         },
         onMouseUp: function (x) {
             if (x.isBuilding === true) {
                 var varSet = {};
                 varSet[this.data.variable] = x.clickValue;
                 this.events.onGameChoice.dispatch( this.data.name, varSet );
             }
             // this.onChoice(x.question);
         },
        destroy: function() {
            if ( this.bg ) {
                this.bg.destroy();
            }
            if ( this.fg ) {
                this.fg.destroy();
            }
            var destroyBuilding = this.houses.pop();
            while( destroyBuilding ) {
                destroyBuilding.destroy();
                destroyBuilding = this.houses.pop();
            }
            this.houses = null;
            var destroyLabel = this.labels.pop();
            while( destroyLabel ) {
                destroyLabel.destroy();
                destroyLabel = this.labels.pop();
            }
            // var destroyTween = this.allTweens.pop();
            // while( destroyTween ) {
            //     destroyTween.stop();
            //     this.game.tweens.remove(destroyTween);
            // }
            this.game.tweens.removeAll();
            this.labels = null;
            this.blueFlag.destroy();
            this.usFlag.destroy();
            this.smallBird.destroy();
            this.largeBird.destroy();
            this.mapTimer.stop();
            this.mapTimer.destroy();
            this.yellowCar.destroy();
            this.randomCar.destroy();
            if( this.data.night === true ) {
                this.blockerSprite.destroy(true);
            }
            this.freeBaseActor();
        }
    });

    module.exports = MapActor;
}());

},{"../actor":"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene\\actors\\actor.js","./map/actor-bird-large":"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene\\actors\\iuc\\map\\actor-bird-large.js","./map/actor-bird-small":"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene\\actors\\iuc\\map\\actor-bird-small.js","./map/actor-car-basic":"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene\\actors\\iuc\\map\\actor-car-basic.js","./map/actor-car-yellow":"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene\\actors\\iuc\\map\\actor-car-yellow.js","basejs":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\basejs\\Base.js","lodash":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\lodash\\index.js","loglevel":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\loglevel\\lib\\loglevel.js"}],"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene\\actors\\iuc\\actor-phone-button.js":[function(require,module,exports){
/**
 * @author George Frick
 * @version 1.0.0
 * @creation 07/01/2015
 * Copyright 2015 Children's Hospital
 * This software is the property of Children's Hospital.
 *
 * The phone button actor. This actor is used for opening the phone and showing phone alerts.
 *
 * Creating a phone button actor:
 * {
 *     "name": "phone1", // a unique identifier
 *     "type": "iucphone-button", // the required type.*
 *     "location": [ x, y ],
 *     "alert": any value // phone will alert immediately.
 * }
 *
 */
(function () {

    var Actor = require('../actor');

    var ItsUrChoicePhoneButtonActor = Actor.extend( {
        // constructor in parent.
        getRequiredFields: function() {
            return [ "location" ];
        },
        enterScene: function() {
            this.isAlerted = false;
            this.buildActor();
            if( this.data.alert ) {
                this.onGameChoice( { 'phone_alert': this.data.alert });
            }
        },
        buildActor: function() {
            this.buttonAnimation = null;
            this.button = this.game.add.button( this.data.location[0], this.data.location[1] , this.theme.textureKey,
                this.onPointerUp, this,
                this.theme.buttons.phone.over, this.theme.buttons.phone.out,
                this.theme.buttons.phone.down, this.theme.buttons.phone.up);
            this.button.inputEnabled = true;
        },
        /**
         * @param choice
         */
        onGameChoice: function( choice ) {
           if( choice['phone_alert'] ) {
                this.isAlerted = true;
                this.playAlert();
           }
        },
        /**
         * Play the ring animation and current ring tone.
         */
        playAlert: function() {
            if( this.buttonAnimation === null) {
                this.buttonAnimation = this.button.animations.add('ring', this.theme.phone.alerts );
            }
            this.button.animations.play('ring', 24);
            var eventData = {"text": "", "audio" : this.theme.phone.ringtone, "priority": "sfx" };
            this.playAudio(  eventData);
        },
        /**
         * When the player clicks the phone button, stop any alert and then send out the game choice.
         * @param event
         */
        onPointerUp: function( event ) {
            this.isAlerted = false;
            this.button.animations.stop();

            var varSet = {};
            varSet['show_cell_phone'] = this.data.name;
            this.events.onGameChoice.dispatch( this.data.name, varSet );
        },
        destroy: function() {
            if ( this.button ) {
                this.button.destroy();
            }
            this.freeBaseActor();
        }
    });

    module.exports = ItsUrChoicePhoneButtonActor;
}());

},{"../actor":"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene\\actors\\actor.js"}],"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene\\actors\\iuc\\actor-phone.js":[function(require,module,exports){
/**
 * @author George Frick
 * @version 1.0.0
 * @creation 09/22/2015
 * Copyright 2015 Children's Hospital
 * This software is the property of Children's Hospital.
 *
 * This is a very specialized actor for use with Welcome To Westpost and Its UR Choice! it shows a cell phone that
 * sends out special events, responds to events, and can interact with the user by drawing over the scene.
 * The user can interact with the phone, which must block user input.
 *
 *  {
 *     "name": "phone_1",
 *     "type": "iucphone",
 *     "helpVariable": "current_help_message",
 *     "objectives": {
 *       "obj1": "Explore Westport",
 *       "obj2": "Try out your cell phone and journal."
 *     },
 *     disablePower: true|false, // defaults to false, can keep the player from closing the phone.
 *     demoMode: true|false // defaults to false. Shows phone smaller on left side of screen.
 *  }
 *
 *
 */
(function () {
    var _ = require('lodash'),
        log = require('loglevel'),
        Actor = require('../actor'),
        moment = require('moment');

    var SCREEN_X = 258;
    var SCREEN_END_X = 712;
    var SCREEN_Y = 32;
    var SCREEN_END_Y = 317;

    var ItsUrChoicePhone = Actor.extend({
        // constructor in parent.
        getRequiredFields: function() {
            return [ "objectives", "helpVariable", "objectiveAudio", "helpAudio"]; // no required fields
        },
        enterScene: function () {
            this.fontHeader = this.getFont('phoneHeader');
            this.fontBody = this.getFont('phoneBody');
            this.isInitialized = false;
            this.isMuted = this.game.sound.mute;
            this.objectiveMarkers = {};

            if( this.data.open ) {
                this.showPhone();
            }
        },
        onGameChoice: function( choice ) {
            if( choice['show_cell_phone'] ) {
                if( this.isInitialized && this.phoneGroup.visible ) {
                    this.onClickClose();
                } else {
                    this.showPhone();
                }
            }
        },
        dispatch: function (data, value) {
            var varSet = {};
            varSet[data.variable] = value;
            this.events.onGameChoice.dispatch(this.data.name, varSet);
        },
        onClickHelp: function () {
            var helpText = this.modelInterface.getValue(this.data.helpVariable);
            this.hideObjectives();
            var eventData = {"text": "", "audio" : this.theme.phone.buttonSound };
            this.playAudio( eventData);
            this.events.onGameChoice.dispatch(this.data.name, {"phone": "help"});
            this.showHelp( helpText);
        },
        onClickMute: function () {
            this.isMuted = !this.isMuted;

            var eventData = {"text": "", "audio" : this.theme.phone.buttonSound , "priority": "sfx"};
            this.playAudio(  eventData);

            var varSet = {"mute_game" : this.isMuted ? "mute_on" : "mute_off"};
            this.events.onGameChoice.dispatch( this.data.name, varSet );

            if( this.isMuted ) {
                this.muteIcon.animations.play('vibrate', 24, true);
                this.muteOnButton.visible = false;
                this.muteOffButton.visible = true;
            } else {
                this.muteOnButton.visible = true;
                this.muteOffButton.visible = false;
                this.muteIcon.animations.stop();
                this.muteIcon.frameName = this.theme.phone.ringMode.muteOff;
            }
        },
        onClickObjectives: function() {
            this.hideHelp();
            var eventData = {"text": "", "audio" : this.theme.phone.buttonSound , "priority": "sfx"};
            this.playAudio(  eventData);
            this.showObjectives(this.data.objectives);
        },
        onClickClose: function () {
            if( this.data.disablePower === true || this.data.disablePower === "true") {
                return; // close is turned off by this feature.
            }
            this.phoneGroup.visible = false;
            this.helpGroup.visible = false;
            this.objectivesGroup.visible = false;
            this.blockingSprite.visible = false;
            var eventData = {"text": "", "audio" : this.theme.phone.buttonSound , "priority": "sfx"};
            this.playAudio(  eventData);
            var eventData = {"text": "", "audio" : this.theme.phone.buttonSound , "priority": "stopall"};
            this.playAudio(  eventData);
            this.events.onGameChoice.dispatch(this.data.name, {"phone": "closed"});
        },
        createPhoneButton: function (key, callback, context) {
            var button = new Phaser.Button(this.game, 0, 0, this.theme.textureKey,
                callback, context,
                this.theme.phone.icons[key][1], this.theme.phone.icons[key][0],
                this.theme.phone.icons[key][1], this.theme.phone.icons[key][0]);
            button.input.useHandCursor = true;
            return button;
        },
        /**
         * Showing the phone is a bit complicated. Everything has to be brought to the top in
         * reverse order.
         */
        showPhone: function () {
            if( this.isInitialized === false ) {
                this.initHomeScreenGroup();
                this.initHelpWindowGroup();
                this.initObjectivesWindowGroup();
                if( this.data.demoMode === true || this.data.demoMode === "true") {
                    this.initDemoView();
                } else {
                    this.initBlockingGroup();
                }
            }
            this.phoneGroup.visible = true;
            if( this.blockingSprite ) {
                this.blockingSprite.visible = true;
                this.blockingSprite.bringToTop();
            }
            this.game.world.bringToTop(this.phoneGroup);
            this.game.world.bringToTop(this.helpGroup);
            this.game.world.bringToTop(this.objectivesGroup);
            this.events.onGameChoice.dispatch(this.data.name, {"phone": "open"});
            if( this.isMuted ) {
                this.muteIcon.animations.play('vibrate', 24, true);
                this.muteOnButton.visible = false;
                this.muteOffButton.visible = true;
            } else {
                this.muteOnButton.visible = true;
                this.muteOffButton.visible = false;
                this.muteIcon.animations.stop();
                this.muteIcon.frameName = this.theme.phone.ringMode.muteOff;
            }
            _.each( this.data.objectives, function( objective, objectiveKey) {
                var completed = this.modelInterface.getValue("$" + objectiveKey);
                if( completed === true || completed === "true" || completed === "complete" ) {
                    this.objectiveMarkers[objectiveKey].frameName = this.theme.phone.checkBoxes[1];
                }
            }, this);

            var eventData = {"text": "", "audio" : this.data.objectiveAudio };
            this.playAudio(  eventData);
        },
        initDemoView: function() {
            this.phoneGroup.scale.set( 0.5, 0.5);
            this.phoneGroup.x = 295;
            this.phoneGroup.y = 150;
            this.helpGroup.y += 145;
            this.helpGroup.x -= 35;
            this.objectivesGroup.y += 145;
            this.objectivesGroup.x -= 35;
            this.helpGroup.scale.set(0.5, 0.5);
            this.objectivesGroup.scale.set(0.5, 0.5);
        },
        /**
         * Create the main screen, including all of the buttons.
         */
        initHomeScreenGroup: function() {
            this.phoneGroup = this.game.add.group();
            this.phoneGroup.x = this.game.world.centerX;
            var buttonY = 365;

            this.phoneBg = new Phaser.Sprite(this.game, 0, 0, this.theme.textureKey, this.theme.phone.background);
            this.phoneBg.anchor.setTo(0.5, 0.0);
            this.phoneGroup.add(this.phoneBg);
            
            this.muteOnButton = this.createPhoneButton('muteOn', this.onClickMute, this, 2);
            this.phoneGroup.add(this.muteOnButton);
            this.muteOnButton.x = -100;
            this.muteOnButton.y = buttonY;
            this.muteOnButton.anchor.setTo(0.5, 0);
            this.muteOnButton.bringToTop();
            
            this.muteOffButton = this.createPhoneButton('muteOff', this.onClickMute, this, 2);
            this.phoneGroup.add(this.muteOffButton);
            this.muteOffButton.x = -100;
            this.muteOffButton.y = buttonY;
            this.muteOffButton.anchor.setTo(0.5, 0);
            this.muteOffButton.bringToTop();

            this.muteIcon = new Phaser.Sprite(this.game, 0, SCREEN_Y + 2, this.theme.textureKey, this.theme.phone.ringMode.muteOff);
            this.phoneGroup.add(this.muteIcon);
            this.muteIcon.animations.add('vibrate', this.theme.phone.ringMode.muteOn );
            this.muteIcon.x = 220;
            this.muteIcon.bringToTop();

            this.helpButton = this.createPhoneButton('help', this.onClickHelp, this, 2);
            this.phoneGroup.add(this.helpButton);
            this.helpButton.x = 10;
            this.helpButton.y = buttonY;
            this.helpButton.anchor.setTo(0.5, 0);
            this.helpButton.bringToTop();
            
            this.objectivesButton = this.createPhoneButton('objectives', this.onClickObjectives, this, 2);
            this.phoneGroup.add(this.objectivesButton);
            this.objectivesButton.x = 150;
            this.objectivesButton.y = buttonY;
            this.objectivesButton.anchor.setTo(0.5, 0);
            this.objectivesButton.bringToTop();
            
            this.closeButton = this.createPhoneButton('power', this.onClickClose, this, 2);
            this.phoneGroup.add(this.closeButton);
            this.closeButton.x = 280;
            this.closeButton.y = buttonY;
            this.closeButton.anchor.setTo(0.5, 0);
            this.closeButton.bringToTop();
            this.phoneGroup.visible = false;
        },
        initBlockingGroup: function() {
            this.blockingSprite = this.createBlockingSprite();
            this.game.add.existing(this.blockingSprite);
            this.blockingSprite.visible = false;
        },
        initHelpWindowGroup: function () {
            var width = SCREEN_END_X - SCREEN_X;
            var marginX = 5;

            this.helpGroup = this.game.add.group();
            this.helpGroup.x = SCREEN_X;
            this.helpGroup.y = SCREEN_Y;

            var headingText = new Phaser.Text(this.game, marginX, 10, "Help", this.fontHeader);
            this.fontBody.wordWrap = true;
            this.fontBody.wordWrapWidth = width * 0.95;
            this.helpText = new Phaser.Text(this.game, marginX, headingText.height + 15, "BODY TEST", this.fontBody);

            this.helpGroup.add(headingText);
            this.helpGroup.add(this.helpText);

            this.hideHelp();
        },
        showHelp: function ( body) {
            this.helpGroup.visible = true;
            this.helpText.inputEnabled = false;
            this.helpText.setText( body );
            var eventData = {"text": "", "audio" : this.data.helpAudio };
            this.playAudio( eventData);
        },
        hideHelp: function () {
            this.helpGroup.visible = false;
        },
        initObjectivesWindowGroup: function () {
            var width = SCREEN_END_X - SCREEN_X;
            var marginX = 5, marginY = 10;

            this.objectivesGroup = this.game.add.group();
            this.objectivesGroup.x = SCREEN_X;
            this.objectivesGroup.y = SCREEN_Y;

            var headingText = new Phaser.Text(this.game, marginX, marginY, "Objectives", this.fontHeader);
            this.objectivesGroup.add(headingText);

            // list out the objectives, with icons.
            // update the icons when the phone is shown
            // in the onGameChoice, watch for objectives.
            var eachTextItem;
            var eachCheckBox;
            var currentY = headingText.y + headingText.height + marginY;

            _.each( this.data.objectives, function( objective, objectiveKey) {
                eachCheckBox = new Phaser.Sprite(this.game, 0, currentY - 2, this.theme.textureKey, this.theme.phone.checkBoxes[0]);
                eachTextItem = new Phaser.Text(this.game, eachCheckBox.width + marginX, currentY, this.modelInterface.getValue(objective), this.fontBody);
                currentY += eachTextItem.height + marginY;
                this.objectivesGroup.add(eachCheckBox);
                this.objectivesGroup.add(eachTextItem);
                this.objectiveMarkers[objectiveKey] = eachCheckBox;
            }, this);
        },
        showObjectives: function ( objectives ) {
            this.objectivesGroup.visible = true;
            var eventData = {"text": "", "audio" : this.data.objectiveAudio };
            this.playAudio( eventData);
        },
        hideObjectives: function () {
            this.objectivesGroup.visible = false;
        },
        destroy: function () {
            this.fontHeader = null;
            this.fontBody = null;
            if ( this.phoneGroup ) {
                this.phoneGroup.destroy();
            }
            if ( this.helpGroup ) {
                this.helpGroup.destroy(true);
            }
            if ( this.objectivesGroup ) {
                this.objectivesGroup.destroy(true);
            }
            if ( this.blockingSprite ) {
                this.blockingSprite.destroy(true);
            }

            this.freeBaseActor();
        }
    });

    module.exports = ItsUrChoicePhone;
}());

},{"../actor":"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene\\actors\\actor.js","lodash":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\lodash\\index.js","loglevel":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\loglevel\\lib\\loglevel.js","moment":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\moment\\moment.js"}],"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene\\actors\\iuc\\actor-popup.js":[function(require,module,exports){
/**
 * @author George Frick
 * @version 1.0.0
 * @creation 07/01/2015
 * Copyright 2015 Children's Hospital
 * This software is the property of Children's Hospital.
 *
 * The IUC popup actor. Pops up an alert, that does not block the screen. Alert can be closed.
 *
 * Creating a phone button actor:
 * {
 *     "name": "popup11", // a unique identifier
 *     "type": "iucpopup", // the required type.*
 *     "heading": "This area is closed.",
 *     "text": "We're busy booking someone. Come back another day.",
 *     "background": "myimage",
 *     "variable": "x"
 * }
 *
 */
(function () {

    var Actor = require('../actor');

    var winX = 200, winY = 250;
    var closeX = 550, closeY = 300;

    var ItsUrChoicePopupActor = Actor.extend( {
        // constructor in parent.
        getRequiredFields: function() {
            return [ "heading", "text", "variable" ];
        },
        enterScene: function() {
            this.buildActor();
        },
        buildActor: function() {
            this.popupGroup = this.game.add.group();
            this.popupGroup.x = winX;
            this.popupGroup.y = winY;

            var bgFrame = this.theme.popup.background;
            if( this.data.background ) {
                bgFrame = this.getImage(this.data.background, this.data.key);
            }
            this.bg = this.game.add.sprite( 0, 0, this.theme.textureKey, bgFrame );
            this.popupGroup.add(this.bg);

            this.button = this.game.add.button( 0, 9 , this.theme.textureKey,
                this.onPointerUp, this,
                this.theme.popup.closeButton[0], this.theme.popup.closeButton[1],
                this.theme.popup.closeButton[2], this.theme.popup.closeButton[3] );
            this.popupGroup.add(this.button);
            this.button.x = this.bg.width - this.button.width - 8;


            var headingStyle = this.getFont( "popupHeading");
            var bodyStyle = this.getFont( "popupBody");

            if( this.data.fontBody ) {
                bodyStyle = this.getFont(this.data.fontBody);
            }

            if( this.data.fontHeading ) {
                headingStyle = this.getFont(this.data.fontHeading);
            }

            var contentBodyY = 50;
            if( this.data.heading ) {
                this.heading = this.game.add.text(10, 12, this.data.heading, headingStyle);
                this.popupGroup.add(this.heading);
                contentBodyY = 65;
            }
            this.body = this.game.add.text( 15, contentBodyY, this.data.text, bodyStyle);
            this.popupGroup.add(this.body);

            this.button.inputEnabled = true;
        },
        /**
         * Any game choice during an alert will cause the phone to 'vibrate' on screen.
         * @param choice
         */
        onGameChoice: function( choice ) { },
        onPointerUp: function( event ) {
                     var varSet = {};
            varSet[this.data.variable] = this.data.name;
            this.events.onGameChoice.dispatch( this.data.name, varSet );
        },
        destroy: function() {
            this.popupGroup.destroy(true);
            this.freeBaseActor();
        }
    });

    module.exports = ItsUrChoicePopupActor;
}());

},{"../actor":"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene\\actors\\actor.js"}],"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene\\actors\\iuc\\actor-window.js":[function(require,module,exports){
/**
 * @author George Frick
 * @version 1.0.0
 * @creation 07/01/2015
 * Copyright 2015 Children's Hospital
 * This software is the property of Children's Hospital.
 *
 * The IUC popup actor. Pops up an alert, that does not block the screen. Alert can be closed.
 *
 * Creating a phone button actor:
 * {
 *     "name": "window1", // a unique identifier
 *     "type": "iucwindow", // the required type.*
 *     "heading": "Day 3 Complete",
 *     "audio": "audiokey", // Play when window is initiall opened, or maximimized from min.
 *     "text": "We're busy booking someone. Come back another day.",
 *     "variable": "x",
 *     "showClose": false|true, // optional, defaults to false.
 * }
 *
 */
(function () {

    var Actor = require('../actor');

    var MAXIMIZE = "MAX";
    var MINIMIZE = "MIN";
    var CLOSE = "CLOSE";

    var ItsUrChoiceWindowActor = Actor.extend( {
        // constructor in parent.
        getRequiredFields: function() {
            return [ "heading", "text" ];
        },
        enterScene: function() {
            this.buildActor();
            this.minimize();
        },
        buildActor: function() {
            this.windowGroup = this.game.add.group();
            this.windowGroup.x = 0;
            this.windowGroup.y = 0;

            this.blockerSprite = new Phaser.Sprite(this.game, 0, 0);
            var graphics = new Phaser.Graphics(this.game, 0, 0);
            this.blockerSprite.addChild(graphics);
            graphics.beginFill( 0xEFEFEF, 0.75 );
            graphics.drawRect( 0, 0, this.game.world.width, this.game.world.height );
            graphics.endFill();
            this.blockerSprite.inputEnabled = true;
            this.blockerSprite.bringToTop();
            this.windowGroup.add(this.blockerSprite);

            var bgFrame = this.theme.window.background;
            if( this.data.background ) {
                bgFrame = this.getImage(this.data.background, this.data.key);
            }
            this.bg = this.game.add.sprite( 0, 0, this.theme.textureKey, bgFrame );
            this.windowGroup.add(this.bg);

            this.logo = this.game.add.sprite( this.game.world.width - 25, this.game.world.height - 25,
                this.theme.textureKey, this.theme.window.logo );
            this.logo.anchor.setTo( 1.0, 1.0);
            this.windowGroup.add(this.logo);

            var minButtonY = 20;
            if( this.data.showClose ) {
                this.closeButton = this.game.add.button(this.game.world.width - 25, 20, this.theme.textureKey,
                    this.onCloseButton, this,
                    this.theme.window.closeButton[0], this.theme.window.closeButton[1],
                    this.theme.window.closeButton[2], this.theme.window.closeButton[3]);
                this.windowGroup.add(this.closeButton);
                this.closeButton.anchor.setTo( 1.0, 0);
                this.closeButton.inputEnabled = true;
                minButtonY += this.closeButton.y + this.closeButton.height;
            }

            this.minimizeButton = this.game.add.button( this.game.world.width - 25,
                minButtonY, this.theme.textureKey,
                this.onMinimizeButton, this,
                this.theme.window.minimizeButton[0], this.theme.window.minimizeButton[1],
                this.theme.window.minimizeButton[2], this.theme.window.minimizeButton[3] );
            this.windowGroup.add(this.minimizeButton);
            this.minimizeButton.anchor.setTo( 1.0, 0);

            this.maximizeButton = this.game.add.button( this.game.world.width,
                0, this.theme.textureKey, this.onMaximizeButton, this,
                this.theme.window.maximizeButton[0], this.theme.window.maximizeButton[1],
                this.theme.window.maximizeButton[2], this.theme.window.maximizeButton[3] );
            this.windowGroup.add(this.maximizeButton);
            this.maximizeButton.anchor.setTo( 1.0, 0);
            this.maximizeButton.visible = false;

            var headingStyle = this.getFont( "windowHeading");
            var bodyStyle = this.getFont( "windowBody");

            this.heading = this.game.add.text( this.game.world.width / 2, 120, this.data.heading, headingStyle);
            this.heading.anchor.setTo( 0.5, 0.5);
            this.windowGroup.add(this.heading);

            this.body = this.game.add.text( this.game.world.width / 2, 160, this.data.text, bodyStyle);
            this.body.anchor.setTo( 0.5, 0 );
            this.windowGroup.add(this.body);

            this.minimizeButton.inputEnabled = true;

        },
        onGameChoice: function( choice ) { },
        onCloseButton: function () {
            this.dispatch(CLOSE);
        },
        onMinimizeButton: function () {
            this.dispatch(MINIMIZE);
            this.minimize();
        },
        onMaximizeButton: function () {
            this.dispatch(MAXIMIZE);
            this.maximize();
        },
        minimize: function() {
            this.toggleContent(false);
            this.onMinTweenComplete();
        },
        onMinTweenComplete: function() {
            this.bg.visible = false;
            this.maximizeButton.visible = true;
            if( this.data.audio ) {
                this.playAudio({ audio: this.data.audio, key: null, "priority": "stop"});
            }
        },
        maximize: function() {
            this.maximizeButton.visible = false;
            this.game.world.bringToTop(this.windowGroup);
            this.bg.visible = true;
            this.onMaxTweenComplete();
        },
        onMaxTweenComplete: function() {
            this.toggleContent(true);
            if( this.data.audio ) {
                this.playAudio(  { audio: this.data.audio, key: null});
            }
        },
        toggleContent: function( visible ) {
            this.heading.visible = visible;
            this.body.visible = visible;
            this.logo.visible = visible;
            if( this.data.closeButton ) {
                this.closeButton.visible = visible;
            }
            this.minimizeButton.visible = visible;
            this.blockerSprite.visible = visible;
        },
        dispatch: function (value) {
            var varSet = {};
            varSet[this.data.variable] = value;
            this.events.onGameChoice.dispatch(this.data.name, varSet);
        },
        destroy: function () {
            if( this.windowGroup ) {
                this.windowGroup.destroy(true);
            }
            this.freeBaseActor();
        }
    });

    module.exports = ItsUrChoiceWindowActor;
}());

},{"../actor":"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene\\actors\\actor.js"}],"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene\\actors\\iuc\\map\\actor-bird-large.js":[function(require,module,exports){
/**
 * @author George Frick
 */
(function () {

    var _ = require('lodash'),
        log = require('loglevel');
    var Base = require('basejs');

    var LargeBird = Base.extend({
        constructor: function(game, theme) {
            this.game = game;
            this.theme = theme;
            this.startLoc = [ -150, 100];
            this.endLoc = [ 850, 235];
            this.isPlaying = false;

            this.sprite = this.game.add.sprite( this.startLoc[0], this.startLoc[1] , this.theme.textureKey, this.theme.mapInfo.largeBirdFrames[0]);
            this.sprite.animations.add('fly', this.theme.mapInfo.largeBirdFrames );
            this.sprite.scale.setTo(0.3,0.3);
            this.tween1 = this.game.add.tween(this.sprite).to( { x: this.endLoc[0] }, 4000, 'Linear', false);
            this.tween2 = this.game.add.tween(this.sprite).to( { y: this.endLoc[1] }, 3500, Phaser.Easing.Cubic.In, false);
            this.tween1.onComplete.add(function() {
                this.isPlaying = false;
            }, this);

            this.events = {
                playAudio: new Phaser.Signal()
            };
        },
        play: function() {
            if( this.isPlaying ) {
                return;
            }
            this.isPlaying = true;
            var crowSound = this.game.rnd.integerInRange(1, 100);
            var whichSound = 'crow';
            if( crowSound > 30 ) {
                whichSound += this.game.rnd.integerInRange(1, 2);
                this.events.playAudio.dispatch("LargeBird", {text:"", audio: whichSound, key: null, priority: 'low'});
            }
            this.sprite.x = this.startLoc[0];
            this.sprite.y = this.startLoc[1];
            this.sprite.animations.play('fly', 14, true);
            this.tween1.start();
            this.tween2.start();
        },
        destroy: function() {
            this.sprite.destroy();
            if (this.events.playAudio) {
                this.events.playAudio.removeAll();
                this.events.playAudio.dispose();
            }
        }
    });

    module.exports = LargeBird;
}());

},{"basejs":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\basejs\\Base.js","lodash":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\lodash\\index.js","loglevel":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\loglevel\\lib\\loglevel.js"}],"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene\\actors\\iuc\\map\\actor-bird-small.js":[function(require,module,exports){
/**
 * @author George Frick
 */
(function () {

    var _ = require('lodash'),
        log = require('loglevel');
    var Base = require('basejs');

    var SmallBird = Base.extend({
        constructor: function(game, theme) {
            this.game = game;
            this.theme = theme;
            this.isPlaying = false;

            this.startLoc = [ 805, 25];
            this.endLoc = [ -100, 75];

            this.sprite = this.game.add.sprite( this.startLoc[0], this.startLoc[1] , this.theme.textureKey, this.theme.mapInfo.smallBirdFrames[0]);
            this.sprite.animations.add('fly', this.theme.mapInfo.smallBirdFrames );

            this.tween1 = this.game.add.tween(this.sprite).to( { x: this.endLoc[0] }, 3000, 'Linear', false);
            this.tween2 = this.game.add.tween(this.sprite).to( { y: this.endLoc[1] }, 3000, Phaser.Easing.Cubic.InOut, false);
            this.tween1.onComplete.add(function() {
                this.isPlaying = false;
            }, this);

            this.sprite.animations.play('fly', 14, true);
            this.events = {
                playAudio: new Phaser.Signal()
            };
        },
        play: function() {
            if( this.isPlaying ) {
                return;
            }
            this.isPlaying = true;
            var birdSound = this.game.rnd.integerInRange(1, 100);
            var whichSound = 'birdChirp';
            if( birdSound > 30 ) {
                whichSound += this.game.rnd.integerInRange(1, 4);
                this.events.playAudio.dispatch("smallBird", {text:"", audio: whichSound, key: null, priority: 'low'});
            }
            this.sprite.x = this.startLoc[0];
            this.sprite.y = this.startLoc[1];
            this.tween1.start();
            this.tween2.start();

        },
        destroy: function() {
            this.sprite.destroy();
            if (this.events.playAudio) {
                this.events.playAudio.removeAll();
                this.events.playAudio.dispose();
            }
        }
    });

    module.exports = SmallBird;
}());

},{"basejs":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\basejs\\Base.js","lodash":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\lodash\\index.js","loglevel":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\loglevel\\lib\\loglevel.js"}],"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene\\actors\\iuc\\map\\actor-car-basic.js":[function(require,module,exports){
/**
 * @author George Frick
 */
(function () {

    var _ = require('lodash'),
        log = require('loglevel');
    var Base = require('basejs');

    var RANDOM_CAR_Y = [ 239, 236, 221, 210 ];
    var RANDOM_CAR_X = [ 801, 660, 277, -50 ];

    var LargeBird = Base.extend({
        constructor: function(game, theme) {
            this.game = game;
            this.theme = theme;
            this.isPlaying = false;

            this.randomCar = this.game.add.sprite( 801, 70, this.theme.textureKey, this.theme.mapInfo.vehicles[0]);
            this.randomCar.scale.setTo(0.8, 0.8);
            this.randomCar.anchor.setTo( 0, 1.0);
            this.randomCar.visible = false;

            this.randomCarTween1  = this.game.add.tween(this.randomCar).to( { y: RANDOM_CAR_Y[1], x: RANDOM_CAR_X[1] }, 5500,  Phaser.Easing.Quintic.Out, false);

            this.randomCarTween2  = this.game.add.tween(this.randomCar).to( { y: RANDOM_CAR_Y[2], x: RANDOM_CAR_X[2] }, 7000,  Phaser.Easing.Quintic.InOut, false, 2000);
            this.randomCarTween1.chain(this.randomCarTween2);

            this.randomCarTween3  = this.game.add.tween(this.randomCar).to( { y: RANDOM_CAR_Y[3], x: RANDOM_CAR_X[3] }, 4000,  "Linear", false, 2000);
            this.randomCarTween2.chain(this.randomCarTween3);
            this.randomCarTween3.onComplete.add(function() {
                this.isPlaying = false;
            }, this);

            this.randomCarTween1b  = this.game.add.tween(this.randomCar).to( { y: RANDOM_CAR_Y[1], x: RANDOM_CAR_X[1] }, 6000,  Phaser.Easing.Quintic.Out, false);
            this.randomCarTween2b  = this.game.add.tween(this.randomCar).to( { y: RANDOM_CAR_Y[3], x: RANDOM_CAR_X[3] }, 9000,  "Linear", false, 2000);
            this.randomCarTween1b.chain(this.randomCarTween2b);
            this.randomCarTween2b.onComplete.add(function() {
                this.isPlaying = false;
            }, this);

            this.events = {
                playAudio: new Phaser.Signal()
            };
        },
        play: function() {
            if( this.isPlaying ) {
                return;
            }
            this.isPlaying = true;
            this.randomCar.y = RANDOM_CAR_Y[0];
            this.randomCar.x = RANDOM_CAR_X[0];
            this.randomCar.frameName = this.theme.mapInfo.vehicles[this.game.rnd.integerInRange(0, 7)];
            this.randomCar.visible = true;

            if( this.game.rnd.integerInRange(1, 3) === 2 ) {
                this.randomCarTween1b.start();
            } else {
                this.randomCarTween1.start();
            }
        },
        destroy: function() {
            this.randomCar.destroy();
            if (this.events.playAudio) {
                this.events.playAudio.removeAll();
                this.events.playAudio.dispose();
            }
        }
    });

    module.exports = LargeBird;
}());

},{"basejs":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\basejs\\Base.js","lodash":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\lodash\\index.js","loglevel":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\loglevel\\lib\\loglevel.js"}],"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene\\actors\\iuc\\map\\actor-car-yellow.js":[function(require,module,exports){
/**
 * @author George Frick
 */
(function () {

    var _ = require('lodash'),
        log = require('loglevel');
    var Base = require('basejs');

    // This defines the starting point and then 4 stopping points for the yellow car.
    var YELLOW_CAR_Y = [ 650, 264, 245, 237, 255 ];
    var YELLOW_CAR_X = [ 5, 569, 592, 607, 850 ];

    var YellowCar = Base.extend({
        constructor: function(game, theme) {
            this.game = game;
            this.theme = theme;
            this.isPlaying = false;

            this.yellowCar = this.game.add.sprite( 180, 70, this.theme.textureKey, this.theme.mapInfo.yellowCarFrames[0]);
            this.yellowCar.visible = false;
            this.yellowCar.anchor.setTo(0.5, 0.5);

            this.tweenScale = this.game.add.tween(this.yellowCar.scale).to( {x: 0.746, y: 0.73} , 9000, Phaser.Easing.Quintic.Out, false);
            this.yellowCarTween1 = this.game.add.tween(this.yellowCar).to( { y: YELLOW_CAR_Y[1], x: YELLOW_CAR_X[1] }, 9000,  Phaser.Easing.Quintic.Out, false);

            this.yellowCarTween2 = this.game.add.tween(this.yellowCar).to( { y: YELLOW_CAR_Y[2], x: YELLOW_CAR_X[2] }, 750,  "Linear", false, 1000);
            this.yellowCarTween2.onComplete.add(
                function() {
                    this.yellowCar.scale.setTo( 1.0, 1.0);
                    this.yellowCar.frameName = this.theme.mapInfo.yellowCarFrames[1];
                }, this);
            this.yellowCarTween1.chain(this.yellowCarTween2);

            this.yellowCarTween3 = this.game.add.tween(this.yellowCar).to( { y: YELLOW_CAR_Y[3], x: YELLOW_CAR_X[3] }, 500,  "Linear", false);
            this.yellowCarTween3.onComplete.add(
                function() {
                    this.yellowCar.frameName = this.theme.mapInfo.yellowCarFrames[2];
                }, this);
            this.yellowCarTween2.chain(this.yellowCarTween3);

            this.yellowCarTween4 = this.game.add.tween(this.yellowCar).to( { y: YELLOW_CAR_Y[4], x: YELLOW_CAR_X[4] }, 3000,  "Linear", false);
            this.yellowCarTween3.chain(this.yellowCarTween4);
            this.yellowCarTween4.onComplete.add(function() {
                this.isPlaying = false;
            }, this);

            this.events = {
                playAudio: new Phaser.Signal()
            };
        },
        play: function() {
            if( this.isPlaying ) {
                return;
            }
            this.isPlaying = true;
            this.yellowCar.frameName = this.theme.mapInfo.yellowCarFrames[0];
            this.yellowCar.y = YELLOW_CAR_Y[0];
            this.yellowCar.x = YELLOW_CAR_X[0];
            this.yellowCar.visible = true;
            this.yellowCarTween1.start();
            this.tweenScale.start();
        },
        destroy: function() {
            this.yellowCar.destroy();
            if (this.events.playAudio) {
                this.events.playAudio.removeAll();
                this.events.playAudio.dispose();
            }
        }
    });

    module.exports = YellowCar;
}());

},{"basejs":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\basejs\\Base.js","lodash":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\lodash\\index.js","loglevel":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\loglevel\\lib\\loglevel.js"}],"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene\\actors\\iuc\\rounded-chat-rect.js":[function(require,module,exports){
/**
 * @author George Frick
 * @version 1.0.0
 * @creation 06/21/2017
 * Copyright 2015 Children's Hospital
 * This software is the property of Children's Hospital.
 *
 * This class will create a text bubble with a gradient back fill. It reproduces a series of text bubble images
 * from Flash that were nine-sliced. In this case, the nine-slice is no longer needed and we just render a
 * rounded rectangle as a mask.
 *
 * The rectangle will be padded around the font.
 *
 */
(function () {
    'use strict';
    var log = require('loglevel'),
        _ = require('lodash'),
        Base = require("basejs");

    var RoundedChatRect = Base.extend({
        constructor: function (game, theme) {
            this.game = game;
            this.theme = theme;

            var roundness = 28;
            var width = 440, height = 200;
            var x = 15, y = 10;
            var paddingX = 60, paddingY = 20;

            var bubbleGroup = this.game.add.group();
            this.bubble = bubbleGroup;

            // Create the text, which is wrapped according to the font.
            var fontHeading = _.cloneDeep(this.theme.fonts.chatText);
            fontHeading.wordWrapWidth = 460;
            var bubbleText = game.add.text((width/2) + paddingX , y + paddingY , "No text yet.", fontHeading );
            bubbleText.anchor.setTo(0.5, 0);
            this.bubbleText = bubbleText;
            this.bubbleText.lineSpacing = -4;
            this.gradients = ['#ffffff', '#ffffff'];

            // var bubbleBorderThin = this.game.add.graphics(0, 0);
            // bubbleBorderThin.lineStyle(2, 0x000000, 1);
            // bubbleBorderThin.drawRoundedRect(x+1, y+1, width, height, roundness);
            // bubbleBorderThin.endFill();
            // bubbleGroup.add(bubbleBorderThin);

            // draw the shape that contains the gradient
            // var gradientBmp = this.game.add.bitmapData(width, height);
            //
            // var gradientFill = gradientBmp.context.createLinearGradient(0, 0, width, 0);
            // gradientFill.addColorStop(0, this.gradients[0]);
            // gradientFill.addColorStop(1, this.gradients[1]);
            // gradientBmp.context.fillStyle = gradientFill;
            // gradientBmp.context.fillRect(0, 0, width, height);
            // var gradientSprite = this.game.add.sprite(x, y, gradientBmp);
            // bubbleGroup.add(gradientSprite);

            // var gradientMask = this.game.add.graphics(0, 0);
            // gradientMask.beginFill(0x000000);
            // gradientMask.drawRoundedRect(x, y, width, height, roundness); // draw a rounded rect mask
            // gradientMask.endFill();
            // bubbleGroup.add(gradientMask);

            // gradientSprite.mask = gradientMask; // apply the mask
            //
            // this.carrot = this.game.add.sprite( 454, 150, this.theme.textureKey,"speech_arrow.png");

            bubbleGroup.add(bubbleText);
            bubbleGroup.bringToTop(bubbleText);
            // bubbleGroup.add(this.carrot);

        },
        showResponse: function( response ) {
            this.bubbleText.setText( response.text.text );
        },
        show: function () {
            this.bubble.visible = true;
        },
        hide: function () {
            this.bubble.visible = false;
        },
        destroy: function () {
            this.bubble.destroy(true);
        }
    });

    module.exports = RoundedChatRect;
}());
},{"basejs":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\basejs\\Base.js","lodash":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\lodash\\index.js","loglevel":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\loglevel\\lib\\loglevel.js"}],"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene\\actors\\tween-helper.js":[function(require,module,exports){
/**
 * @author Paul Knell
 * @version 1.0.0
 * @creation 10/23/2018
 * Copyright 2018 Children's Hospital
 * This software is the property of Children's Hospital.
 *
 * A helper class that supports setting up Tween.  Intended to be used by Actors.
 *
 */
(function () {
    'use strict';
    var _ = require('lodash'),
        log = require('loglevel'),
        Base = require('basejs');

    var TweenHelper = Base.extend({
        constructor: function(game, actor) {
            if( !game ) {
                throw "TweenHelper requires game constructor argument.";
            }
            if( !actor ) {
                throw "TweenHelper requires actor constructor argument.";
            }
            this.game = game;
            this.actor = actor;
        },
        addTweens: function(tweenDataArray, sprite) {
            if (_.isArray(tweenDataArray)) {
                _.each(tweenDataArray, function(tweenData) { this.addTween(tweenData, sprite); }, this);
            } else {
                this.addTween(tweenDataArray, sprite);
            }
        },
        addTween: function(tweenData, sprite) {

            var tweens = {};

            var configureTweens = function(tweenData) {
                var delay = tweenData.delay ? tweenData.delay : 0;
                var easing = tweenData.easing || "Linear";
                if (tweens.spriteTween) {
                    var newValues = {};
                    if (tweenData.location) {
                        newValues.x = tweenData.location[0];
                        newValues.y = tweenData.location[1];
                    }
                    // Support for tweenData.location is here for backwards compatibility, but
                    // separate tweenData.x and tweenData.y has been added so that each dimension can be
                    // independently "tweened" if desired.
                    if (tweenData.x) {
                        newValues.x = tweenData.x;
                    }
                    if (tweenData.y) {
                        newValues.y = tweenData.y;
                    }
                    if (!_.isUndefined(tweenData.alpha)) {
                        newValues.alpha = tweenData.alpha;
                    }
                    if (!_.isUndefined(tweenData.angle)) {
                        newValues.angle = tweenData.angle;
                    }
                    if (!_.isUndefined(tweenData.rotation)) {
                        newValues.rotation = tweenData.rotation;
                    }
                    tweens.spriteTween.to(newValues, tweenData.time, easing, false, delay);
                }
                if (tweens.scaleTween) {
                    var newValues = {};
                    if (tweenData.scale) {
                        newValues.x = tweenData.scale[0];
                        newValues.y = tweenData.scale[1];
                    }
                    tweens.scaleTween.to( newValues, tweenData.time, easing, false, delay);
                }
            };

            if (tweenData.location || !_.isUndefined(tweenData.alpha)
                || !_.isUndefined(tweenData.rotation) || !_.isUndefined(tweenData.angle)
                || !_.isUndefined(tweenData.x) || !_.isUndefined(tweenData.y)) {

                tweens.spriteTween = this.game.add.tween(sprite);
            }
            if (tweenData.scale && sprite.scale) {
                tweens.scaleTween = this.game.add.tween(sprite.scale);
            }

            configureTweens(tweenData);

            if (tweenData.chainedTweens) {
                if (_.isArray(tweenData.chainedTweens)) {
                    _.each(tweenData.chainedTweens, configureTweens, this);
                } else {
                    this.configureTweens(tweenData.chainedTweens);
                }
            }

            if (tweenData.loop === true) {
                _.each(tweens, function(tween) { tween.loop(); });
            }

            if (!_.isUndefined(tweenData.yoyo)) {
                _.each(tweens, function(tween) {
                    var millis = Number(tweenData.yoyo);
                    if (!isNaN(millis)) {
                        tween.yoyo(true, millis);
                    } else if (tweenData.yoyo) {
                        tween.yoyo(true, 1000);
                    }
                });
            }

            if (!_.isUndefined(tweenData.variable)) {
                var tween = tweens.spriteTween || tweens.scaleTween;
                tween.onComplete.add(function() {
                    var varSet = {};
                    varSet[tweenData.variable] = 'complete';
                    this.actor.dispatchGameChoice(varSet);
                }, this);
            }

            _.each(tweens, function(tween) { tween.start(); });
        },
        removeTweens: function(sprite) {
            this.game.tweens.removeFrom(sprite);
            if (!_.isUndefined(sprite.scale)) {
                this.game.tweens.removeFrom(sprite.scale);
            }
        }
    });

    module.exports = TweenHelper;
}());

},{"basejs":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\basejs\\Base.js","lodash":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\lodash\\index.js","loglevel":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\loglevel\\lib\\loglevel.js"}],"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene\\play-action.js":[function(require,module,exports){
/**
 * @author George Frick
 * @version 1.0.0
 * @creation 07/01/2015
 * Copyright 2015 Children's Hospital
 * This software is the property of Children's Hospital.
 *
 * For now, just serve as a registry for actions
 */
(function () {
    'use strict';
    var _ = require('lodash'),
        log = require('loglevel'),
        Base = require('basejs'),
        ChoiceAction = require('./actions/game-choice'),
        RemoveActorAction = require('./actions/remove-actor'),
        AddActorAction = require('./actions/add-actor'),
        CheckOutcomeAction = require('./actions/check-outcomes'),
        ChangeObjectiveAction = require('./actions/change-objective'),
        MarkCompleteAction = require('./actions/mark-complete'),
        VariableIncrementAction = require('./actions/variable-increment'),
        MhSceneAction = require('./actions/mh/mh-change-scene'),
        SceneAction = require('./actions/change-scene');

    var PlayAction = Base.extend( {
        constructor: function() {
            this.actions = {};
        },
        registerAction: function( type, action ) {
            this.actions[type] = action;
        },
        getAction: function( data ) {
            if( !data || !data.type || !this.actions[data.type] ) {
                throw "Cannot retrieve an action without an action type. { type: '..', args: [...]} ";
            }
            var clazz = this.actions[data.type];
            return new clazz( data.args );
        }
    });

    var ActionFactory = new PlayAction();
    ActionFactory.registerAction("add-actor", AddActorAction);
    ActionFactory.registerAction("check-outcomes", CheckOutcomeAction);
    ActionFactory.registerAction("choice", ChoiceAction);
    ActionFactory.registerAction("mark-complete", MarkCompleteAction);
    ActionFactory.registerAction("objective", ChangeObjectiveAction);
    ActionFactory.registerAction("remove-actor", RemoveActorAction);
    ActionFactory.registerAction("scene", SceneAction);
    ActionFactory.registerAction("variable", ChoiceAction);
    ActionFactory.registerAction("variable-increment", VariableIncrementAction);

    // Mission-Health specific actions:
    ActionFactory.registerAction("mh-scene", MhSceneAction);

    module.exports = ActionFactory;
}());

},{"./actions/add-actor":"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene\\actions\\add-actor.js","./actions/change-objective":"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene\\actions\\change-objective.js","./actions/change-scene":"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene\\actions\\change-scene.js","./actions/check-outcomes":"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene\\actions\\check-outcomes.js","./actions/game-choice":"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene\\actions\\game-choice.js","./actions/mark-complete":"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene\\actions\\mark-complete.js","./actions/mh/mh-change-scene":"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene\\actions\\mh\\mh-change-scene.js","./actions/remove-actor":"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene\\actions\\remove-actor.js","./actions/variable-increment":"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene\\actions\\variable-increment.js","basejs":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\basejs\\Base.js","lodash":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\lodash\\index.js","loglevel":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\loglevel\\lib\\loglevel.js"}],"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene\\play-actor.js":[function(require,module,exports){
/**
 * @author George Frick
 * @version 1.1.0
 * @creation 07/01/2015, 09/07/2017
 * Copyright 2015 Children's Hospital
 * This software is the property of Children's Hospital.
 *
 * This is a registry and construction factory for Actors; which should not be instantiated on their own, only
 * from this creation point. This creation point also works for validation purposes.
 */
(function () {
    'use strict';
    var _ = require('lodash');
    var log = require('loglevel');
    var Base = require('basejs');

    /* General Actors, or reusable across courses */
    var Animation = require('./actors/actor-animation');
    var Audio = require('./actors/actor-audio');
    var Blocker = require('./actors/actor-blocker');
    var Button = require('./actors/actor-button');
    var ButtonCharacter = require('./actors/actor-button-character');
    var Character = require('./actors/actor-character');
    var ClickAnimation = require('./actors/actor-click-animation');
    var Decoration = require('./actors/actor-decoration');
    var Drag = require('./actors/actor-drag');
    var Draw = require('./actors/actor-draw');
    var Drop = require('./actors/actor-drop');
    var Fadeout = require('./actors/actor-fadeout');
    var InputField = require('./actors/actor-input-field');
    var Instructions = require('./actors/actor-instruction-bubble');
    var Line = require('./actors/actor-line');
    var NoInputCharacter = require('./actors/actor-no-input-character');
    var Question = require('./actors/actor-question');
    var Rectangle = require('./actors/actor-rectangle');
    var SpeechBubble = require('./actors/actor-speech-bubble');
    var Text = require('./actors/actor-text');
    var TextBubble = require('./actors/actor-text-bubble');
    var Timeline = require('./actors/actor-timeline');
    var ToggleButton = require('./actors/actor-toggle-button');
    var UrlButtonInvisible = require('./actors/actor-url-button-invisible');
    var UrlButton = require('./actors/actor-url-button');
    var Wistia = require('./actors/actor-wistia');

    /* Actors specifically for It's UR Choice usage */
    var Chat = require('./actors/iuc/actor-chat');
    var ItsUrChoiceBook = require('./actors/iuc/actor-book');
    var ItsUrChoiceDrag = require('./actors/iuc/actor-file-drag');
    var ItsUrChoicePhone = require('./actors/iuc/actor-phone');
    var ItsUrChoicePhoneButton = require('./actors/iuc/actor-phone-button');
    var MapActor = require('./actors/iuc/actor-map');
    var PopupActor = require('./actors/iuc/actor-popup');
    var WindowActor = require('./actors/iuc/actor-window');

    /* Actors specifically for Act Now! usage */
    var Announcer = require('./actors/actnow/actor-announcer');
    var Choice = require('./actors/actnow/actor-choice');
    var ActNowPhone = require('./actors/actnow/actor-phone');
    var PhoneButton = require('./actors/actnow/actor-phone-button');
    var Spinner = require('./actors/actnow/actor-spinner');
    var Chooser = require('./actors/actnow/actor-chooser');
    var ZinkComputer = require('./actors/actnow/actor-zink-computer');
    var ZinkPoster = require('./actors/actnow/actor-zink-poster');

    var PlayActor = Base.extend( {
        constructor: function() {
            this.actors = {};
            this.actorTypes = [];
        },
        registerActor: function( type, actor ) {
            _.each( this.actorTypes, function(knownType) {
               if( knownType === type ) {
                   throw "You are registering an actor type that already exists: " + type;
               }
            });
            this.actorTypes.push(type);
            this.actors[type] = actor;
        },
        getActor: function( type ) {
            return this.actors[type];
        },
        isAvailableType: function(type) {
            var found = false;
            _.each( this.actorTypes, function(knownType) {
                if( knownType === type ) {
                    found = true;
                }
            });
            return found;
        },
        getAvailableTypes: function() {
            // Return a clone, to make it read only.
            return _.clone(this.actorTypes);
        }
    });

    var ActorFactory = new PlayActor();

    /* General Actors, or reusable across courses */
    ActorFactory.registerActor("animation", Animation );
    ActorFactory.registerActor("audio", Audio );
    ActorFactory.registerActor("blocker", Blocker );
    ActorFactory.registerActor("button", Button );
    ActorFactory.registerActor("button-character", ButtonCharacter );
    ActorFactory.registerActor("character", Character);
    ActorFactory.registerActor("click-animation", ClickAnimation);
    ActorFactory.registerActor("decoration", Decoration );
    ActorFactory.registerActor("drag", Drag );
    ActorFactory.registerActor("draw", Draw );
    ActorFactory.registerActor("drop", Drop );
    ActorFactory.registerActor("fadeout", Fadeout );
    ActorFactory.registerActor("input-field", InputField );
    ActorFactory.registerActor("instructions", Instructions );
    ActorFactory.registerActor("line", Line );
    ActorFactory.registerActor("no-input-character", NoInputCharacter );
    ActorFactory.registerActor("rectangle", Rectangle);
    ActorFactory.registerActor("speech-bubble", SpeechBubble);
    ActorFactory.registerActor("text", Text);
    ActorFactory.registerActor("text-bubble", TextBubble);
    ActorFactory.registerActor("timeline", Timeline);
    ActorFactory.registerActor("toggle-button", ToggleButton );
    ActorFactory.registerActor("url-button", UrlButton );
    ActorFactory.registerActor("url-button-invisible", UrlButtonInvisible );
    ActorFactory.registerActor("question", Question);
    ActorFactory.registerActor("video", Wistia );
    ActorFactory.registerActor("wistia", Wistia );

    /* Actors specifically for It's UR Choice usage */
    ActorFactory.registerActor("chat", Chat);
    ActorFactory.registerActor("iucbook", ItsUrChoiceBook );
    ActorFactory.registerActor("iucdrag", ItsUrChoiceDrag );
    ActorFactory.registerActor("iucphone", ItsUrChoicePhone );
    ActorFactory.registerActor("iucphone-button", ItsUrChoicePhoneButton );
    ActorFactory.registerActor("iucmap", MapActor);
    ActorFactory.registerActor("iucpopup", PopupActor);
    ActorFactory.registerActor("iucwindow", WindowActor);

    /* Actors for Act Now! usage */
    ActorFactory.registerActor("announcer", Announcer);
    ActorFactory.registerActor("choice", Choice);
    ActorFactory.registerActor("phone-button", PhoneButton );
    ActorFactory.registerActor("phone", ActNowPhone );
    ActorFactory.registerActor("spinner", Spinner);
    ActorFactory.registerActor("chooser", Chooser);
    ActorFactory.registerActor("zink-computer", ZinkComputer );
    ActorFactory.registerActor("zink-poster", ZinkPoster);

    module.exports = ActorFactory;
}());

},{"./actors/actnow/actor-announcer":"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene\\actors\\actnow\\actor-announcer.js","./actors/actnow/actor-choice":"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene\\actors\\actnow\\actor-choice.js","./actors/actnow/actor-chooser":"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene\\actors\\actnow\\actor-chooser.js","./actors/actnow/actor-phone":"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene\\actors\\actnow\\actor-phone.js","./actors/actnow/actor-phone-button":"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene\\actors\\actnow\\actor-phone-button.js","./actors/actnow/actor-spinner":"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene\\actors\\actnow\\actor-spinner.js","./actors/actnow/actor-zink-computer":"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene\\actors\\actnow\\actor-zink-computer.js","./actors/actnow/actor-zink-poster":"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene\\actors\\actnow\\actor-zink-poster.js","./actors/actor-animation":"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene\\actors\\actor-animation.js","./actors/actor-audio":"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene\\actors\\actor-audio.js","./actors/actor-blocker":"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene\\actors\\actor-blocker.js","./actors/actor-button":"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene\\actors\\actor-button.js","./actors/actor-button-character":"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene\\actors\\actor-button-character.js","./actors/actor-character":"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene\\actors\\actor-character.js","./actors/actor-click-animation":"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene\\actors\\actor-click-animation.js","./actors/actor-decoration":"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene\\actors\\actor-decoration.js","./actors/actor-drag":"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene\\actors\\actor-drag.js","./actors/actor-draw":"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene\\actors\\actor-draw.js","./actors/actor-drop":"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene\\actors\\actor-drop.js","./actors/actor-fadeout":"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene\\actors\\actor-fadeout.js","./actors/actor-input-field":"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene\\actors\\actor-input-field.js","./actors/actor-instruction-bubble":"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene\\actors\\actor-instruction-bubble.js","./actors/actor-line":"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene\\actors\\actor-line.js","./actors/actor-no-input-character":"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene\\actors\\actor-no-input-character.js","./actors/actor-question":"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene\\actors\\actor-question.js","./actors/actor-rectangle":"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene\\actors\\actor-rectangle.js","./actors/actor-speech-bubble":"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene\\actors\\actor-speech-bubble.js","./actors/actor-text":"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene\\actors\\actor-text.js","./actors/actor-text-bubble":"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene\\actors\\actor-text-bubble.js","./actors/actor-timeline":"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene\\actors\\actor-timeline.js","./actors/actor-toggle-button":"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene\\actors\\actor-toggle-button.js","./actors/actor-url-button":"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene\\actors\\actor-url-button.js","./actors/actor-url-button-invisible":"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene\\actors\\actor-url-button-invisible.js","./actors/actor-wistia":"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene\\actors\\actor-wistia.js","./actors/iuc/actor-book":"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene\\actors\\iuc\\actor-book.js","./actors/iuc/actor-chat":"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene\\actors\\iuc\\actor-chat.js","./actors/iuc/actor-file-drag":"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene\\actors\\iuc\\actor-file-drag.js","./actors/iuc/actor-map":"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene\\actors\\iuc\\actor-map.js","./actors/iuc/actor-phone":"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene\\actors\\iuc\\actor-phone.js","./actors/iuc/actor-phone-button":"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene\\actors\\iuc\\actor-phone-button.js","./actors/iuc/actor-popup":"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene\\actors\\iuc\\actor-popup.js","./actors/iuc/actor-window":"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene\\actors\\iuc\\actor-window.js","basejs":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\basejs\\Base.js","lodash":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\lodash\\index.js","loglevel":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\loglevel\\lib\\loglevel.js"}],"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene\\play-scene.js":[function(require,module,exports){
/**
 * @author George Frick
 * @version 1.0.0
 * @creation 07/01/2015
 * Copyright 2015 Children's Hospital
 * This software is the property of Children's Hospital.
 *
 * Represent a "Scene" as part of an "Act". The scene contains an array of actors and deals with brokering events.
 */
(function () {

    var _ = require('lodash'),
        log = require('loglevel'),
        Base = require('basejs'),
        PlayActor = require('./play-actor'),
        PlayThroughActor = require('./actors/actnow/actor-playthrough');

    var PlayScene = Base.extend( {
        constructor: function(game, data, modelInterface, theme) {
            if( !game ) {
                throw "PlayScene requires game constructor argument.";
            }
            if( !data ) {
                throw "PlayScene requires data constructor argument.";
            }
            this.initScene(game);
            this.events = {
                onGameChoice: new Phaser.Signal(),
                onGameSpeech: new Phaser.Signal(),
                onGameMusic: new Phaser.Signal()
            };
            this.data = data;
            this.modelInterface = modelInterface;
            this.theme = theme;
            this.actors = [];
            this.delayedActors = [];
            this.isShowPlayThrough = false;
            this.playthroughActor = null;
        },
        initScene: function(game) {
            this.game = game;
            this.bgColor = this.game.add.graphics(0,0);
            this.bgColor.beginFill("0xFFFFFF");
            this.bgColor.drawRect(0,0, this.game.world.width, this.game.world.height);
            this.bgColor.endFill();
            this.bgColor._chw_name = "SceneBackgroundGraphics";
        },
        showNewSceneData: function( newData ) {
            this.data = newData;
            this.bgColor.visible = false;
            if( this.playthroughActor ) {
                this.playthroughActor.hide();
            }
            this.sceneId = newData.id;
        },
        /**
         * Show the scene to the player by setting the background and having all actors enter the scene.
         */
        showScene: function() {

            if( this.data.background !== "none") {
                if( this.background ) {
                    this.background.frameName = this.theme.sceneImages[this.data.background];
                    this.background.visible = true;
                } else {
                    this.background = this.game.add.sprite(0, 0, this.theme.textureKey, this.theme.sceneImages[this.data.background] );
                    this.background.inputEnabled = true;
                    this.game.input.disabled = true;
                }
            } else if( this.background ) {
                this.background.visible = false;
            }
            this.bgColor.visible = true;
            _.each( this.data.actors, this.addActor, this);

            /**
             * The constant 'play-through' actor.
             */
            if( this.isShowPlayThrough ) {
                this.playthroughActor.show();
            }

            if( this.data.backgroundMusic ) {
                this.events.onGameMusic.dispatch( this.data.backgroundMusic );
            }

        },
        showPlayThrough: function() {
            if( !this.playthroughActor  ) {
                this.playthroughActor  = new PlayThroughActor(this.game, this.theme);
                this.playthroughActor.setModelInterface(this.modelInterface);
                this.playthroughActor.enterScene();
            }
            this.isShowPlayThrough = true;
        },
        /**
         * Add an individual actor to the scene. The ordering is important, the actor is created, then event listeners
         * are added, and then the actor is allowed to enter the scene. We don't want an actor that immediately acts
         * to have its events ignored because the listeners weren't yet in place.
         * @param actorData
         */
        addActor: function(actorData) {
            var actorClass, actor, newActorData = actorData;
            // Actors can also be of type reference, meaning they load an actor from the set of actors outside scenes.
            if( actorData.type === "reference" ) {
                newActorData = this.modelInterface.getActorByRef( actorData.name );
            }

            actorClass = PlayActor.getActor(newActorData.type);
            actor = new actorClass(this.game, newActorData, this.theme);
            actor.setModelInterface(this.modelInterface);
            actor.clearVariables();
            // Any given actor may or may not publish these events.
            if (actor.events) {
                if (actor.events.onGameChoice) {
                    actor.events.onGameChoice.add(this.onGameChoice, this);
                }
                if (actor.events.onGameSpeech) {
                    actor.events.onGameSpeech.add(this.onGameSpeech, this);
                }
            }

            if (typeof newActorData.startDelay === "undefined") {
                this.actors.push(actor);
                actor.enterScene();
            } else {
                var delayActor = [];
                delayActor[0] = -1; // start time in ticks, to be set in tickUpdate()
                delayActor[1] = newActorData.startDelay; // in ticks (a tick is defined in main)
                delayActor[2] = actor;
                this.delayedActors.push(delayActor);
            }
        },
        /**
         * An actor has made a choice, bubble this event up to the 'act', and inform all other
         * actors of the choice so that they can adjust any internal state.
         * @param name
         * @param choice
         */
        onGameChoice: function( name, choice ) {
            this.events.onGameChoice.dispatch(  choice );

            var tempVars = _.pairs(choice)[0];
            choice.consumed = this.sceneCommand(name, tempVars[0], tempVars[1]);

            if( !choice.consumed ) {
             this.sendGameChoiceToActors(name, choice);
            }
        },
        sendGameChoiceToActors: function(name, choice) {
            // Tell any actors with a method to handle choices.
            _.each(this.actors, function (actor) {
                if (actor.getName() !== name && actor.onGameChoice) {
                    actor.onGameChoice(choice);
                }
            }, this);
        },
        /**
         * Run an Scene level command. Return true if a command happened, otherwise false.
         * @param command
         * @param arg
         * @returns {boolean} true if the command was consumed.
         */
        sceneCommand: function( actorName, command, arg) {
            log.warn("Scene command: " + command + " / " + arg);
            if( command === "dropped" ) {
                _.each( this.actors, function(actor1) {
                    if( actor1 && actor1.getType() === "drop" ) {
                        _.each( this.actors, function(actor2) {
                            if( actor2.getType() === "drag" || actor2.getType() === "iucdrag" ) {
                                if( this.game.physics.arcade.overlap( actor1.getPrimarySprite(), actor2.getPrimarySprite()) ) {
                                    actor1.onReceiveDrop(actor2.getName());
                                    return false; // exit loop.
                                }
                            }
                        }, this);
                    }
                }, this);

                return true;
            } else if( command === "mute_game") {
                _.each(this.actors, function (actor) {
                    if ( actor.data.name !== actorName && actor.data.type === "wistia" ) {
                        actor.onWistiaMute(this.game.sound.mute);
                    }
                }, this);
            }
            return false;
        },
        /**
         * An actor is showing new text (and possibly playing new audio). some actors animate others speaking, or
         * show the text/audio that an actor is speaking. So bubble the event and also tell the other actors.
         * @param name
         * @param speech
         */
        onGameSpeech: function( name, speech, sourceActor ) {
            this.events.onGameSpeech.dispatch( speech );
            if( sourceActor && sourceActor.isSoundEventInverse()  ) {
                if( sourceActor.onGameSpeech) {
                    sourceActor.onGameSpeech(speech);
                }
            } else {
                // Tell any actors with a method to handle speech changes.
                _.each(this.actors, function (actor) {
                    if (actor.data.name !== name && actor.onGameSpeech) {
                        actor.onGameSpeech(speech);
                    }
                    if ( actor.data.type === "wistia" ) {
                        actor.onGameSpeech(speech);
                    }
                }, this);
            }
        },
        /**
         * A speech stop action has occured from further up the chain, continue passing it down to each actor.
         * @param speech
         */
        onGameSpeechStop: function( speech ) {
            _.each( this.actors, function( actor ) {
                if( actor && actor.onGameSpeechStop ) {
                    actor.onGameSpeechStop( speech );
                }
            }, this);
        },
        removeActorByName: function( name ) {
            var index,
                actor = null;
            for( index = 0; index < this.actors.length; index++ ) {
                if( this.actors[index].data.name === name ) {
                    actor = this.actors[index];
                    break;
                } else {
                    log.warn(this.actors[index].data.name );
                }
            }
            if( actor ) {
                this.actors.splice(index, 1);
                this.destroyActor(actor);
            } else {
                // check for a delayed actor that hasn't been triggered yet
                for( index = 0; index < this.delayedActors.length; index++ ) {
                    var delayedActor = this.delayedActors[index][2];
                    if( delayedActor.data.name === name ) {
                        actor = delayedActor;
                        break;
                    } else {
                        log.warn(delayedActor.data.name );
                    }
                }
                if( actor ) {
                    this.delayedActors.splice(index, 1);
                    actor.destroy();
                }
            }
        },
        /**
         * Check for delayed actors. If a delayed actor's start time  in ticks has arrived, add it to the scene and
         * remove it from the delayed actors list.
         *
         * STRONG WARNING: Don't do much here - it's called from the main update loop. Any extensive operations will
         * cause the user interface to lag.
         */
        tickUpdate: function (tick) {
            for (var i = this.delayedActors.length - 1; i >= 0; i--) {
                if (this.delayedActors[i][0] < 0) {
                    // This actor's start time hasn't been set yet. Set its start time to current tick plus its delay.
                    this.delayedActors[i][0] = tick + this.delayedActors[i][1];
                }
                if (tick >= this.delayedActors[i][0] ) {
                    var actor = this.delayedActors[i][2];
                    var delay = this.delayedActors[i][1];
                    this.delayedActors.splice(i, 1); // remove it
                    //log.warn("delayed actor"
                    //    + (((typeof actor.data != "undefined") && (typeof actor.data.name != "undefined")) ? (" named \"" + actor.data.name + "\"") : "")
                    //    + (((typeof actor.data != "undefined") && (typeof actor.data.type != "undefined")) ? (" of type \"" + actor.data.type + "\"") : "")
                    //    + " entering scene after " + delay + " ticks");
                    this.actors.push(actor);
                    actor.enterScene();
                }
            }
            _.each( this.actors, function(actor1) {
                if( actor1.getType() === "drop"  ) {
                    _.each( this.actors, function(actor2) {
                        if( actor2.getType() === "drag" || actor2.getType() === "iucdrag" ) {
                            if( this.game.physics.arcade.overlap( actor1.getPrimarySprite(), actor2.getPrimarySprite()) ) {
                                actor1.onOverlapping(actor2.getName());
                                return false;
                            } else {
                                actor1.onOverlapping(null);
                            }
                        }
                    }, this);
                }
            }, this);
        },
        getActions: function() {
            return this.data.actions;
        },
        /**
         * Retrieve the keys of any additional audio this scene wants.
         * @returns {Array}
         */
        getAdditionalAudio: function() {
            var additionalAudio = [];
            _.each( this.data.actors, function( actor ) {
                if( actor.audioKey ) {
                    additionalAudio.push( actor.audioKey );
                }
            }, this);
            return additionalAudio;
        },
        destroyActor: function( actor ) {
            actor.destroy();
        },
        clearForReuse: function() {
            var actor;
            while( actor = this.actors.pop() ) {
                this.destroyActor(actor);
                actor = null;
            }
            this.actors = [];
            var delayedActorData;
            while( delayedActorData = this.delayedActors.pop() ) {
                actor = delayedActorData[2];
                actor.destroy();
                actor = null;
            }
            this.delayedActors = [];
            this.events.onGameChoice.removeAll();
            this.events.onGameSpeech.removeAll();
            this.events.onGameMusic.removeAll();
        },
        destroy: function() {
            this.clearForReuse();
            this.bgColor.destroy();
            this.background.inputEnabled = false;
            this.background.destroy();
            this.events.onGameChoice.dispose();
            this.events.onGameSpeech.dispose();
            this.events.onGameMusic.dispose();
            this.events = null;
        }
    });

    module.exports = PlayScene;
}());

},{"./actors/actnow/actor-playthrough":"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene\\actors\\actnow\\actor-playthrough.js","./play-actor":"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene\\play-actor.js","basejs":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\basejs\\Base.js","lodash":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\lodash\\index.js","loglevel":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\loglevel\\lib\\loglevel.js"}],"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scorm.js":[function(require,module,exports){
/**
 * @author George Frick
 * @version 1.0.0
 * @creation 06/10/2015
 * Copyright 2015 Children's Hospital
 * This software is the property of Children's Hospital.
 *
 * This module is an interface to the SCORM API provided via /main/scorm/APIWrapper.js
 * Users of this module are expected to call initialize with a settings object of at least:
 * {
 *     scormEnabled: true|false
 * }
 * You do not have to enable Scorm to use this class, it will hold an internal representation for debugging
 * purposes.
 *
 */
(function () {

    var Base = require('basejs'),
        log = require('loglevel'),
        _ = require('lodash');

    // @TODO, inject scorm interface instead of assuming window.
    var Scorm = Base.extend({
        constructor: function (scormInterface) {
            this.scormInterface = scormInterface || window;
            this.sessionStartTime = new Date();
            this.interval = 0;
            this.scormAvailable = false;
            this.initSuccess = "";
            this.constants = {
                incomplete: "incomplete",
                notAttempted: "not attempted",
                complete: "completed"
            };
            /**
             * @See Scorm Runtime ENV PDF Section 3.4
             */
            this.LMSKeys = {
                lessonStatus: "cmi.core.lesson_status",
                interactionCount: "cmi.interactions._count",
                suspendData: "cmi.suspend_data",
                interactionId: "cmi.interactions.#.id",
                interactionType: "cmi.interactions.#.type", // @SEE LMSInteractionTypes below.
                interactionCorrectPattern: "cmi.interactions.#.correct_responses.0.pattern",
                interactionActualPattern: "cmi.interactions.#.student_response",
                interactionResult: "cmi.interactions.#.result", // @SEE LMSResultTypes below
                rawScore: "cmi.core.score.raw",
                sessionTime: "cmi.core.session_time",
                objectiveId: "cmi.objectives.#.id",
                objectiveStatus: "cmi.objectives.#.status" // @SEE LMSObjectiveStatusValues below
            };
            /**
             * The valid "status" field when working with cmi objectives
             * @type {Array}
             */
            this.LMSObjectiveStatusValues = [
                "passed", "completed", "failed", "incomplete", "browsed", "not attempted"
            ];
            /**
             * The valid "type" field when creating an interaction.
             * @See Scorm Runtime Env PDF Section 3.4.4
             */
            this.LMSInteractionTypes = [
                "true-false", "choice", "fill-in", "matching", "performance", "sequencing", "likert", "numeric"
            ];
            /**
             * The valid "result" field when creating an interaction.
             * @See Scorm Runtime Env PDF Section 3.4.4
             */
            this.LMSResultTypes = [
                "correct", "wrong", "unanticipated", "neutral" // and x.x
            ];
            this.LMSResultTypeNumber = /[0-9]+\.[0-9]+/; // Regular expression for #.#
            this.lessonData = {};
        },
        initialize: function (settings) {
            log.debug("Initializing SCORM CH API");
            if (settings && settings.scormEnabled) {
                log.debug("scormEnabled === true, initializing SCORM");
                if (!doLMSInitialize) {
                    log.error("The LMS Wrapper appears to be missing. Skipping SCORM Initialization.");
                    return;
                }
                this.initSuccess = doLMSInitialize();
                // error in early IE. GJF console.log("initialize success?: " + success);
                if (this.initSuccess === "true") {
                    this.scormAvailable = true;
                    log.debug("SCORM initialized from SCORM CH API successfully.");
                    // Create a "that" closure for the window function. GJF.
                    var that = this;
                    window.onbeforeunload = function () {
                        window.clearInterval(that.interval);
                        doLMSFinish();
                    };

                    this.sessionStartTime = new Date();
                } else {
                    log.error("SCORM initialize from SCORM CH API, FAILED!");
                    alert("Could not initialize SCORM API.");
                }
            } else {
                log.warn("scormEnabled === false, skipping SCORM");
            }
        },
        initializeStatus: function () {
            if (this.scormAvailable) {
                var status = doLMSGetValue(this.LMSKeys.lessonStatus);
                if (!status || status === this.constants.notAttempted) {
                    this.setLessonStatus(this.constants.incomplete);
                }
            } else {
                this.setLessonStatus(this.constants.incomplete);
            }
        },
        setLessonStatus: function (status) {
            if (this.scormAvailable) {
                var formattedTime = this.computeSessionTime();
                doLMSSetValue(this.LMSKeys.sessionTime, formattedTime);
                doLMSSetValue(this.LMSKeys.lessonStatus, status);
                doLMSCommit();
            } else {
                this.lessonData[this.LMSKeys.lessonStatus] = status;
            }
        },
        getLessonStatus: function () {
            var status = "";
            if (this.scormAvailable) {
                status = doLMSGetValue(this.LMSKeys.lessonStatus);
            } else {
                status = this.lessonData[this.LMSKeys.lessonStatus];
            }
            return status;
        },
        isLessonComplete: function () {
            return this.getLessonStatus() === this.constants.complete;
        },
        getObjective: function( index ) {
            var id, status;
            if (this.scormAvailable) {
                id = doLMSGetValue((this.LMSKeys.objectiveId).replace("#", index));
                status = doLMSGetValue((this.LMSKeys.objectiveStatus).replace("#", index));
            } else {
                id = this.lessonData[(this.LMSKeys.objectiveId).replace("#", index)];
                status = this.lessonData[(this.LMSKeys.objectiveStatus).replace("#", index)];
            }
            var temp = {
                index: index,
                id: id,
                status: status
            };
            log.debug(temp);
            return temp;
        },
        setObjective: function( index, id, status) {
            log.debug("Set objective " + index + " " + id + " " + status );
            if (this.scormAvailable) {
                var formattedTime = this.computeSessionTime();
                doLMSSetValue(this.LMSKeys.sessionTime, formattedTime);
                doLMSSetValue((this.LMSKeys.objectiveId).replace("#", index), id);
                doLMSSetValue((this.LMSKeys.objectiveStatus).replace("#", index), status);
                doLMSCommit();
            } else {
                 this.lessonData[(this.LMSKeys.objectiveId).replace("#", index)] = id;
                 this.lessonData[(this.LMSKeys.objectiveStatus).replace("#", index)] = status;
            }
        },
        getInteractionCount: function () {
            var count = 0;
            if (this.scormAvailable) {
                count = doLMSGetValue(this.LMSKeys.interactionCount);
            } else {
                count = this.lessonData[this.LMSKeys.interactionCount] || 0; // default to 0.
            }
            return Number(count);
        },
        createInteraction: function (index, id, type, correctResponse, studentResponse, result) {
            // Allow the user to pass in an object with these values instead of all of the values directly.
            log.debug(index);
            if (typeof index === "object") {
                id = index.id;
                type = index.type;
                correctResponse = index.correctResponse;
                studentResponse = index.studentResponse;
                result = index.result;
                index = index.index;
            }
            if (type && !(_.contains(this.LMSInteractionTypes, type))) {
                throw "Invalid LMSInteractionType: " + type;
            }
            if (result && !( _.contains(this.LMSResultTypes,result)) && !result.match(this.LMSResultTypeNumber)) {
                throw "Invalid LMSResultType: " + result;
            }
            id = this.trimString(id, 255);
            id = this.replaceSpaces(id, "_");
            if (this.scormAvailable) {
                var formattedTime = this.computeSessionTime();
                doLMSSetValue(this.LMSKeys.sessionTime, formattedTime);
                doLMSSetValue((this.LMSKeys.interactionId).replace("#", index), id);
                doLMSSetValue((this.LMSKeys.interactionType).replace("#", index), type);
                doLMSSetValue((this.LMSKeys.interactionCorrectPattern).replace("#", index), correctResponse);
                doLMSSetValue((this.LMSKeys.interactionActualPattern).replace("#", index), studentResponse);
                doLMSSetValue((this.LMSKeys.interactionResult).replace("#", index), result);
                doLMSCommit();
            } else {
                this.lessonData[(this.LMSKeys.interactionId).replace("#", index)] = id;
                this.lessonData[(this.LMSKeys.interactionType).replace("#", index)] = type;
                this.lessonData[(this.LMSKeys.interactionCorrectPattern).replace("#", index)] = correctResponse;
                this.lessonData[(this.LMSKeys.interactionActualPattern).replace("#", index)] = studentResponse;
                this.lessonData[(this.LMSKeys.interactionResult).replace("#", index)] = result;
            }
        },
        setSuspendData: function (data) {
            if (this.scormAvailable) {
                log.debug("Setting suspend data");
                log.debug(data);
                var formattedTime = this.computeSessionTime();
                doLMSSetValue(this.LMSKeys.sessionTime, formattedTime);
                doLMSSetValue(this.LMSKeys.suspendData, data);
                doLMSCommit();
            } else {
                this.lessonData[this.LMSKeys.suspendData] = data;
            }
        },
        getSuspendData: function () {
            var data = "";
            if (this.scormAvailable) {
                data = doLMSGetValue(this.LMSKeys.suspendData);
            } else {
                data = this.lessonData[this.LMSKeys.suspendData];
            }
            return data;
        },
        markComplete: function () {
            if (this.scormAvailable) {
                var formattedTime = this.computeSessionTime();
                doLMSSetValue(this.LMSKeys.sessionTime, formattedTime);
                doLMSSetValue(this.LMSKeys.lessonStatus, this.constants.complete);
                doLMSCommit();
            } else {
                this.lessonData[this.LMSKeys.lessonStatus] = this.constants.complete;
            }
        },
        setRawScore: function (score) {
            if (this.scormAvailable) {
                var formattedTime = this.computeSessionTime();
                doLMSSetValue(this.LMSKeys.sessionTime, formattedTime);
                doLMSSetValue(this.LMSKeys.rawScore, score);
                doLMSCommit();
            } else {
                this.lessonData[this.LMSKeys.rawScore] = score;
            }
        },
        getRawScore: function () {
            var score = 0;
            if (this.scormAvailable) {
                score = doLMSGetValue(this.LMSKeys.rawScore);
            } else {
                score = this.lessonData[this.LMSKeys.rawScore];
            }
            return score;
        },
        computeSessionTime: function () {
            var timeNow = new Date();
            var timeDifference = timeNow.getTime() - this.sessionStartTime.getTime();
            var dateDifference = new Date(timeDifference);
            //console.log("session time set to: " + formattedTime)
            return this.formatDateForSCORM(dateDifference);
        },
        formatDateForSCORM: function (date) {
            var totalTime = "";
            var hr = date.getUTCHours();
            var min = date.getUTCMinutes();
            var sec = date.getUTCSeconds();

            if (hr < 10) {
                totalTime = totalTime + "0";
            }
            totalTime = totalTime + hr + ":";
            if (min < 10) {
                totalTime = totalTime + "0";
            }
            totalTime = totalTime + min + ":";
            if (sec < 10) {
                totalTime = totalTime + "0";
            }
            totalTime = totalTime + sec;

            return totalTime;
        },
        trimString: function (str, toLength) {
            if (str.length > toLength) {
                str = str.substr(0, toLength);
            }
            return str;
        },
        replaceSpaces: function (str, replacement) {
            return str.replace(/\s/g, replacement);
        },
        getLessonData: function () {
            return this.lessonData;
        }
    });

    module.exports = Scorm;
}());
},{"basejs":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\basejs\\Base.js","lodash":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\lodash\\index.js","loglevel":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\loglevel\\lib\\loglevel.js"}],"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\states\\boot.js":[function(require,module,exports){
/**
 * @author George Frick
 * @version 1.1.0 @ 09/21/15
 * @creation 06/04/2015
 * Copyright 2015 Children's Hospital
 * This software is the property of Children's Hospital.
 *
 * The boot state configures the game based on the device loading it. The basic game data is loaded so
 * that the preload state has all prerequisites. The settings
 */
(function () {
	"use strict";
	var Base = require("basejs");

	var BootState = Base.extend({
		constructor: function (settings) {
			if (
				!settings ||
				!settings.loading_image_key ||
				!settings.loading_image_url ||
				!settings.play_json_key ||
				!settings.play_json_url ||
				!settings.preload_state_name
			) {
				throw "Boot State is missing a required configuration field.";
			}

			this.settings = settings;
			this.ready = false;
		},
		/**
		 * called first before preload.
		 */
		init: function () {
			this.ready = false;
			this.game.input.maxPointers = 1;
			// Don't pause the game when the mouse leaves.
			this.game.stage.disableVisibilityChange = true;
			//this.game.scale.pageAlignHorizontally = true;
			this.game.scale.refresh();

			if (typeof PhaserInput !== "undefined") {
				this.game.plugins.add(PhaserInput.Plugin);
			}
		},
		/**
		 * In order to show the loading image while all of the resources load, it gets loaded during the
		 * boot state, so that it is available during preload of the preload state.
		 */
		preload: function () {
			this.game.load.image(
				this.settings.loading_image_key,
				this.settings.loading_image_url
			);
			this.game.load.text(
				this.settings.play_json_key,
				this.settings.play_json_url
			);
			this.game.load.onLoadComplete.addOnce(this.loadComplete, this);
		},
		loadComplete: function () {
			var playJsonData = this.game.cache.getText(this.settings.play_json_key);
			var config = JSON.parse(playJsonData);
			/*if(config.autoScale){
                window.addEventListener("resize", this.onResize.bind(this));
                this.onResize();
            }*/
			this.game.scale.scaleMode = Phaser.ScaleManager.SHOW_ALL;
			this.game.scale.fullScreenScaleMode = Phaser.ScaleManager.SHOW_ALL;

			this.game.state.start(this.settings.preload_state_name);
		},
		/**
		 * Scales the gameContainer so that it does not exceed the inner browser width or height
		 */
		/*onResize: function(){
            var windowWidth = window.innerWidth;
            var windowHeight = window.innerHeight;
            var windowRatio = windowWidth / windowHeight;
            var gameContainer = document.querySelector("#gameContainer");
            var boxRatio = this.game.world.width / this.game.world.height;
            if(windowRatio < boxRatio){
                gameContainer.style.width = windowWidth + "px";
                gameContainer.style.height = (windowWidth / boxRatio) + "px";
            }else{
                gameContainer.style.width = (windowHeight * boxRatio) + "px";
                gameContainer.style.height = windowHeight + "px";
            }
        }*/
	});

	module.exports = BootState;
})();

},{"basejs":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\basejs\\Base.js"}],"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\states\\main.js":[function(require,module,exports){
/**
 * @author George Frick
 * @version 1.1.0 @ 09/22/15
 * @creation 07/01/2015
 * Copyright 2015 Children's Hospital
 * This software is the property of Children's Hospital.
 *
 * This is the main state. It will be restarted every time an Act changes. The responsibility of this state is to
 * allow the current Act to load media before starting. Everything is done via the Play, no act should be
 * referenced or instantiated here.
 */
(function () {
    'use strict';
    var log = require('loglevel'),
        LoadingScreen = require('../loading-screen'),
        Base = require('basejs');

    var MainState = Base.extend({
        constructor: function (settings) {
            if (!settings
                || !settings.loading_image_key ) {
                throw "Main state is missing a required configuration field.";
            }

            this.settings = settings;
        },
        /**
         * Called before preload, during each restart.
         * @param isRestart true if being called as part of a restart.
         */
        init: function (isRestart) {
            log.info("Main state created");
            if( !this.game.loadingScreen ) {
                this.game.loadingScreen = new LoadingScreen(this.game, this.settings);
            }
            this.ready = false;
            this.isRestart = isRestart; // we are restarting this state due to act change.
        },
        /**
         * Called after init. This is where media can be downloaded.
         */
        preload: function () {
            this.game.loadingScreen.show();
            this.game.play.preloadAct();
            this.game.load.onLoadComplete.addOnce(this.loadComplete, this);
        },
        loadComplete: function() {
            this.game.loadingScreen.showComplete();
        },
        /**
         * Called when preload is complete, all media is downloaded. (But we'll check ourselves anyways)
         */
        create: function () {
        },
        /**
         * Render is called each game tick to allow the application to render anything 'on top' such as a HUD.
         * Used here for debugging.
         */
        render: function () {
            this.game.play.renderDebug();
        },
        /**
         * Called each game tick, used to manually check the media state and then start. Otherwise it passes the
         * update along to the Play.
         */
        update: function () {
            if (this.ready === true) {
                this.game.play.tickUpdate(this.game.time.now);
            } else if (this.game.play.isPreloadActComplete() === true) {
                this.ready = true;
                this.game.play.showNextAct(this.isRestart);
                this.game.play.sendCrossActVariables();
                this.game.loadingScreen.destroy();
            }
        }
    });

    module.exports = MainState;
}());
},{"../loading-screen":"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\loading-screen.js","basejs":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\basejs\\Base.js","loglevel":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\loglevel\\lib\\loglevel.js"}],"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\states\\preload.js":[function(require,module,exports){
/**
 * @author George Frick
 * @version 1.1.0 @ 09/21/15
 * @creation 06/04/2015
 * Copyright 2015 Children's Hospital
 * This software is the property of Children's Hospital.
 *
 * The preload state shows the loading screen while it processes all of the themes and scene data for each
 * act entry in the play.
 */
(function () {
	"use strict";
	var log = require("loglevel"),
		Base = require("basejs"),
		Play = require("../play/play"),
		LoadingScreen = require("../loading-screen"),
		_ = require("lodash");

	var PreloadState = Base.extend({
		constructor: function (settings) {
			if (
				!settings ||
				!settings.loading_image_key ||
				!settings.play_json_key ||
				!settings.main_state_name
			) {
				throw "Preload state is missing a required configuration field.";
			}

			this.settings = settings;
		},
		/**
		 * This is called before preload. Just record that things aren't complete yet.
		 */
		init: function () {
			this.loadingScreen = new LoadingScreen(this.game, this.settings);
			this.ready = false;

			var playJsonData = this.game.cache.getText(this.settings.play_json_key);
			if (!playJsonData) {
				throw "Error in Preload: Did not find play json data in cache.";
			}
			this.game.play = new Play(
				this.game,
				JSON.parse(playJsonData),
				this.settings
			);
		},
		/**
		 * Show the preload image, allow the Play to load data.
		 */
		preload: function () {
			if (this.game.play.isLogging() === true) {
				log.enableAll();
				log.warn("Logging Enabled");
			} else {
				log.disableAll();
			}
			this.loadingScreen.show();
			var preloadSet = this.game.play.getRequiredResourceList();
			_.each(
				preloadSet,
				function (preloadItem) {
					this.game.load.text(preloadItem.key, preloadItem.file);
				},
				this
			);
			this.game.load.audio("audioFix", [
				this.game.config.assetPath + "engine/silence-m4a.m4a",
				this.game.config.assetPath + "engine/silence-ogg.ogg",
			]);
			this.game.load.onLoadComplete.addOnce(this.loadComplete, this);
		},
		/**
		 * Called when preload is complete, all media is downloaded. (But we'll check ourselves anyways)
		 */
		create: function () {
			this.loadingScreen.showClickthrough();
			// this.loadingScreen.showComplete();
			//this.loadingScreen.destroy();
		},
		loadComplete: function () {
			this.game.scorm.initialize({
				scormEnabled: _environmentSettings.scormEnabled,
				//scormEnabled: this.game.play.isScormEnabled(),
			});
			this.game.scorm.initializeStatus();
			this.game.play.loadScormData();
			this.game.play.selectDefaultAct();
			var audioFix = this.game.add.audio("audioFix");
			this.game.input.onTap.add(function () {
				audioFix.play();
				this.state.start(this.settings.main_state_name);
			}, this);
			//this.state.start(this.settings.main_state_name); // The "Play" can also do this.
		},
	});

	module.exports = PreloadState;
})();

},{"../loading-screen":"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\loading-screen.js","../play/play":"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\play\\play.js","basejs":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\basejs\\Base.js","lodash":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\lodash\\index.js","loglevel":"C:\\CHW\\Code Repositories\\Scene Engine 2\\node_modules\\loglevel\\lib\\loglevel.js"}],"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\main.js":[function(require,module,exports){
/**
 * @author George Frick
 * @version 1.0.0
 * @creation 06/04/2015
 * Copyright 2015 Children's Hospital
 * This software is the property of Children's Hospital.
 *
 * This file exists so that startup of an engine can be controlled. This file is simply a stub that works to
 * build the engine and then start it. This means that the engine can be loaded without it starting for
 * purposes of testing, debugging, and adding any code that comes up that happens before/after the engine is
 * done.
 */
(function () {
    module.exports = require('./engine/scene-engine');

    if (!String.prototype.startsWith) {
        (function() {
            'use strict'; // needed to support `apply`/`call` with `undefined`/`null`
            var defineProperty = (function() {
                // IE 8 only supports `Object.defineProperty` on DOM elements
                try {
                    var object = {};
                    var $defineProperty = Object.defineProperty;
                    var result = $defineProperty(object, object, object) && $defineProperty;
                } catch(error) {}
                return result;
            }());
            var toString = {}.toString;
            var startsWith = function(search) {
                if (this === null) {
                    throw TypeError();
                }
                var string = String(this);
                if (search && toString.call(search) === '[object RegExp]') {
                    throw TypeError();
                }
                var stringLength = string.length;
                var searchString = String(search);
                var searchLength = searchString.length;
                var position = arguments.length > 1 ? arguments[1] : undefined;
                // `ToInteger`
                var pos = position ? Number(position) : 0;
                if (pos !== pos) { // better `isNaN`
                    pos = 0;
                }
                var start = Math.min(Math.max(pos, 0), stringLength);
                // Avoid the `indexOf` call if no match is possible
                if (searchLength + start > stringLength) {
                    return false;
                }
                var index = -1;
                while (++index < searchLength) {
                    if (string.charCodeAt(start + index) !== searchString.charCodeAt(index)) {
                        return false;
                    }
                }
                return true;
            };
            if (defineProperty) {
                defineProperty(String.prototype, 'startsWith', {
                    'value': startsWith,
                    'configurable': true,
                    'writable': true
                });
            } else {
                String.prototype.startsWith = startsWith;
            }
        }());
    }
}());

},{"./engine/scene-engine":"C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\engine\\scene-engine.js"}]},{},["C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\main.js"])("C:\\CHW\\Code Repositories\\Scene Engine 2\\src\\main\\main.js")
});

//# sourceMappingURL=data:application/json;charset:utf-8;base64,
